// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: messages-monero.proto

#include "messages-monero.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

#ifdef minor
#undef minor
#endif
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_messages_2dmonero_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MoneroKeyImageExportInitRequest_MoneroSubAddressIndicesList_messages_2dmonero_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_messages_2dmonero_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MoneroKeyImageSyncStepAck_MoneroExportedKeyImage_messages_2dmonero_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_messages_2dmonero_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MoneroKeyImageSyncStepRequest_MoneroTransferDetails_messages_2dmonero_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_messages_2dmonero_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MoneroTransactionAllOutSetAck_MoneroRingCtSig_messages_2dmonero_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_messages_2dmonero_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MoneroTransactionDestinationEntry_messages_2dmonero_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_messages_2dmonero_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MoneroTransactionDestinationEntry_MoneroAccountPublicAddress_messages_2dmonero_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_messages_2dmonero_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_MoneroTransactionInitRequest_MoneroTransactionData_messages_2dmonero_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_messages_2dmonero_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MoneroTransactionRsigData_messages_2dmonero_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_messages_2dmonero_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_MoneroTransactionSourceEntry_messages_2dmonero_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_messages_2dmonero_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MoneroTransactionSourceEntry_MoneroMultisigKLRki_messages_2dmonero_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_messages_2dmonero_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MoneroTransactionSourceEntry_MoneroOutputEntry_messages_2dmonero_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_messages_2dmonero_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MoneroTransactionSourceEntry_MoneroOutputEntry_MoneroRctKeyPublic_messages_2dmonero_2eproto;
namespace hw {
namespace trezor {
namespace messages {
namespace monero {
class MoneroTransactionSourceEntry_MoneroOutputEntry_MoneroRctKeyPublicDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MoneroTransactionSourceEntry_MoneroOutputEntry_MoneroRctKeyPublic> _instance;
} _MoneroTransactionSourceEntry_MoneroOutputEntry_MoneroRctKeyPublic_default_instance_;
class MoneroTransactionSourceEntry_MoneroOutputEntryDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MoneroTransactionSourceEntry_MoneroOutputEntry> _instance;
} _MoneroTransactionSourceEntry_MoneroOutputEntry_default_instance_;
class MoneroTransactionSourceEntry_MoneroMultisigKLRkiDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MoneroTransactionSourceEntry_MoneroMultisigKLRki> _instance;
} _MoneroTransactionSourceEntry_MoneroMultisigKLRki_default_instance_;
class MoneroTransactionSourceEntryDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MoneroTransactionSourceEntry> _instance;
} _MoneroTransactionSourceEntry_default_instance_;
class MoneroTransactionDestinationEntry_MoneroAccountPublicAddressDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MoneroTransactionDestinationEntry_MoneroAccountPublicAddress> _instance;
} _MoneroTransactionDestinationEntry_MoneroAccountPublicAddress_default_instance_;
class MoneroTransactionDestinationEntryDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MoneroTransactionDestinationEntry> _instance;
} _MoneroTransactionDestinationEntry_default_instance_;
class MoneroTransactionRsigDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MoneroTransactionRsigData> _instance;
} _MoneroTransactionRsigData_default_instance_;
class MoneroGetAddressDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MoneroGetAddress> _instance;
} _MoneroGetAddress_default_instance_;
class MoneroAddressDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MoneroAddress> _instance;
} _MoneroAddress_default_instance_;
class MoneroGetWatchKeyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MoneroGetWatchKey> _instance;
} _MoneroGetWatchKey_default_instance_;
class MoneroWatchKeyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MoneroWatchKey> _instance;
} _MoneroWatchKey_default_instance_;
class MoneroTransactionInitRequest_MoneroTransactionDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MoneroTransactionInitRequest_MoneroTransactionData> _instance;
} _MoneroTransactionInitRequest_MoneroTransactionData_default_instance_;
class MoneroTransactionInitRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MoneroTransactionInitRequest> _instance;
} _MoneroTransactionInitRequest_default_instance_;
class MoneroTransactionInitAckDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MoneroTransactionInitAck> _instance;
} _MoneroTransactionInitAck_default_instance_;
class MoneroTransactionSetInputRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MoneroTransactionSetInputRequest> _instance;
} _MoneroTransactionSetInputRequest_default_instance_;
class MoneroTransactionSetInputAckDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MoneroTransactionSetInputAck> _instance;
} _MoneroTransactionSetInputAck_default_instance_;
class MoneroTransactionInputsPermutationRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MoneroTransactionInputsPermutationRequest> _instance;
} _MoneroTransactionInputsPermutationRequest_default_instance_;
class MoneroTransactionInputsPermutationAckDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MoneroTransactionInputsPermutationAck> _instance;
} _MoneroTransactionInputsPermutationAck_default_instance_;
class MoneroTransactionInputViniRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MoneroTransactionInputViniRequest> _instance;
} _MoneroTransactionInputViniRequest_default_instance_;
class MoneroTransactionInputViniAckDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MoneroTransactionInputViniAck> _instance;
} _MoneroTransactionInputViniAck_default_instance_;
class MoneroTransactionAllInputsSetRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MoneroTransactionAllInputsSetRequest> _instance;
} _MoneroTransactionAllInputsSetRequest_default_instance_;
class MoneroTransactionAllInputsSetAckDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MoneroTransactionAllInputsSetAck> _instance;
} _MoneroTransactionAllInputsSetAck_default_instance_;
class MoneroTransactionSetOutputRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MoneroTransactionSetOutputRequest> _instance;
} _MoneroTransactionSetOutputRequest_default_instance_;
class MoneroTransactionSetOutputAckDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MoneroTransactionSetOutputAck> _instance;
} _MoneroTransactionSetOutputAck_default_instance_;
class MoneroTransactionAllOutSetRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MoneroTransactionAllOutSetRequest> _instance;
} _MoneroTransactionAllOutSetRequest_default_instance_;
class MoneroTransactionAllOutSetAck_MoneroRingCtSigDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MoneroTransactionAllOutSetAck_MoneroRingCtSig> _instance;
} _MoneroTransactionAllOutSetAck_MoneroRingCtSig_default_instance_;
class MoneroTransactionAllOutSetAckDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MoneroTransactionAllOutSetAck> _instance;
} _MoneroTransactionAllOutSetAck_default_instance_;
class MoneroTransactionSignInputRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MoneroTransactionSignInputRequest> _instance;
} _MoneroTransactionSignInputRequest_default_instance_;
class MoneroTransactionSignInputAckDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MoneroTransactionSignInputAck> _instance;
} _MoneroTransactionSignInputAck_default_instance_;
class MoneroTransactionFinalRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MoneroTransactionFinalRequest> _instance;
} _MoneroTransactionFinalRequest_default_instance_;
class MoneroTransactionFinalAckDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MoneroTransactionFinalAck> _instance;
} _MoneroTransactionFinalAck_default_instance_;
class MoneroKeyImageExportInitRequest_MoneroSubAddressIndicesListDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MoneroKeyImageExportInitRequest_MoneroSubAddressIndicesList> _instance;
} _MoneroKeyImageExportInitRequest_MoneroSubAddressIndicesList_default_instance_;
class MoneroKeyImageExportInitRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MoneroKeyImageExportInitRequest> _instance;
} _MoneroKeyImageExportInitRequest_default_instance_;
class MoneroKeyImageExportInitAckDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MoneroKeyImageExportInitAck> _instance;
} _MoneroKeyImageExportInitAck_default_instance_;
class MoneroKeyImageSyncStepRequest_MoneroTransferDetailsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MoneroKeyImageSyncStepRequest_MoneroTransferDetails> _instance;
} _MoneroKeyImageSyncStepRequest_MoneroTransferDetails_default_instance_;
class MoneroKeyImageSyncStepRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MoneroKeyImageSyncStepRequest> _instance;
} _MoneroKeyImageSyncStepRequest_default_instance_;
class MoneroKeyImageSyncStepAck_MoneroExportedKeyImageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MoneroKeyImageSyncStepAck_MoneroExportedKeyImage> _instance;
} _MoneroKeyImageSyncStepAck_MoneroExportedKeyImage_default_instance_;
class MoneroKeyImageSyncStepAckDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MoneroKeyImageSyncStepAck> _instance;
} _MoneroKeyImageSyncStepAck_default_instance_;
class MoneroKeyImageSyncFinalRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MoneroKeyImageSyncFinalRequest> _instance;
} _MoneroKeyImageSyncFinalRequest_default_instance_;
class MoneroKeyImageSyncFinalAckDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MoneroKeyImageSyncFinalAck> _instance;
} _MoneroKeyImageSyncFinalAck_default_instance_;
class MoneroGetTxKeyRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MoneroGetTxKeyRequest> _instance;
} _MoneroGetTxKeyRequest_default_instance_;
class MoneroGetTxKeyAckDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MoneroGetTxKeyAck> _instance;
} _MoneroGetTxKeyAck_default_instance_;
class MoneroLiveRefreshStartRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MoneroLiveRefreshStartRequest> _instance;
} _MoneroLiveRefreshStartRequest_default_instance_;
class MoneroLiveRefreshStartAckDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MoneroLiveRefreshStartAck> _instance;
} _MoneroLiveRefreshStartAck_default_instance_;
class MoneroLiveRefreshStepRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MoneroLiveRefreshStepRequest> _instance;
} _MoneroLiveRefreshStepRequest_default_instance_;
class MoneroLiveRefreshStepAckDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MoneroLiveRefreshStepAck> _instance;
} _MoneroLiveRefreshStepAck_default_instance_;
class MoneroLiveRefreshFinalRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MoneroLiveRefreshFinalRequest> _instance;
} _MoneroLiveRefreshFinalRequest_default_instance_;
class MoneroLiveRefreshFinalAckDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MoneroLiveRefreshFinalAck> _instance;
} _MoneroLiveRefreshFinalAck_default_instance_;
class DebugMoneroDiagRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DebugMoneroDiagRequest> _instance;
} _DebugMoneroDiagRequest_default_instance_;
class DebugMoneroDiagAckDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DebugMoneroDiagAck> _instance;
} _DebugMoneroDiagAck_default_instance_;
}  // namespace monero
}  // namespace messages
}  // namespace trezor
}  // namespace hw
static void InitDefaultsscc_info_DebugMoneroDiagAck_messages_2dmonero_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hw::trezor::messages::monero::_DebugMoneroDiagAck_default_instance_;
    new (ptr) ::hw::trezor::messages::monero::DebugMoneroDiagAck();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hw::trezor::messages::monero::DebugMoneroDiagAck::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DebugMoneroDiagAck_messages_2dmonero_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DebugMoneroDiagAck_messages_2dmonero_2eproto}, {}};

static void InitDefaultsscc_info_DebugMoneroDiagRequest_messages_2dmonero_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hw::trezor::messages::monero::_DebugMoneroDiagRequest_default_instance_;
    new (ptr) ::hw::trezor::messages::monero::DebugMoneroDiagRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hw::trezor::messages::monero::DebugMoneroDiagRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DebugMoneroDiagRequest_messages_2dmonero_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DebugMoneroDiagRequest_messages_2dmonero_2eproto}, {}};

static void InitDefaultsscc_info_MoneroAddress_messages_2dmonero_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hw::trezor::messages::monero::_MoneroAddress_default_instance_;
    new (ptr) ::hw::trezor::messages::monero::MoneroAddress();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hw::trezor::messages::monero::MoneroAddress::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MoneroAddress_messages_2dmonero_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MoneroAddress_messages_2dmonero_2eproto}, {}};

static void InitDefaultsscc_info_MoneroGetAddress_messages_2dmonero_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hw::trezor::messages::monero::_MoneroGetAddress_default_instance_;
    new (ptr) ::hw::trezor::messages::monero::MoneroGetAddress();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hw::trezor::messages::monero::MoneroGetAddress::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MoneroGetAddress_messages_2dmonero_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MoneroGetAddress_messages_2dmonero_2eproto}, {}};

static void InitDefaultsscc_info_MoneroGetTxKeyAck_messages_2dmonero_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hw::trezor::messages::monero::_MoneroGetTxKeyAck_default_instance_;
    new (ptr) ::hw::trezor::messages::monero::MoneroGetTxKeyAck();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hw::trezor::messages::monero::MoneroGetTxKeyAck::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MoneroGetTxKeyAck_messages_2dmonero_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MoneroGetTxKeyAck_messages_2dmonero_2eproto}, {}};

static void InitDefaultsscc_info_MoneroGetTxKeyRequest_messages_2dmonero_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hw::trezor::messages::monero::_MoneroGetTxKeyRequest_default_instance_;
    new (ptr) ::hw::trezor::messages::monero::MoneroGetTxKeyRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hw::trezor::messages::monero::MoneroGetTxKeyRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MoneroGetTxKeyRequest_messages_2dmonero_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MoneroGetTxKeyRequest_messages_2dmonero_2eproto}, {}};

static void InitDefaultsscc_info_MoneroGetWatchKey_messages_2dmonero_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hw::trezor::messages::monero::_MoneroGetWatchKey_default_instance_;
    new (ptr) ::hw::trezor::messages::monero::MoneroGetWatchKey();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hw::trezor::messages::monero::MoneroGetWatchKey::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MoneroGetWatchKey_messages_2dmonero_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MoneroGetWatchKey_messages_2dmonero_2eproto}, {}};

static void InitDefaultsscc_info_MoneroKeyImageExportInitAck_messages_2dmonero_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hw::trezor::messages::monero::_MoneroKeyImageExportInitAck_default_instance_;
    new (ptr) ::hw::trezor::messages::monero::MoneroKeyImageExportInitAck();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hw::trezor::messages::monero::MoneroKeyImageExportInitAck::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MoneroKeyImageExportInitAck_messages_2dmonero_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MoneroKeyImageExportInitAck_messages_2dmonero_2eproto}, {}};

static void InitDefaultsscc_info_MoneroKeyImageExportInitRequest_messages_2dmonero_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hw::trezor::messages::monero::_MoneroKeyImageExportInitRequest_default_instance_;
    new (ptr) ::hw::trezor::messages::monero::MoneroKeyImageExportInitRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hw::trezor::messages::monero::MoneroKeyImageExportInitRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MoneroKeyImageExportInitRequest_messages_2dmonero_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_MoneroKeyImageExportInitRequest_messages_2dmonero_2eproto}, {
      &scc_info_MoneroKeyImageExportInitRequest_MoneroSubAddressIndicesList_messages_2dmonero_2eproto.base,}};

static void InitDefaultsscc_info_MoneroKeyImageExportInitRequest_MoneroSubAddressIndicesList_messages_2dmonero_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hw::trezor::messages::monero::_MoneroKeyImageExportInitRequest_MoneroSubAddressIndicesList_default_instance_;
    new (ptr) ::hw::trezor::messages::monero::MoneroKeyImageExportInitRequest_MoneroSubAddressIndicesList();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hw::trezor::messages::monero::MoneroKeyImageExportInitRequest_MoneroSubAddressIndicesList::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MoneroKeyImageExportInitRequest_MoneroSubAddressIndicesList_messages_2dmonero_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MoneroKeyImageExportInitRequest_MoneroSubAddressIndicesList_messages_2dmonero_2eproto}, {}};

static void InitDefaultsscc_info_MoneroKeyImageSyncFinalAck_messages_2dmonero_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hw::trezor::messages::monero::_MoneroKeyImageSyncFinalAck_default_instance_;
    new (ptr) ::hw::trezor::messages::monero::MoneroKeyImageSyncFinalAck();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hw::trezor::messages::monero::MoneroKeyImageSyncFinalAck::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MoneroKeyImageSyncFinalAck_messages_2dmonero_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MoneroKeyImageSyncFinalAck_messages_2dmonero_2eproto}, {}};

static void InitDefaultsscc_info_MoneroKeyImageSyncFinalRequest_messages_2dmonero_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hw::trezor::messages::monero::_MoneroKeyImageSyncFinalRequest_default_instance_;
    new (ptr) ::hw::trezor::messages::monero::MoneroKeyImageSyncFinalRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hw::trezor::messages::monero::MoneroKeyImageSyncFinalRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MoneroKeyImageSyncFinalRequest_messages_2dmonero_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MoneroKeyImageSyncFinalRequest_messages_2dmonero_2eproto}, {}};

static void InitDefaultsscc_info_MoneroKeyImageSyncStepAck_messages_2dmonero_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hw::trezor::messages::monero::_MoneroKeyImageSyncStepAck_default_instance_;
    new (ptr) ::hw::trezor::messages::monero::MoneroKeyImageSyncStepAck();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hw::trezor::messages::monero::MoneroKeyImageSyncStepAck::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MoneroKeyImageSyncStepAck_messages_2dmonero_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_MoneroKeyImageSyncStepAck_messages_2dmonero_2eproto}, {
      &scc_info_MoneroKeyImageSyncStepAck_MoneroExportedKeyImage_messages_2dmonero_2eproto.base,}};

static void InitDefaultsscc_info_MoneroKeyImageSyncStepAck_MoneroExportedKeyImage_messages_2dmonero_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hw::trezor::messages::monero::_MoneroKeyImageSyncStepAck_MoneroExportedKeyImage_default_instance_;
    new (ptr) ::hw::trezor::messages::monero::MoneroKeyImageSyncStepAck_MoneroExportedKeyImage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hw::trezor::messages::monero::MoneroKeyImageSyncStepAck_MoneroExportedKeyImage::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MoneroKeyImageSyncStepAck_MoneroExportedKeyImage_messages_2dmonero_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MoneroKeyImageSyncStepAck_MoneroExportedKeyImage_messages_2dmonero_2eproto}, {}};

static void InitDefaultsscc_info_MoneroKeyImageSyncStepRequest_messages_2dmonero_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hw::trezor::messages::monero::_MoneroKeyImageSyncStepRequest_default_instance_;
    new (ptr) ::hw::trezor::messages::monero::MoneroKeyImageSyncStepRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hw::trezor::messages::monero::MoneroKeyImageSyncStepRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MoneroKeyImageSyncStepRequest_messages_2dmonero_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_MoneroKeyImageSyncStepRequest_messages_2dmonero_2eproto}, {
      &scc_info_MoneroKeyImageSyncStepRequest_MoneroTransferDetails_messages_2dmonero_2eproto.base,}};

static void InitDefaultsscc_info_MoneroKeyImageSyncStepRequest_MoneroTransferDetails_messages_2dmonero_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hw::trezor::messages::monero::_MoneroKeyImageSyncStepRequest_MoneroTransferDetails_default_instance_;
    new (ptr) ::hw::trezor::messages::monero::MoneroKeyImageSyncStepRequest_MoneroTransferDetails();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hw::trezor::messages::monero::MoneroKeyImageSyncStepRequest_MoneroTransferDetails::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MoneroKeyImageSyncStepRequest_MoneroTransferDetails_messages_2dmonero_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MoneroKeyImageSyncStepRequest_MoneroTransferDetails_messages_2dmonero_2eproto}, {}};

static void InitDefaultsscc_info_MoneroLiveRefreshFinalAck_messages_2dmonero_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hw::trezor::messages::monero::_MoneroLiveRefreshFinalAck_default_instance_;
    new (ptr) ::hw::trezor::messages::monero::MoneroLiveRefreshFinalAck();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hw::trezor::messages::monero::MoneroLiveRefreshFinalAck::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MoneroLiveRefreshFinalAck_messages_2dmonero_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MoneroLiveRefreshFinalAck_messages_2dmonero_2eproto}, {}};

static void InitDefaultsscc_info_MoneroLiveRefreshFinalRequest_messages_2dmonero_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hw::trezor::messages::monero::_MoneroLiveRefreshFinalRequest_default_instance_;
    new (ptr) ::hw::trezor::messages::monero::MoneroLiveRefreshFinalRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hw::trezor::messages::monero::MoneroLiveRefreshFinalRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MoneroLiveRefreshFinalRequest_messages_2dmonero_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MoneroLiveRefreshFinalRequest_messages_2dmonero_2eproto}, {}};

static void InitDefaultsscc_info_MoneroLiveRefreshStartAck_messages_2dmonero_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hw::trezor::messages::monero::_MoneroLiveRefreshStartAck_default_instance_;
    new (ptr) ::hw::trezor::messages::monero::MoneroLiveRefreshStartAck();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hw::trezor::messages::monero::MoneroLiveRefreshStartAck::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MoneroLiveRefreshStartAck_messages_2dmonero_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MoneroLiveRefreshStartAck_messages_2dmonero_2eproto}, {}};

static void InitDefaultsscc_info_MoneroLiveRefreshStartRequest_messages_2dmonero_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hw::trezor::messages::monero::_MoneroLiveRefreshStartRequest_default_instance_;
    new (ptr) ::hw::trezor::messages::monero::MoneroLiveRefreshStartRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hw::trezor::messages::monero::MoneroLiveRefreshStartRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MoneroLiveRefreshStartRequest_messages_2dmonero_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MoneroLiveRefreshStartRequest_messages_2dmonero_2eproto}, {}};

static void InitDefaultsscc_info_MoneroLiveRefreshStepAck_messages_2dmonero_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hw::trezor::messages::monero::_MoneroLiveRefreshStepAck_default_instance_;
    new (ptr) ::hw::trezor::messages::monero::MoneroLiveRefreshStepAck();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hw::trezor::messages::monero::MoneroLiveRefreshStepAck::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MoneroLiveRefreshStepAck_messages_2dmonero_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MoneroLiveRefreshStepAck_messages_2dmonero_2eproto}, {}};

static void InitDefaultsscc_info_MoneroLiveRefreshStepRequest_messages_2dmonero_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hw::trezor::messages::monero::_MoneroLiveRefreshStepRequest_default_instance_;
    new (ptr) ::hw::trezor::messages::monero::MoneroLiveRefreshStepRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hw::trezor::messages::monero::MoneroLiveRefreshStepRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MoneroLiveRefreshStepRequest_messages_2dmonero_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MoneroLiveRefreshStepRequest_messages_2dmonero_2eproto}, {}};

static void InitDefaultsscc_info_MoneroTransactionAllInputsSetAck_messages_2dmonero_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hw::trezor::messages::monero::_MoneroTransactionAllInputsSetAck_default_instance_;
    new (ptr) ::hw::trezor::messages::monero::MoneroTransactionAllInputsSetAck();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hw::trezor::messages::monero::MoneroTransactionAllInputsSetAck::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MoneroTransactionAllInputsSetAck_messages_2dmonero_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_MoneroTransactionAllInputsSetAck_messages_2dmonero_2eproto}, {
      &scc_info_MoneroTransactionRsigData_messages_2dmonero_2eproto.base,}};

static void InitDefaultsscc_info_MoneroTransactionAllInputsSetRequest_messages_2dmonero_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hw::trezor::messages::monero::_MoneroTransactionAllInputsSetRequest_default_instance_;
    new (ptr) ::hw::trezor::messages::monero::MoneroTransactionAllInputsSetRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hw::trezor::messages::monero::MoneroTransactionAllInputsSetRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MoneroTransactionAllInputsSetRequest_messages_2dmonero_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MoneroTransactionAllInputsSetRequest_messages_2dmonero_2eproto}, {}};

static void InitDefaultsscc_info_MoneroTransactionAllOutSetAck_messages_2dmonero_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hw::trezor::messages::monero::_MoneroTransactionAllOutSetAck_default_instance_;
    new (ptr) ::hw::trezor::messages::monero::MoneroTransactionAllOutSetAck();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hw::trezor::messages::monero::MoneroTransactionAllOutSetAck::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MoneroTransactionAllOutSetAck_messages_2dmonero_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_MoneroTransactionAllOutSetAck_messages_2dmonero_2eproto}, {
      &scc_info_MoneroTransactionAllOutSetAck_MoneroRingCtSig_messages_2dmonero_2eproto.base,}};

static void InitDefaultsscc_info_MoneroTransactionAllOutSetAck_MoneroRingCtSig_messages_2dmonero_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hw::trezor::messages::monero::_MoneroTransactionAllOutSetAck_MoneroRingCtSig_default_instance_;
    new (ptr) ::hw::trezor::messages::monero::MoneroTransactionAllOutSetAck_MoneroRingCtSig();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hw::trezor::messages::monero::MoneroTransactionAllOutSetAck_MoneroRingCtSig::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MoneroTransactionAllOutSetAck_MoneroRingCtSig_messages_2dmonero_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MoneroTransactionAllOutSetAck_MoneroRingCtSig_messages_2dmonero_2eproto}, {}};

static void InitDefaultsscc_info_MoneroTransactionAllOutSetRequest_messages_2dmonero_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hw::trezor::messages::monero::_MoneroTransactionAllOutSetRequest_default_instance_;
    new (ptr) ::hw::trezor::messages::monero::MoneroTransactionAllOutSetRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hw::trezor::messages::monero::MoneroTransactionAllOutSetRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MoneroTransactionAllOutSetRequest_messages_2dmonero_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_MoneroTransactionAllOutSetRequest_messages_2dmonero_2eproto}, {
      &scc_info_MoneroTransactionRsigData_messages_2dmonero_2eproto.base,}};

static void InitDefaultsscc_info_MoneroTransactionDestinationEntry_messages_2dmonero_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hw::trezor::messages::monero::_MoneroTransactionDestinationEntry_default_instance_;
    new (ptr) ::hw::trezor::messages::monero::MoneroTransactionDestinationEntry();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hw::trezor::messages::monero::MoneroTransactionDestinationEntry::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MoneroTransactionDestinationEntry_messages_2dmonero_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_MoneroTransactionDestinationEntry_messages_2dmonero_2eproto}, {
      &scc_info_MoneroTransactionDestinationEntry_MoneroAccountPublicAddress_messages_2dmonero_2eproto.base,}};

static void InitDefaultsscc_info_MoneroTransactionDestinationEntry_MoneroAccountPublicAddress_messages_2dmonero_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hw::trezor::messages::monero::_MoneroTransactionDestinationEntry_MoneroAccountPublicAddress_default_instance_;
    new (ptr) ::hw::trezor::messages::monero::MoneroTransactionDestinationEntry_MoneroAccountPublicAddress();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hw::trezor::messages::monero::MoneroTransactionDestinationEntry_MoneroAccountPublicAddress::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MoneroTransactionDestinationEntry_MoneroAccountPublicAddress_messages_2dmonero_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MoneroTransactionDestinationEntry_MoneroAccountPublicAddress_messages_2dmonero_2eproto}, {}};

static void InitDefaultsscc_info_MoneroTransactionFinalAck_messages_2dmonero_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hw::trezor::messages::monero::_MoneroTransactionFinalAck_default_instance_;
    new (ptr) ::hw::trezor::messages::monero::MoneroTransactionFinalAck();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hw::trezor::messages::monero::MoneroTransactionFinalAck::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MoneroTransactionFinalAck_messages_2dmonero_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MoneroTransactionFinalAck_messages_2dmonero_2eproto}, {}};

static void InitDefaultsscc_info_MoneroTransactionFinalRequest_messages_2dmonero_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hw::trezor::messages::monero::_MoneroTransactionFinalRequest_default_instance_;
    new (ptr) ::hw::trezor::messages::monero::MoneroTransactionFinalRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hw::trezor::messages::monero::MoneroTransactionFinalRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MoneroTransactionFinalRequest_messages_2dmonero_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MoneroTransactionFinalRequest_messages_2dmonero_2eproto}, {}};

static void InitDefaultsscc_info_MoneroTransactionInitAck_messages_2dmonero_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hw::trezor::messages::monero::_MoneroTransactionInitAck_default_instance_;
    new (ptr) ::hw::trezor::messages::monero::MoneroTransactionInitAck();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hw::trezor::messages::monero::MoneroTransactionInitAck::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MoneroTransactionInitAck_messages_2dmonero_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_MoneroTransactionInitAck_messages_2dmonero_2eproto}, {
      &scc_info_MoneroTransactionRsigData_messages_2dmonero_2eproto.base,}};

static void InitDefaultsscc_info_MoneroTransactionInitRequest_messages_2dmonero_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hw::trezor::messages::monero::_MoneroTransactionInitRequest_default_instance_;
    new (ptr) ::hw::trezor::messages::monero::MoneroTransactionInitRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hw::trezor::messages::monero::MoneroTransactionInitRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MoneroTransactionInitRequest_messages_2dmonero_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_MoneroTransactionInitRequest_messages_2dmonero_2eproto}, {
      &scc_info_MoneroTransactionInitRequest_MoneroTransactionData_messages_2dmonero_2eproto.base,}};

static void InitDefaultsscc_info_MoneroTransactionInitRequest_MoneroTransactionData_messages_2dmonero_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hw::trezor::messages::monero::_MoneroTransactionInitRequest_MoneroTransactionData_default_instance_;
    new (ptr) ::hw::trezor::messages::monero::MoneroTransactionInitRequest_MoneroTransactionData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hw::trezor::messages::monero::MoneroTransactionInitRequest_MoneroTransactionData::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_MoneroTransactionInitRequest_MoneroTransactionData_messages_2dmonero_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_MoneroTransactionInitRequest_MoneroTransactionData_messages_2dmonero_2eproto}, {
      &scc_info_MoneroTransactionDestinationEntry_messages_2dmonero_2eproto.base,
      &scc_info_MoneroTransactionRsigData_messages_2dmonero_2eproto.base,}};

static void InitDefaultsscc_info_MoneroTransactionInputViniAck_messages_2dmonero_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hw::trezor::messages::monero::_MoneroTransactionInputViniAck_default_instance_;
    new (ptr) ::hw::trezor::messages::monero::MoneroTransactionInputViniAck();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hw::trezor::messages::monero::MoneroTransactionInputViniAck::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MoneroTransactionInputViniAck_messages_2dmonero_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MoneroTransactionInputViniAck_messages_2dmonero_2eproto}, {}};

static void InitDefaultsscc_info_MoneroTransactionInputViniRequest_messages_2dmonero_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hw::trezor::messages::monero::_MoneroTransactionInputViniRequest_default_instance_;
    new (ptr) ::hw::trezor::messages::monero::MoneroTransactionInputViniRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hw::trezor::messages::monero::MoneroTransactionInputViniRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MoneroTransactionInputViniRequest_messages_2dmonero_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_MoneroTransactionInputViniRequest_messages_2dmonero_2eproto}, {
      &scc_info_MoneroTransactionSourceEntry_messages_2dmonero_2eproto.base,}};

static void InitDefaultsscc_info_MoneroTransactionInputsPermutationAck_messages_2dmonero_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hw::trezor::messages::monero::_MoneroTransactionInputsPermutationAck_default_instance_;
    new (ptr) ::hw::trezor::messages::monero::MoneroTransactionInputsPermutationAck();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hw::trezor::messages::monero::MoneroTransactionInputsPermutationAck::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MoneroTransactionInputsPermutationAck_messages_2dmonero_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MoneroTransactionInputsPermutationAck_messages_2dmonero_2eproto}, {}};

static void InitDefaultsscc_info_MoneroTransactionInputsPermutationRequest_messages_2dmonero_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hw::trezor::messages::monero::_MoneroTransactionInputsPermutationRequest_default_instance_;
    new (ptr) ::hw::trezor::messages::monero::MoneroTransactionInputsPermutationRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hw::trezor::messages::monero::MoneroTransactionInputsPermutationRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MoneroTransactionInputsPermutationRequest_messages_2dmonero_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MoneroTransactionInputsPermutationRequest_messages_2dmonero_2eproto}, {}};

static void InitDefaultsscc_info_MoneroTransactionRsigData_messages_2dmonero_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hw::trezor::messages::monero::_MoneroTransactionRsigData_default_instance_;
    new (ptr) ::hw::trezor::messages::monero::MoneroTransactionRsigData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hw::trezor::messages::monero::MoneroTransactionRsigData::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MoneroTransactionRsigData_messages_2dmonero_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MoneroTransactionRsigData_messages_2dmonero_2eproto}, {}};

static void InitDefaultsscc_info_MoneroTransactionSetInputAck_messages_2dmonero_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hw::trezor::messages::monero::_MoneroTransactionSetInputAck_default_instance_;
    new (ptr) ::hw::trezor::messages::monero::MoneroTransactionSetInputAck();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hw::trezor::messages::monero::MoneroTransactionSetInputAck::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MoneroTransactionSetInputAck_messages_2dmonero_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MoneroTransactionSetInputAck_messages_2dmonero_2eproto}, {}};

static void InitDefaultsscc_info_MoneroTransactionSetInputRequest_messages_2dmonero_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hw::trezor::messages::monero::_MoneroTransactionSetInputRequest_default_instance_;
    new (ptr) ::hw::trezor::messages::monero::MoneroTransactionSetInputRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hw::trezor::messages::monero::MoneroTransactionSetInputRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MoneroTransactionSetInputRequest_messages_2dmonero_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_MoneroTransactionSetInputRequest_messages_2dmonero_2eproto}, {
      &scc_info_MoneroTransactionSourceEntry_messages_2dmonero_2eproto.base,}};

static void InitDefaultsscc_info_MoneroTransactionSetOutputAck_messages_2dmonero_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hw::trezor::messages::monero::_MoneroTransactionSetOutputAck_default_instance_;
    new (ptr) ::hw::trezor::messages::monero::MoneroTransactionSetOutputAck();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hw::trezor::messages::monero::MoneroTransactionSetOutputAck::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MoneroTransactionSetOutputAck_messages_2dmonero_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_MoneroTransactionSetOutputAck_messages_2dmonero_2eproto}, {
      &scc_info_MoneroTransactionRsigData_messages_2dmonero_2eproto.base,}};

static void InitDefaultsscc_info_MoneroTransactionSetOutputRequest_messages_2dmonero_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hw::trezor::messages::monero::_MoneroTransactionSetOutputRequest_default_instance_;
    new (ptr) ::hw::trezor::messages::monero::MoneroTransactionSetOutputRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hw::trezor::messages::monero::MoneroTransactionSetOutputRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_MoneroTransactionSetOutputRequest_messages_2dmonero_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_MoneroTransactionSetOutputRequest_messages_2dmonero_2eproto}, {
      &scc_info_MoneroTransactionDestinationEntry_messages_2dmonero_2eproto.base,
      &scc_info_MoneroTransactionRsigData_messages_2dmonero_2eproto.base,}};

static void InitDefaultsscc_info_MoneroTransactionSignInputAck_messages_2dmonero_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hw::trezor::messages::monero::_MoneroTransactionSignInputAck_default_instance_;
    new (ptr) ::hw::trezor::messages::monero::MoneroTransactionSignInputAck();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hw::trezor::messages::monero::MoneroTransactionSignInputAck::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MoneroTransactionSignInputAck_messages_2dmonero_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MoneroTransactionSignInputAck_messages_2dmonero_2eproto}, {}};

static void InitDefaultsscc_info_MoneroTransactionSignInputRequest_messages_2dmonero_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hw::trezor::messages::monero::_MoneroTransactionSignInputRequest_default_instance_;
    new (ptr) ::hw::trezor::messages::monero::MoneroTransactionSignInputRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hw::trezor::messages::monero::MoneroTransactionSignInputRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MoneroTransactionSignInputRequest_messages_2dmonero_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_MoneroTransactionSignInputRequest_messages_2dmonero_2eproto}, {
      &scc_info_MoneroTransactionSourceEntry_messages_2dmonero_2eproto.base,}};

static void InitDefaultsscc_info_MoneroTransactionSourceEntry_messages_2dmonero_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hw::trezor::messages::monero::_MoneroTransactionSourceEntry_default_instance_;
    new (ptr) ::hw::trezor::messages::monero::MoneroTransactionSourceEntry();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hw::trezor::messages::monero::MoneroTransactionSourceEntry::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_MoneroTransactionSourceEntry_messages_2dmonero_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_MoneroTransactionSourceEntry_messages_2dmonero_2eproto}, {
      &scc_info_MoneroTransactionSourceEntry_MoneroOutputEntry_messages_2dmonero_2eproto.base,
      &scc_info_MoneroTransactionSourceEntry_MoneroMultisigKLRki_messages_2dmonero_2eproto.base,}};

static void InitDefaultsscc_info_MoneroTransactionSourceEntry_MoneroMultisigKLRki_messages_2dmonero_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hw::trezor::messages::monero::_MoneroTransactionSourceEntry_MoneroMultisigKLRki_default_instance_;
    new (ptr) ::hw::trezor::messages::monero::MoneroTransactionSourceEntry_MoneroMultisigKLRki();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hw::trezor::messages::monero::MoneroTransactionSourceEntry_MoneroMultisigKLRki::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MoneroTransactionSourceEntry_MoneroMultisigKLRki_messages_2dmonero_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MoneroTransactionSourceEntry_MoneroMultisigKLRki_messages_2dmonero_2eproto}, {}};

static void InitDefaultsscc_info_MoneroTransactionSourceEntry_MoneroOutputEntry_messages_2dmonero_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hw::trezor::messages::monero::_MoneroTransactionSourceEntry_MoneroOutputEntry_default_instance_;
    new (ptr) ::hw::trezor::messages::monero::MoneroTransactionSourceEntry_MoneroOutputEntry();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hw::trezor::messages::monero::MoneroTransactionSourceEntry_MoneroOutputEntry::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MoneroTransactionSourceEntry_MoneroOutputEntry_messages_2dmonero_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_MoneroTransactionSourceEntry_MoneroOutputEntry_messages_2dmonero_2eproto}, {
      &scc_info_MoneroTransactionSourceEntry_MoneroOutputEntry_MoneroRctKeyPublic_messages_2dmonero_2eproto.base,}};

static void InitDefaultsscc_info_MoneroTransactionSourceEntry_MoneroOutputEntry_MoneroRctKeyPublic_messages_2dmonero_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hw::trezor::messages::monero::_MoneroTransactionSourceEntry_MoneroOutputEntry_MoneroRctKeyPublic_default_instance_;
    new (ptr) ::hw::trezor::messages::monero::MoneroTransactionSourceEntry_MoneroOutputEntry_MoneroRctKeyPublic();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hw::trezor::messages::monero::MoneroTransactionSourceEntry_MoneroOutputEntry_MoneroRctKeyPublic::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MoneroTransactionSourceEntry_MoneroOutputEntry_MoneroRctKeyPublic_messages_2dmonero_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MoneroTransactionSourceEntry_MoneroOutputEntry_MoneroRctKeyPublic_messages_2dmonero_2eproto}, {}};

static void InitDefaultsscc_info_MoneroWatchKey_messages_2dmonero_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hw::trezor::messages::monero::_MoneroWatchKey_default_instance_;
    new (ptr) ::hw::trezor::messages::monero::MoneroWatchKey();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hw::trezor::messages::monero::MoneroWatchKey::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MoneroWatchKey_messages_2dmonero_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MoneroWatchKey_messages_2dmonero_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_messages_2dmonero_2eproto[50];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_messages_2dmonero_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_messages_2dmonero_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_messages_2dmonero_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::monero::MoneroTransactionSourceEntry_MoneroOutputEntry_MoneroRctKeyPublic, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::monero::MoneroTransactionSourceEntry_MoneroOutputEntry_MoneroRctKeyPublic, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::monero::MoneroTransactionSourceEntry_MoneroOutputEntry_MoneroRctKeyPublic, dest_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::monero::MoneroTransactionSourceEntry_MoneroOutputEntry_MoneroRctKeyPublic, commitment_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::monero::MoneroTransactionSourceEntry_MoneroOutputEntry, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::monero::MoneroTransactionSourceEntry_MoneroOutputEntry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::monero::MoneroTransactionSourceEntry_MoneroOutputEntry, idx_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::monero::MoneroTransactionSourceEntry_MoneroOutputEntry, key_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::monero::MoneroTransactionSourceEntry_MoneroMultisigKLRki, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::monero::MoneroTransactionSourceEntry_MoneroMultisigKLRki, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::monero::MoneroTransactionSourceEntry_MoneroMultisigKLRki, k_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::monero::MoneroTransactionSourceEntry_MoneroMultisigKLRki, l_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::monero::MoneroTransactionSourceEntry_MoneroMultisigKLRki, r_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::monero::MoneroTransactionSourceEntry_MoneroMultisigKLRki, ki_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::monero::MoneroTransactionSourceEntry, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::monero::MoneroTransactionSourceEntry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::monero::MoneroTransactionSourceEntry, outputs_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::monero::MoneroTransactionSourceEntry, real_output_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::monero::MoneroTransactionSourceEntry, real_out_tx_key_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::monero::MoneroTransactionSourceEntry, real_out_additional_tx_keys_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::monero::MoneroTransactionSourceEntry, real_output_in_tx_index_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::monero::MoneroTransactionSourceEntry, amount_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::monero::MoneroTransactionSourceEntry, rct_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::monero::MoneroTransactionSourceEntry, mask_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::monero::MoneroTransactionSourceEntry, multisig_klrki_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::monero::MoneroTransactionSourceEntry, subaddr_minor_),
  ~0u,
  3,
  0,
  ~0u,
  4,
  5,
  6,
  1,
  2,
  7,
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::monero::MoneroTransactionDestinationEntry_MoneroAccountPublicAddress, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::monero::MoneroTransactionDestinationEntry_MoneroAccountPublicAddress, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::monero::MoneroTransactionDestinationEntry_MoneroAccountPublicAddress, spend_public_key_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::monero::MoneroTransactionDestinationEntry_MoneroAccountPublicAddress, view_public_key_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::monero::MoneroTransactionDestinationEntry, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::monero::MoneroTransactionDestinationEntry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::monero::MoneroTransactionDestinationEntry, amount_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::monero::MoneroTransactionDestinationEntry, addr_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::monero::MoneroTransactionDestinationEntry, is_subaddress_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::monero::MoneroTransactionDestinationEntry, original_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::monero::MoneroTransactionDestinationEntry, is_integrated_),
  2,
  1,
  3,
  0,
  4,
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::monero::MoneroTransactionRsigData, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::monero::MoneroTransactionRsigData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::monero::MoneroTransactionRsigData, rsig_type_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::monero::MoneroTransactionRsigData, offload_type_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::monero::MoneroTransactionRsigData, grouping_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::monero::MoneroTransactionRsigData, mask_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::monero::MoneroTransactionRsigData, rsig_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::monero::MoneroTransactionRsigData, rsig_parts_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::monero::MoneroTransactionRsigData, bp_version_),
  2,
  3,
  ~0u,
  0,
  1,
  ~0u,
  4,
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::monero::MoneroGetAddress, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::monero::MoneroGetAddress, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::monero::MoneroGetAddress, address_n_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::monero::MoneroGetAddress, show_display_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::monero::MoneroGetAddress, network_type_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::monero::MoneroGetAddress, account_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::monero::MoneroGetAddress, minor_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::monero::MoneroGetAddress, payment_id_),
  ~0u,
  1,
  2,
  3,
  4,
  0,
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::monero::MoneroAddress, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::monero::MoneroAddress, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::monero::MoneroAddress, address_),
  0,
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::monero::MoneroGetWatchKey, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::monero::MoneroGetWatchKey, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::monero::MoneroGetWatchKey, address_n_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::monero::MoneroGetWatchKey, network_type_),
  ~0u,
  0,
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::monero::MoneroWatchKey, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::monero::MoneroWatchKey, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::monero::MoneroWatchKey, watch_key_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::monero::MoneroWatchKey, address_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::monero::MoneroTransactionInitRequest_MoneroTransactionData, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::monero::MoneroTransactionInitRequest_MoneroTransactionData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::monero::MoneroTransactionInitRequest_MoneroTransactionData, version_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::monero::MoneroTransactionInitRequest_MoneroTransactionData, payment_id_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::monero::MoneroTransactionInitRequest_MoneroTransactionData, unlock_time_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::monero::MoneroTransactionInitRequest_MoneroTransactionData, outputs_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::monero::MoneroTransactionInitRequest_MoneroTransactionData, change_dts_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::monero::MoneroTransactionInitRequest_MoneroTransactionData, num_inputs_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::monero::MoneroTransactionInitRequest_MoneroTransactionData, mixin_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::monero::MoneroTransactionInitRequest_MoneroTransactionData, fee_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::monero::MoneroTransactionInitRequest_MoneroTransactionData, account_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::monero::MoneroTransactionInitRequest_MoneroTransactionData, minor_indices_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::monero::MoneroTransactionInitRequest_MoneroTransactionData, rsig_data_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::monero::MoneroTransactionInitRequest_MoneroTransactionData, integrated_indices_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::monero::MoneroTransactionInitRequest_MoneroTransactionData, client_version_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::monero::MoneroTransactionInitRequest_MoneroTransactionData, hard_fork_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::monero::MoneroTransactionInitRequest_MoneroTransactionData, monero_version_),
  5,
  0,
  4,
  ~0u,
  2,
  6,
  8,
  7,
  9,
  ~0u,
  3,
  ~0u,
  10,
  11,
  1,
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::monero::MoneroTransactionInitRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::monero::MoneroTransactionInitRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::monero::MoneroTransactionInitRequest, version_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::monero::MoneroTransactionInitRequest, address_n_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::monero::MoneroTransactionInitRequest, network_type_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::monero::MoneroTransactionInitRequest, tsx_data_),
  1,
  ~0u,
  2,
  0,
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::monero::MoneroTransactionInitAck, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::monero::MoneroTransactionInitAck, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::monero::MoneroTransactionInitAck, hmacs_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::monero::MoneroTransactionInitAck, rsig_data_),
  ~0u,
  0,
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::monero::MoneroTransactionSetInputRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::monero::MoneroTransactionSetInputRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::monero::MoneroTransactionSetInputRequest, src_entr_),
  0,
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::monero::MoneroTransactionSetInputAck, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::monero::MoneroTransactionSetInputAck, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::monero::MoneroTransactionSetInputAck, vini_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::monero::MoneroTransactionSetInputAck, vini_hmac_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::monero::MoneroTransactionSetInputAck, pseudo_out_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::monero::MoneroTransactionSetInputAck, pseudo_out_hmac_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::monero::MoneroTransactionSetInputAck, pseudo_out_alpha_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::monero::MoneroTransactionSetInputAck, spend_key_),
  0,
  1,
  2,
  3,
  4,
  5,
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::monero::MoneroTransactionInputsPermutationRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::monero::MoneroTransactionInputsPermutationRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::monero::MoneroTransactionInputsPermutationRequest, perm_),
  ~0u,
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::monero::MoneroTransactionInputsPermutationAck, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::monero::MoneroTransactionInputsPermutationAck, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::monero::MoneroTransactionInputViniRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::monero::MoneroTransactionInputViniRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::monero::MoneroTransactionInputViniRequest, src_entr_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::monero::MoneroTransactionInputViniRequest, vini_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::monero::MoneroTransactionInputViniRequest, vini_hmac_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::monero::MoneroTransactionInputViniRequest, pseudo_out_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::monero::MoneroTransactionInputViniRequest, pseudo_out_hmac_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::monero::MoneroTransactionInputViniRequest, orig_idx_),
  4,
  0,
  1,
  2,
  3,
  5,
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::monero::MoneroTransactionInputViniAck, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::monero::MoneroTransactionInputViniAck, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::monero::MoneroTransactionAllInputsSetRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::monero::MoneroTransactionAllInputsSetRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::monero::MoneroTransactionAllInputsSetAck, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::monero::MoneroTransactionAllInputsSetAck, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::monero::MoneroTransactionAllInputsSetAck, rsig_data_),
  0,
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::monero::MoneroTransactionSetOutputRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::monero::MoneroTransactionSetOutputRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::monero::MoneroTransactionSetOutputRequest, dst_entr_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::monero::MoneroTransactionSetOutputRequest, dst_entr_hmac_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::monero::MoneroTransactionSetOutputRequest, rsig_data_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::monero::MoneroTransactionSetOutputRequest, is_offloaded_bp_),
  1,
  0,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::monero::MoneroTransactionSetOutputAck, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::monero::MoneroTransactionSetOutputAck, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::monero::MoneroTransactionSetOutputAck, tx_out_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::monero::MoneroTransactionSetOutputAck, vouti_hmac_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::monero::MoneroTransactionSetOutputAck, rsig_data_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::monero::MoneroTransactionSetOutputAck, out_pk_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::monero::MoneroTransactionSetOutputAck, ecdh_info_),
  0,
  1,
  4,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::monero::MoneroTransactionAllOutSetRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::monero::MoneroTransactionAllOutSetRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::monero::MoneroTransactionAllOutSetRequest, rsig_data_),
  0,
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::monero::MoneroTransactionAllOutSetAck_MoneroRingCtSig, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::monero::MoneroTransactionAllOutSetAck_MoneroRingCtSig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::monero::MoneroTransactionAllOutSetAck_MoneroRingCtSig, txn_fee_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::monero::MoneroTransactionAllOutSetAck_MoneroRingCtSig, message_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::monero::MoneroTransactionAllOutSetAck_MoneroRingCtSig, rv_type_),
  1,
  0,
  2,
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::monero::MoneroTransactionAllOutSetAck, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::monero::MoneroTransactionAllOutSetAck, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::monero::MoneroTransactionAllOutSetAck, extra_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::monero::MoneroTransactionAllOutSetAck, tx_prefix_hash_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::monero::MoneroTransactionAllOutSetAck, rv_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::monero::MoneroTransactionAllOutSetAck, full_message_hash_),
  0,
  1,
  3,
  2,
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::monero::MoneroTransactionSignInputRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::monero::MoneroTransactionSignInputRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::monero::MoneroTransactionSignInputRequest, src_entr_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::monero::MoneroTransactionSignInputRequest, vini_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::monero::MoneroTransactionSignInputRequest, vini_hmac_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::monero::MoneroTransactionSignInputRequest, pseudo_out_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::monero::MoneroTransactionSignInputRequest, pseudo_out_hmac_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::monero::MoneroTransactionSignInputRequest, pseudo_out_alpha_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::monero::MoneroTransactionSignInputRequest, spend_key_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::monero::MoneroTransactionSignInputRequest, orig_idx_),
  6,
  0,
  1,
  2,
  3,
  4,
  5,
  7,
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::monero::MoneroTransactionSignInputAck, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::monero::MoneroTransactionSignInputAck, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::monero::MoneroTransactionSignInputAck, signature_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::monero::MoneroTransactionSignInputAck, pseudo_out_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::monero::MoneroTransactionFinalRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::monero::MoneroTransactionFinalRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::monero::MoneroTransactionFinalAck, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::monero::MoneroTransactionFinalAck, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::monero::MoneroTransactionFinalAck, cout_key_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::monero::MoneroTransactionFinalAck, salt_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::monero::MoneroTransactionFinalAck, rand_mult_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::monero::MoneroTransactionFinalAck, tx_enc_keys_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::monero::MoneroTransactionFinalAck, opening_key_),
  0,
  1,
  2,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::monero::MoneroKeyImageExportInitRequest_MoneroSubAddressIndicesList, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::monero::MoneroKeyImageExportInitRequest_MoneroSubAddressIndicesList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::monero::MoneroKeyImageExportInitRequest_MoneroSubAddressIndicesList, account_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::monero::MoneroKeyImageExportInitRequest_MoneroSubAddressIndicesList, minor_indices_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::monero::MoneroKeyImageExportInitRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::monero::MoneroKeyImageExportInitRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::monero::MoneroKeyImageExportInitRequest, num_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::monero::MoneroKeyImageExportInitRequest, hash_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::monero::MoneroKeyImageExportInitRequest, address_n_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::monero::MoneroKeyImageExportInitRequest, network_type_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::monero::MoneroKeyImageExportInitRequest, subs_),
  1,
  0,
  ~0u,
  2,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::monero::MoneroKeyImageExportInitAck, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::monero::MoneroKeyImageExportInitAck, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::monero::MoneroKeyImageSyncStepRequest_MoneroTransferDetails, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::monero::MoneroKeyImageSyncStepRequest_MoneroTransferDetails, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::monero::MoneroKeyImageSyncStepRequest_MoneroTransferDetails, out_key_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::monero::MoneroKeyImageSyncStepRequest_MoneroTransferDetails, tx_pub_key_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::monero::MoneroKeyImageSyncStepRequest_MoneroTransferDetails, additional_tx_pub_keys_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::monero::MoneroKeyImageSyncStepRequest_MoneroTransferDetails, internal_output_index_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::monero::MoneroKeyImageSyncStepRequest_MoneroTransferDetails, sub_addr_major_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::monero::MoneroKeyImageSyncStepRequest_MoneroTransferDetails, sub_addr_minor_),
  0,
  1,
  ~0u,
  2,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::monero::MoneroKeyImageSyncStepRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::monero::MoneroKeyImageSyncStepRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::monero::MoneroKeyImageSyncStepRequest, tdis_),
  ~0u,
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::monero::MoneroKeyImageSyncStepAck_MoneroExportedKeyImage, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::monero::MoneroKeyImageSyncStepAck_MoneroExportedKeyImage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::monero::MoneroKeyImageSyncStepAck_MoneroExportedKeyImage, iv_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::monero::MoneroKeyImageSyncStepAck_MoneroExportedKeyImage, blob_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::monero::MoneroKeyImageSyncStepAck, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::monero::MoneroKeyImageSyncStepAck, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::monero::MoneroKeyImageSyncStepAck, kis_),
  ~0u,
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::monero::MoneroKeyImageSyncFinalRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::monero::MoneroKeyImageSyncFinalRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::monero::MoneroKeyImageSyncFinalAck, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::monero::MoneroKeyImageSyncFinalAck, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::monero::MoneroKeyImageSyncFinalAck, enc_key_),
  0,
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::monero::MoneroGetTxKeyRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::monero::MoneroGetTxKeyRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::monero::MoneroGetTxKeyRequest, address_n_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::monero::MoneroGetTxKeyRequest, network_type_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::monero::MoneroGetTxKeyRequest, salt1_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::monero::MoneroGetTxKeyRequest, salt2_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::monero::MoneroGetTxKeyRequest, tx_enc_keys_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::monero::MoneroGetTxKeyRequest, tx_prefix_hash_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::monero::MoneroGetTxKeyRequest, reason_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::monero::MoneroGetTxKeyRequest, view_public_key_),
  ~0u,
  5,
  0,
  1,
  2,
  3,
  6,
  4,
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::monero::MoneroGetTxKeyAck, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::monero::MoneroGetTxKeyAck, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::monero::MoneroGetTxKeyAck, salt_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::monero::MoneroGetTxKeyAck, tx_keys_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::monero::MoneroGetTxKeyAck, tx_derivations_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::monero::MoneroLiveRefreshStartRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::monero::MoneroLiveRefreshStartRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::monero::MoneroLiveRefreshStartRequest, address_n_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::monero::MoneroLiveRefreshStartRequest, network_type_),
  ~0u,
  0,
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::monero::MoneroLiveRefreshStartAck, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::monero::MoneroLiveRefreshStartAck, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::monero::MoneroLiveRefreshStepRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::monero::MoneroLiveRefreshStepRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::monero::MoneroLiveRefreshStepRequest, out_key_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::monero::MoneroLiveRefreshStepRequest, recv_deriv_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::monero::MoneroLiveRefreshStepRequest, real_out_idx_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::monero::MoneroLiveRefreshStepRequest, sub_addr_major_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::monero::MoneroLiveRefreshStepRequest, sub_addr_minor_),
  0,
  1,
  2,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::monero::MoneroLiveRefreshStepAck, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::monero::MoneroLiveRefreshStepAck, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::monero::MoneroLiveRefreshStepAck, salt_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::monero::MoneroLiveRefreshStepAck, key_image_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::monero::MoneroLiveRefreshFinalRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::monero::MoneroLiveRefreshFinalRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::monero::MoneroLiveRefreshFinalAck, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::monero::MoneroLiveRefreshFinalAck, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::monero::DebugMoneroDiagRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::monero::DebugMoneroDiagRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::monero::DebugMoneroDiagRequest, ins_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::monero::DebugMoneroDiagRequest, p1_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::monero::DebugMoneroDiagRequest, p2_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::monero::DebugMoneroDiagRequest, pd_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::monero::DebugMoneroDiagRequest, data1_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::monero::DebugMoneroDiagRequest, data2_),
  2,
  3,
  4,
  ~0u,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::monero::DebugMoneroDiagAck, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::monero::DebugMoneroDiagAck, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::monero::DebugMoneroDiagAck, ins_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::monero::DebugMoneroDiagAck, p1_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::monero::DebugMoneroDiagAck, p2_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::monero::DebugMoneroDiagAck, pd_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::monero::DebugMoneroDiagAck, data1_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::monero::DebugMoneroDiagAck, data2_),
  2,
  3,
  4,
  ~0u,
  0,
  1,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, sizeof(::hw::trezor::messages::monero::MoneroTransactionSourceEntry_MoneroOutputEntry_MoneroRctKeyPublic)},
  { 9, 16, sizeof(::hw::trezor::messages::monero::MoneroTransactionSourceEntry_MoneroOutputEntry)},
  { 18, 27, sizeof(::hw::trezor::messages::monero::MoneroTransactionSourceEntry_MoneroMultisigKLRki)},
  { 31, 46, sizeof(::hw::trezor::messages::monero::MoneroTransactionSourceEntry)},
  { 56, 63, sizeof(::hw::trezor::messages::monero::MoneroTransactionDestinationEntry_MoneroAccountPublicAddress)},
  { 65, 75, sizeof(::hw::trezor::messages::monero::MoneroTransactionDestinationEntry)},
  { 80, 92, sizeof(::hw::trezor::messages::monero::MoneroTransactionRsigData)},
  { 99, 110, sizeof(::hw::trezor::messages::monero::MoneroGetAddress)},
  { 116, 122, sizeof(::hw::trezor::messages::monero::MoneroAddress)},
  { 123, 130, sizeof(::hw::trezor::messages::monero::MoneroGetWatchKey)},
  { 132, 139, sizeof(::hw::trezor::messages::monero::MoneroWatchKey)},
  { 141, 161, sizeof(::hw::trezor::messages::monero::MoneroTransactionInitRequest_MoneroTransactionData)},
  { 176, 185, sizeof(::hw::trezor::messages::monero::MoneroTransactionInitRequest)},
  { 189, 196, sizeof(::hw::trezor::messages::monero::MoneroTransactionInitAck)},
  { 198, 204, sizeof(::hw::trezor::messages::monero::MoneroTransactionSetInputRequest)},
  { 205, 216, sizeof(::hw::trezor::messages::monero::MoneroTransactionSetInputAck)},
  { 222, 228, sizeof(::hw::trezor::messages::monero::MoneroTransactionInputsPermutationRequest)},
  { 229, 234, sizeof(::hw::trezor::messages::monero::MoneroTransactionInputsPermutationAck)},
  { 234, 245, sizeof(::hw::trezor::messages::monero::MoneroTransactionInputViniRequest)},
  { 251, 256, sizeof(::hw::trezor::messages::monero::MoneroTransactionInputViniAck)},
  { 256, 261, sizeof(::hw::trezor::messages::monero::MoneroTransactionAllInputsSetRequest)},
  { 261, 267, sizeof(::hw::trezor::messages::monero::MoneroTransactionAllInputsSetAck)},
  { 268, 277, sizeof(::hw::trezor::messages::monero::MoneroTransactionSetOutputRequest)},
  { 281, 291, sizeof(::hw::trezor::messages::monero::MoneroTransactionSetOutputAck)},
  { 296, 302, sizeof(::hw::trezor::messages::monero::MoneroTransactionAllOutSetRequest)},
  { 303, 311, sizeof(::hw::trezor::messages::monero::MoneroTransactionAllOutSetAck_MoneroRingCtSig)},
  { 314, 323, sizeof(::hw::trezor::messages::monero::MoneroTransactionAllOutSetAck)},
  { 327, 340, sizeof(::hw::trezor::messages::monero::MoneroTransactionSignInputRequest)},
  { 348, 355, sizeof(::hw::trezor::messages::monero::MoneroTransactionSignInputAck)},
  { 357, 362, sizeof(::hw::trezor::messages::monero::MoneroTransactionFinalRequest)},
  { 362, 372, sizeof(::hw::trezor::messages::monero::MoneroTransactionFinalAck)},
  { 377, 384, sizeof(::hw::trezor::messages::monero::MoneroKeyImageExportInitRequest_MoneroSubAddressIndicesList)},
  { 386, 396, sizeof(::hw::trezor::messages::monero::MoneroKeyImageExportInitRequest)},
  { 401, 406, sizeof(::hw::trezor::messages::monero::MoneroKeyImageExportInitAck)},
  { 406, 417, sizeof(::hw::trezor::messages::monero::MoneroKeyImageSyncStepRequest_MoneroTransferDetails)},
  { 423, 429, sizeof(::hw::trezor::messages::monero::MoneroKeyImageSyncStepRequest)},
  { 430, 437, sizeof(::hw::trezor::messages::monero::MoneroKeyImageSyncStepAck_MoneroExportedKeyImage)},
  { 439, 445, sizeof(::hw::trezor::messages::monero::MoneroKeyImageSyncStepAck)},
  { 446, 451, sizeof(::hw::trezor::messages::monero::MoneroKeyImageSyncFinalRequest)},
  { 451, 457, sizeof(::hw::trezor::messages::monero::MoneroKeyImageSyncFinalAck)},
  { 458, 471, sizeof(::hw::trezor::messages::monero::MoneroGetTxKeyRequest)},
  { 479, 487, sizeof(::hw::trezor::messages::monero::MoneroGetTxKeyAck)},
  { 490, 497, sizeof(::hw::trezor::messages::monero::MoneroLiveRefreshStartRequest)},
  { 499, 504, sizeof(::hw::trezor::messages::monero::MoneroLiveRefreshStartAck)},
  { 504, 514, sizeof(::hw::trezor::messages::monero::MoneroLiveRefreshStepRequest)},
  { 519, 526, sizeof(::hw::trezor::messages::monero::MoneroLiveRefreshStepAck)},
  { 528, 533, sizeof(::hw::trezor::messages::monero::MoneroLiveRefreshFinalRequest)},
  { 533, 538, sizeof(::hw::trezor::messages::monero::MoneroLiveRefreshFinalAck)},
  { 538, 549, sizeof(::hw::trezor::messages::monero::DebugMoneroDiagRequest)},
  { 555, 566, sizeof(::hw::trezor::messages::monero::DebugMoneroDiagAck)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hw::trezor::messages::monero::_MoneroTransactionSourceEntry_MoneroOutputEntry_MoneroRctKeyPublic_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hw::trezor::messages::monero::_MoneroTransactionSourceEntry_MoneroOutputEntry_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hw::trezor::messages::monero::_MoneroTransactionSourceEntry_MoneroMultisigKLRki_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hw::trezor::messages::monero::_MoneroTransactionSourceEntry_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hw::trezor::messages::monero::_MoneroTransactionDestinationEntry_MoneroAccountPublicAddress_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hw::trezor::messages::monero::_MoneroTransactionDestinationEntry_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hw::trezor::messages::monero::_MoneroTransactionRsigData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hw::trezor::messages::monero::_MoneroGetAddress_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hw::trezor::messages::monero::_MoneroAddress_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hw::trezor::messages::monero::_MoneroGetWatchKey_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hw::trezor::messages::monero::_MoneroWatchKey_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hw::trezor::messages::monero::_MoneroTransactionInitRequest_MoneroTransactionData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hw::trezor::messages::monero::_MoneroTransactionInitRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hw::trezor::messages::monero::_MoneroTransactionInitAck_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hw::trezor::messages::monero::_MoneroTransactionSetInputRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hw::trezor::messages::monero::_MoneroTransactionSetInputAck_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hw::trezor::messages::monero::_MoneroTransactionInputsPermutationRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hw::trezor::messages::monero::_MoneroTransactionInputsPermutationAck_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hw::trezor::messages::monero::_MoneroTransactionInputViniRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hw::trezor::messages::monero::_MoneroTransactionInputViniAck_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hw::trezor::messages::monero::_MoneroTransactionAllInputsSetRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hw::trezor::messages::monero::_MoneroTransactionAllInputsSetAck_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hw::trezor::messages::monero::_MoneroTransactionSetOutputRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hw::trezor::messages::monero::_MoneroTransactionSetOutputAck_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hw::trezor::messages::monero::_MoneroTransactionAllOutSetRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hw::trezor::messages::monero::_MoneroTransactionAllOutSetAck_MoneroRingCtSig_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hw::trezor::messages::monero::_MoneroTransactionAllOutSetAck_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hw::trezor::messages::monero::_MoneroTransactionSignInputRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hw::trezor::messages::monero::_MoneroTransactionSignInputAck_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hw::trezor::messages::monero::_MoneroTransactionFinalRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hw::trezor::messages::monero::_MoneroTransactionFinalAck_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hw::trezor::messages::monero::_MoneroKeyImageExportInitRequest_MoneroSubAddressIndicesList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hw::trezor::messages::monero::_MoneroKeyImageExportInitRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hw::trezor::messages::monero::_MoneroKeyImageExportInitAck_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hw::trezor::messages::monero::_MoneroKeyImageSyncStepRequest_MoneroTransferDetails_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hw::trezor::messages::monero::_MoneroKeyImageSyncStepRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hw::trezor::messages::monero::_MoneroKeyImageSyncStepAck_MoneroExportedKeyImage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hw::trezor::messages::monero::_MoneroKeyImageSyncStepAck_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hw::trezor::messages::monero::_MoneroKeyImageSyncFinalRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hw::trezor::messages::monero::_MoneroKeyImageSyncFinalAck_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hw::trezor::messages::monero::_MoneroGetTxKeyRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hw::trezor::messages::monero::_MoneroGetTxKeyAck_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hw::trezor::messages::monero::_MoneroLiveRefreshStartRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hw::trezor::messages::monero::_MoneroLiveRefreshStartAck_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hw::trezor::messages::monero::_MoneroLiveRefreshStepRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hw::trezor::messages::monero::_MoneroLiveRefreshStepAck_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hw::trezor::messages::monero::_MoneroLiveRefreshFinalRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hw::trezor::messages::monero::_MoneroLiveRefreshFinalAck_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hw::trezor::messages::monero::_DebugMoneroDiagRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hw::trezor::messages::monero::_DebugMoneroDiagAck_default_instance_),
};

const char descriptor_table_protodef_messages_2dmonero_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\025messages-monero.proto\022\031hw.trezor.messa"
  "ges.monero\"\237\005\n\034MoneroTransactionSourceEn"
  "try\022Z\n\007outputs\030\001 \003(\0132I.hw.trezor.message"
  "s.monero.MoneroTransactionSourceEntry.Mo"
  "neroOutputEntry\022\023\n\013real_output\030\002 \001(\004\022\027\n\017"
  "real_out_tx_key\030\003 \001(\014\022#\n\033real_out_additi"
  "onal_tx_keys\030\004 \003(\014\022\037\n\027real_output_in_tx_"
  "index\030\005 \001(\004\022\016\n\006amount\030\006 \001(\004\022\013\n\003rct\030\007 \001(\010"
  "\022\014\n\004mask\030\010 \001(\014\022c\n\016multisig_kLRki\030\t \001(\0132K"
  ".hw.trezor.messages.monero.MoneroTransac"
  "tionSourceEntry.MoneroMultisigKLRki\022\025\n\rs"
  "ubaddr_minor\030\n \001(\r\032\303\001\n\021MoneroOutputEntry"
  "\022\013\n\003idx\030\001 \001(\004\022i\n\003key\030\002 \001(\0132\\.hw.trezor.m"
  "essages.monero.MoneroTransactionSourceEn"
  "try.MoneroOutputEntry.MoneroRctKeyPublic"
  "\0326\n\022MoneroRctKeyPublic\022\014\n\004dest\030\001 \001(\014\022\022\n\n"
  "commitment\030\002 \001(\014\032B\n\023MoneroMultisigKLRki\022"
  "\t\n\001K\030\001 \001(\014\022\t\n\001L\030\002 \001(\014\022\t\n\001R\030\003 \001(\014\022\n\n\002ki\030\004"
  " \001(\014\"\253\002\n!MoneroTransactionDestinationEnt"
  "ry\022\016\n\006amount\030\001 \001(\004\022e\n\004addr\030\002 \001(\0132W.hw.tr"
  "ezor.messages.monero.MoneroTransactionDe"
  "stinationEntry.MoneroAccountPublicAddres"
  "s\022\025\n\ris_subaddress\030\003 \001(\010\022\020\n\010original\030\004 \001"
  "(\014\022\025\n\ris_integrated\030\005 \001(\010\032O\n\032MoneroAccou"
  "ntPublicAddress\022\030\n\020spend_public_key\030\001 \001("
  "\014\022\027\n\017view_public_key\030\002 \001(\014\"\232\001\n\031MoneroTra"
  "nsactionRsigData\022\021\n\trsig_type\030\001 \001(\r\022\024\n\014o"
  "ffload_type\030\002 \001(\r\022\020\n\010grouping\030\003 \003(\004\022\014\n\004m"
  "ask\030\004 \001(\014\022\014\n\004rsig\030\005 \001(\014\022\022\n\nrsig_parts\030\006 "
  "\003(\014\022\022\n\nbp_version\030\007 \001(\r\"\205\001\n\020MoneroGetAdd"
  "ress\022\021\n\taddress_n\030\001 \003(\r\022\024\n\014show_display\030"
  "\002 \001(\010\022\024\n\014network_type\030\003 \001(\r\022\017\n\007account\030\004"
  " \001(\r\022\r\n\005minor\030\005 \001(\r\022\022\n\npayment_id\030\006 \001(\014\""
  " \n\rMoneroAddress\022\017\n\007address\030\001 \001(\014\"<\n\021Mon"
  "eroGetWatchKey\022\021\n\taddress_n\030\001 \003(\r\022\024\n\014net"
  "work_type\030\002 \001(\r\"4\n\016MoneroWatchKey\022\021\n\twat"
  "ch_key\030\001 \001(\014\022\017\n\007address\030\002 \001(\014\"\256\005\n\034Monero"
  "TransactionInitRequest\022\017\n\007version\030\001 \001(\r\022"
  "\021\n\taddress_n\030\002 \003(\r\022\024\n\014network_type\030\003 \001(\r"
  "\022_\n\010tsx_data\030\004 \001(\0132M.hw.trezor.messages."
  "monero.MoneroTransactionInitRequest.Mone"
  "roTransactionData\032\362\003\n\025MoneroTransactionD"
  "ata\022\017\n\007version\030\001 \001(\r\022\022\n\npayment_id\030\002 \001(\014"
  "\022\023\n\013unlock_time\030\003 \001(\004\022M\n\007outputs\030\004 \003(\0132<"
  ".hw.trezor.messages.monero.MoneroTransac"
  "tionDestinationEntry\022P\n\nchange_dts\030\005 \001(\013"
  "2<.hw.trezor.messages.monero.MoneroTrans"
  "actionDestinationEntry\022\022\n\nnum_inputs\030\006 \001"
  "(\r\022\r\n\005mixin\030\007 \001(\r\022\013\n\003fee\030\010 \001(\004\022\017\n\007accoun"
  "t\030\t \001(\r\022\025\n\rminor_indices\030\n \003(\r\022G\n\trsig_d"
  "ata\030\013 \001(\01324.hw.trezor.messages.monero.Mo"
  "neroTransactionRsigData\022\032\n\022integrated_in"
  "dices\030\014 \003(\r\022\026\n\016client_version\030\r \001(\r\022\021\n\th"
  "ard_fork\030\016 \001(\r\022\026\n\016monero_version\030\017 \001(\014\"r"
  "\n\030MoneroTransactionInitAck\022\r\n\005hmacs\030\001 \003("
  "\014\022G\n\trsig_data\030\002 \001(\01324.hw.trezor.message"
  "s.monero.MoneroTransactionRsigData\"m\n Mo"
  "neroTransactionSetInputRequest\022I\n\010src_en"
  "tr\030\001 \001(\01327.hw.trezor.messages.monero.Mon"
  "eroTransactionSourceEntry\"\231\001\n\034MoneroTran"
  "sactionSetInputAck\022\014\n\004vini\030\001 \001(\014\022\021\n\tvini"
  "_hmac\030\002 \001(\014\022\022\n\npseudo_out\030\003 \001(\014\022\027\n\017pseud"
  "o_out_hmac\030\004 \001(\014\022\030\n\020pseudo_out_alpha\030\005 \001"
  "(\014\022\021\n\tspend_key\030\006 \001(\014\"9\n)MoneroTransacti"
  "onInputsPermutationRequest\022\014\n\004perm\030\001 \003(\r"
  "\"\'\n%MoneroTransactionInputsPermutationAc"
  "k\"\316\001\n!MoneroTransactionInputViniRequest\022"
  "I\n\010src_entr\030\001 \001(\01327.hw.trezor.messages.m"
  "onero.MoneroTransactionSourceEntry\022\014\n\004vi"
  "ni\030\002 \001(\014\022\021\n\tvini_hmac\030\003 \001(\014\022\022\n\npseudo_ou"
  "t\030\004 \001(\014\022\027\n\017pseudo_out_hmac\030\005 \001(\014\022\020\n\010orig"
  "_idx\030\006 \001(\r\"\037\n\035MoneroTransactionInputVini"
  "Ack\"&\n$MoneroTransactionAllInputsSetRequ"
  "est\"k\n MoneroTransactionAllInputsSetAck\022"
  "G\n\trsig_data\030\001 \001(\01324.hw.trezor.messages."
  "monero.MoneroTransactionRsigData\"\354\001\n!Mon"
  "eroTransactionSetOutputRequest\022N\n\010dst_en"
  "tr\030\001 \001(\0132<.hw.trezor.messages.monero.Mon"
  "eroTransactionDestinationEntry\022\025\n\rdst_en"
  "tr_hmac\030\002 \001(\014\022G\n\trsig_data\030\003 \001(\01324.hw.tr"
  "ezor.messages.monero.MoneroTransactionRs"
  "igData\022\027\n\017is_offloaded_bp\030\004 \001(\010\"\257\001\n\035Mone"
  "roTransactionSetOutputAck\022\016\n\006tx_out\030\001 \001("
  "\014\022\022\n\nvouti_hmac\030\002 \001(\014\022G\n\trsig_data\030\003 \001(\013"
  "24.hw.trezor.messages.monero.MoneroTrans"
  "actionRsigData\022\016\n\006out_pk\030\004 \001(\014\022\021\n\tecdh_i"
  "nfo\030\005 \001(\014\"l\n!MoneroTransactionAllOutSetR"
  "equest\022G\n\trsig_data\030\001 \001(\01324.hw.trezor.me"
  "ssages.monero.MoneroTransactionRsigData\""
  "\375\001\n\035MoneroTransactionAllOutSetAck\022\r\n\005ext"
  "ra\030\001 \001(\014\022\026\n\016tx_prefix_hash\030\002 \001(\014\022T\n\002rv\030\004"
  " \001(\0132H.hw.trezor.messages.monero.MoneroT"
  "ransactionAllOutSetAck.MoneroRingCtSig\022\031"
  "\n\021full_message_hash\030\005 \001(\014\032D\n\017MoneroRingC"
  "tSig\022\017\n\007txn_fee\030\001 \001(\004\022\017\n\007message\030\002 \001(\014\022\017"
  "\n\007rv_type\030\003 \001(\r\"\373\001\n!MoneroTransactionSig"
  "nInputRequest\022I\n\010src_entr\030\001 \001(\01327.hw.tre"
  "zor.messages.monero.MoneroTransactionSou"
  "rceEntry\022\014\n\004vini\030\002 \001(\014\022\021\n\tvini_hmac\030\003 \001("
  "\014\022\022\n\npseudo_out\030\004 \001(\014\022\027\n\017pseudo_out_hmac"
  "\030\005 \001(\014\022\030\n\020pseudo_out_alpha\030\006 \001(\014\022\021\n\tspen"
  "d_key\030\007 \001(\014\022\020\n\010orig_idx\030\010 \001(\r\"F\n\035MoneroT"
  "ransactionSignInputAck\022\021\n\tsignature\030\001 \001("
  "\014\022\022\n\npseudo_out\030\002 \001(\014\"\037\n\035MoneroTransacti"
  "onFinalRequest\"x\n\031MoneroTransactionFinal"
  "Ack\022\020\n\010cout_key\030\001 \001(\014\022\014\n\004salt\030\002 \001(\014\022\021\n\tr"
  "and_mult\030\003 \001(\014\022\023\n\013tx_enc_keys\030\004 \001(\014\022\023\n\013o"
  "pening_key\030\005 \001(\014\"\222\002\n\037MoneroKeyImageExpor"
  "tInitRequest\022\013\n\003num\030\001 \001(\004\022\014\n\004hash\030\002 \001(\014\022"
  "\021\n\taddress_n\030\003 \003(\r\022\024\n\014network_type\030\004 \001(\r"
  "\022d\n\004subs\030\005 \003(\0132V.hw.trezor.messages.mone"
  "ro.MoneroKeyImageExportInitRequest.Moner"
  "oSubAddressIndicesList\032E\n\033MoneroSubAddre"
  "ssIndicesList\022\017\n\007account\030\001 \001(\r\022\025\n\rminor_"
  "indices\030\002 \003(\r\"\035\n\033MoneroKeyImageExportIni"
  "tAck\"\253\002\n\035MoneroKeyImageSyncStepRequest\022\\"
  "\n\004tdis\030\001 \003(\0132N.hw.trezor.messages.monero"
  ".MoneroKeyImageSyncStepRequest.MoneroTra"
  "nsferDetails\032\253\001\n\025MoneroTransferDetails\022\017"
  "\n\007out_key\030\001 \001(\014\022\022\n\ntx_pub_key\030\002 \001(\014\022\036\n\026a"
  "dditional_tx_pub_keys\030\003 \003(\014\022\035\n\025internal_"
  "output_index\030\004 \001(\004\022\026\n\016sub_addr_major\030\005 \001"
  "(\r\022\026\n\016sub_addr_minor\030\006 \001(\r\"\251\001\n\031MoneroKey"
  "ImageSyncStepAck\022X\n\003kis\030\001 \003(\0132K.hw.trezo"
  "r.messages.monero.MoneroKeyImageSyncStep"
  "Ack.MoneroExportedKeyImage\0322\n\026MoneroExpo"
  "rtedKeyImage\022\n\n\002iv\030\001 \001(\014\022\014\n\004blob\030\003 \001(\014\" "
  "\n\036MoneroKeyImageSyncFinalRequest\"-\n\032Mone"
  "roKeyImageSyncFinalAck\022\017\n\007enc_key\030\001 \001(\014\""
  "\264\001\n\025MoneroGetTxKeyRequest\022\021\n\taddress_n\030\001"
  " \003(\r\022\024\n\014network_type\030\002 \001(\r\022\r\n\005salt1\030\003 \001("
  "\014\022\r\n\005salt2\030\004 \001(\014\022\023\n\013tx_enc_keys\030\005 \001(\014\022\026\n"
  "\016tx_prefix_hash\030\006 \001(\014\022\016\n\006reason\030\007 \001(\r\022\027\n"
  "\017view_public_key\030\010 \001(\014\"J\n\021MoneroGetTxKey"
  "Ack\022\014\n\004salt\030\001 \001(\014\022\017\n\007tx_keys\030\002 \001(\014\022\026\n\016tx"
  "_derivations\030\003 \001(\014\"H\n\035MoneroLiveRefreshS"
  "tartRequest\022\021\n\taddress_n\030\001 \003(\r\022\024\n\014networ"
  "k_type\030\002 \001(\r\"\033\n\031MoneroLiveRefreshStartAc"
  "k\"\211\001\n\034MoneroLiveRefreshStepRequest\022\017\n\007ou"
  "t_key\030\001 \001(\014\022\022\n\nrecv_deriv\030\002 \001(\014\022\024\n\014real_"
  "out_idx\030\003 \001(\004\022\026\n\016sub_addr_major\030\004 \001(\r\022\026\n"
  "\016sub_addr_minor\030\005 \001(\r\";\n\030MoneroLiveRefre"
  "shStepAck\022\014\n\004salt\030\001 \001(\014\022\021\n\tkey_image\030\002 \001"
  "(\014\"\037\n\035MoneroLiveRefreshFinalRequest\"\033\n\031M"
  "oneroLiveRefreshFinalAck\"g\n\026DebugMoneroD"
  "iagRequest\022\013\n\003ins\030\001 \001(\004\022\n\n\002p1\030\002 \001(\004\022\n\n\002p"
  "2\030\003 \001(\004\022\n\n\002pd\030\004 \003(\004\022\r\n\005data1\030\005 \001(\014\022\r\n\005da"
  "ta2\030\006 \001(\014\"c\n\022DebugMoneroDiagAck\022\013\n\003ins\030\001"
  " \001(\004\022\n\n\002p1\030\002 \001(\004\022\n\n\002p2\030\003 \001(\004\022\n\n\002pd\030\004 \003(\004"
  "\022\r\n\005data1\030\005 \001(\014\022\r\n\005data2\030\006 \001(\014B:\n#com.sa"
  "toshilabs.trezor.lib.protobufB\023TrezorMes"
  "sageMonero"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_messages_2dmonero_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_messages_2dmonero_2eproto_sccs[50] = {
  &scc_info_DebugMoneroDiagAck_messages_2dmonero_2eproto.base,
  &scc_info_DebugMoneroDiagRequest_messages_2dmonero_2eproto.base,
  &scc_info_MoneroAddress_messages_2dmonero_2eproto.base,
  &scc_info_MoneroGetAddress_messages_2dmonero_2eproto.base,
  &scc_info_MoneroGetTxKeyAck_messages_2dmonero_2eproto.base,
  &scc_info_MoneroGetTxKeyRequest_messages_2dmonero_2eproto.base,
  &scc_info_MoneroGetWatchKey_messages_2dmonero_2eproto.base,
  &scc_info_MoneroKeyImageExportInitAck_messages_2dmonero_2eproto.base,
  &scc_info_MoneroKeyImageExportInitRequest_messages_2dmonero_2eproto.base,
  &scc_info_MoneroKeyImageExportInitRequest_MoneroSubAddressIndicesList_messages_2dmonero_2eproto.base,
  &scc_info_MoneroKeyImageSyncFinalAck_messages_2dmonero_2eproto.base,
  &scc_info_MoneroKeyImageSyncFinalRequest_messages_2dmonero_2eproto.base,
  &scc_info_MoneroKeyImageSyncStepAck_messages_2dmonero_2eproto.base,
  &scc_info_MoneroKeyImageSyncStepAck_MoneroExportedKeyImage_messages_2dmonero_2eproto.base,
  &scc_info_MoneroKeyImageSyncStepRequest_messages_2dmonero_2eproto.base,
  &scc_info_MoneroKeyImageSyncStepRequest_MoneroTransferDetails_messages_2dmonero_2eproto.base,
  &scc_info_MoneroLiveRefreshFinalAck_messages_2dmonero_2eproto.base,
  &scc_info_MoneroLiveRefreshFinalRequest_messages_2dmonero_2eproto.base,
  &scc_info_MoneroLiveRefreshStartAck_messages_2dmonero_2eproto.base,
  &scc_info_MoneroLiveRefreshStartRequest_messages_2dmonero_2eproto.base,
  &scc_info_MoneroLiveRefreshStepAck_messages_2dmonero_2eproto.base,
  &scc_info_MoneroLiveRefreshStepRequest_messages_2dmonero_2eproto.base,
  &scc_info_MoneroTransactionAllInputsSetAck_messages_2dmonero_2eproto.base,
  &scc_info_MoneroTransactionAllInputsSetRequest_messages_2dmonero_2eproto.base,
  &scc_info_MoneroTransactionAllOutSetAck_messages_2dmonero_2eproto.base,
  &scc_info_MoneroTransactionAllOutSetAck_MoneroRingCtSig_messages_2dmonero_2eproto.base,
  &scc_info_MoneroTransactionAllOutSetRequest_messages_2dmonero_2eproto.base,
  &scc_info_MoneroTransactionDestinationEntry_messages_2dmonero_2eproto.base,
  &scc_info_MoneroTransactionDestinationEntry_MoneroAccountPublicAddress_messages_2dmonero_2eproto.base,
  &scc_info_MoneroTransactionFinalAck_messages_2dmonero_2eproto.base,
  &scc_info_MoneroTransactionFinalRequest_messages_2dmonero_2eproto.base,
  &scc_info_MoneroTransactionInitAck_messages_2dmonero_2eproto.base,
  &scc_info_MoneroTransactionInitRequest_messages_2dmonero_2eproto.base,
  &scc_info_MoneroTransactionInitRequest_MoneroTransactionData_messages_2dmonero_2eproto.base,
  &scc_info_MoneroTransactionInputViniAck_messages_2dmonero_2eproto.base,
  &scc_info_MoneroTransactionInputViniRequest_messages_2dmonero_2eproto.base,
  &scc_info_MoneroTransactionInputsPermutationAck_messages_2dmonero_2eproto.base,
  &scc_info_MoneroTransactionInputsPermutationRequest_messages_2dmonero_2eproto.base,
  &scc_info_MoneroTransactionRsigData_messages_2dmonero_2eproto.base,
  &scc_info_MoneroTransactionSetInputAck_messages_2dmonero_2eproto.base,
  &scc_info_MoneroTransactionSetInputRequest_messages_2dmonero_2eproto.base,
  &scc_info_MoneroTransactionSetOutputAck_messages_2dmonero_2eproto.base,
  &scc_info_MoneroTransactionSetOutputRequest_messages_2dmonero_2eproto.base,
  &scc_info_MoneroTransactionSignInputAck_messages_2dmonero_2eproto.base,
  &scc_info_MoneroTransactionSignInputRequest_messages_2dmonero_2eproto.base,
  &scc_info_MoneroTransactionSourceEntry_messages_2dmonero_2eproto.base,
  &scc_info_MoneroTransactionSourceEntry_MoneroMultisigKLRki_messages_2dmonero_2eproto.base,
  &scc_info_MoneroTransactionSourceEntry_MoneroOutputEntry_messages_2dmonero_2eproto.base,
  &scc_info_MoneroTransactionSourceEntry_MoneroOutputEntry_MoneroRctKeyPublic_messages_2dmonero_2eproto.base,
  &scc_info_MoneroWatchKey_messages_2dmonero_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_messages_2dmonero_2eproto_once;
static bool descriptor_table_messages_2dmonero_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_messages_2dmonero_2eproto = {
  &descriptor_table_messages_2dmonero_2eproto_initialized, descriptor_table_protodef_messages_2dmonero_2eproto, "messages-monero.proto", 6050,
  &descriptor_table_messages_2dmonero_2eproto_once, descriptor_table_messages_2dmonero_2eproto_sccs, descriptor_table_messages_2dmonero_2eproto_deps, 50, 0,
  schemas, file_default_instances, TableStruct_messages_2dmonero_2eproto::offsets,
  file_level_metadata_messages_2dmonero_2eproto, 50, file_level_enum_descriptors_messages_2dmonero_2eproto, file_level_service_descriptors_messages_2dmonero_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_messages_2dmonero_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_messages_2dmonero_2eproto), true);
namespace hw {
namespace trezor {
namespace messages {
namespace monero {

// ===================================================================

void MoneroTransactionSourceEntry_MoneroOutputEntry_MoneroRctKeyPublic::InitAsDefaultInstance() {
}
class MoneroTransactionSourceEntry_MoneroOutputEntry_MoneroRctKeyPublic::_Internal {
 public:
  using HasBits = decltype(std::declval<MoneroTransactionSourceEntry_MoneroOutputEntry_MoneroRctKeyPublic>()._has_bits_);
  static void set_has_dest(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_commitment(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

MoneroTransactionSourceEntry_MoneroOutputEntry_MoneroRctKeyPublic::MoneroTransactionSourceEntry_MoneroOutputEntry_MoneroRctKeyPublic()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hw.trezor.messages.monero.MoneroTransactionSourceEntry.MoneroOutputEntry.MoneroRctKeyPublic)
}
MoneroTransactionSourceEntry_MoneroOutputEntry_MoneroRctKeyPublic::MoneroTransactionSourceEntry_MoneroOutputEntry_MoneroRctKeyPublic(const MoneroTransactionSourceEntry_MoneroOutputEntry_MoneroRctKeyPublic& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  dest_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_dest()) {
    dest_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.dest_);
  }
  commitment_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_commitment()) {
    commitment_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.commitment_);
  }
  // @@protoc_insertion_point(copy_constructor:hw.trezor.messages.monero.MoneroTransactionSourceEntry.MoneroOutputEntry.MoneroRctKeyPublic)
}

void MoneroTransactionSourceEntry_MoneroOutputEntry_MoneroRctKeyPublic::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MoneroTransactionSourceEntry_MoneroOutputEntry_MoneroRctKeyPublic_messages_2dmonero_2eproto.base);
  dest_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  commitment_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

MoneroTransactionSourceEntry_MoneroOutputEntry_MoneroRctKeyPublic::~MoneroTransactionSourceEntry_MoneroOutputEntry_MoneroRctKeyPublic() {
  // @@protoc_insertion_point(destructor:hw.trezor.messages.monero.MoneroTransactionSourceEntry.MoneroOutputEntry.MoneroRctKeyPublic)
  SharedDtor();
}

void MoneroTransactionSourceEntry_MoneroOutputEntry_MoneroRctKeyPublic::SharedDtor() {
  dest_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  commitment_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MoneroTransactionSourceEntry_MoneroOutputEntry_MoneroRctKeyPublic::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MoneroTransactionSourceEntry_MoneroOutputEntry_MoneroRctKeyPublic& MoneroTransactionSourceEntry_MoneroOutputEntry_MoneroRctKeyPublic::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MoneroTransactionSourceEntry_MoneroOutputEntry_MoneroRctKeyPublic_messages_2dmonero_2eproto.base);
  return *internal_default_instance();
}


void MoneroTransactionSourceEntry_MoneroOutputEntry_MoneroRctKeyPublic::Clear() {
// @@protoc_insertion_point(message_clear_start:hw.trezor.messages.monero.MoneroTransactionSourceEntry.MoneroOutputEntry.MoneroRctKeyPublic)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      dest_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      commitment_.ClearNonDefaultToEmptyNoArena();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MoneroTransactionSourceEntry_MoneroOutputEntry_MoneroRctKeyPublic::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bytes dest = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_dest();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes commitment = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_commitment();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MoneroTransactionSourceEntry_MoneroOutputEntry_MoneroRctKeyPublic::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hw.trezor.messages.monero.MoneroTransactionSourceEntry.MoneroOutputEntry.MoneroRctKeyPublic)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes dest = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_dest(), target);
  }

  // optional bytes commitment = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_commitment(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hw.trezor.messages.monero.MoneroTransactionSourceEntry.MoneroOutputEntry.MoneroRctKeyPublic)
  return target;
}

size_t MoneroTransactionSourceEntry_MoneroOutputEntry_MoneroRctKeyPublic::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hw.trezor.messages.monero.MoneroTransactionSourceEntry.MoneroOutputEntry.MoneroRctKeyPublic)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional bytes dest = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_dest());
    }

    // optional bytes commitment = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_commitment());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MoneroTransactionSourceEntry_MoneroOutputEntry_MoneroRctKeyPublic::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hw.trezor.messages.monero.MoneroTransactionSourceEntry.MoneroOutputEntry.MoneroRctKeyPublic)
  GOOGLE_DCHECK_NE(&from, this);
  const MoneroTransactionSourceEntry_MoneroOutputEntry_MoneroRctKeyPublic* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MoneroTransactionSourceEntry_MoneroOutputEntry_MoneroRctKeyPublic>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hw.trezor.messages.monero.MoneroTransactionSourceEntry.MoneroOutputEntry.MoneroRctKeyPublic)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hw.trezor.messages.monero.MoneroTransactionSourceEntry.MoneroOutputEntry.MoneroRctKeyPublic)
    MergeFrom(*source);
  }
}

void MoneroTransactionSourceEntry_MoneroOutputEntry_MoneroRctKeyPublic::MergeFrom(const MoneroTransactionSourceEntry_MoneroOutputEntry_MoneroRctKeyPublic& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hw.trezor.messages.monero.MoneroTransactionSourceEntry.MoneroOutputEntry.MoneroRctKeyPublic)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      dest_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.dest_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      commitment_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.commitment_);
    }
  }
}

void MoneroTransactionSourceEntry_MoneroOutputEntry_MoneroRctKeyPublic::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hw.trezor.messages.monero.MoneroTransactionSourceEntry.MoneroOutputEntry.MoneroRctKeyPublic)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MoneroTransactionSourceEntry_MoneroOutputEntry_MoneroRctKeyPublic::CopyFrom(const MoneroTransactionSourceEntry_MoneroOutputEntry_MoneroRctKeyPublic& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hw.trezor.messages.monero.MoneroTransactionSourceEntry.MoneroOutputEntry.MoneroRctKeyPublic)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MoneroTransactionSourceEntry_MoneroOutputEntry_MoneroRctKeyPublic::IsInitialized() const {
  return true;
}

void MoneroTransactionSourceEntry_MoneroOutputEntry_MoneroRctKeyPublic::InternalSwap(MoneroTransactionSourceEntry_MoneroOutputEntry_MoneroRctKeyPublic* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  dest_.Swap(&other->dest_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  commitment_.Swap(&other->commitment_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata MoneroTransactionSourceEntry_MoneroOutputEntry_MoneroRctKeyPublic::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MoneroTransactionSourceEntry_MoneroOutputEntry::InitAsDefaultInstance() {
  ::hw::trezor::messages::monero::_MoneroTransactionSourceEntry_MoneroOutputEntry_default_instance_._instance.get_mutable()->key_ = const_cast< ::hw::trezor::messages::monero::MoneroTransactionSourceEntry_MoneroOutputEntry_MoneroRctKeyPublic*>(
      ::hw::trezor::messages::monero::MoneroTransactionSourceEntry_MoneroOutputEntry_MoneroRctKeyPublic::internal_default_instance());
}
class MoneroTransactionSourceEntry_MoneroOutputEntry::_Internal {
 public:
  using HasBits = decltype(std::declval<MoneroTransactionSourceEntry_MoneroOutputEntry>()._has_bits_);
  static void set_has_idx(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::hw::trezor::messages::monero::MoneroTransactionSourceEntry_MoneroOutputEntry_MoneroRctKeyPublic& key(const MoneroTransactionSourceEntry_MoneroOutputEntry* msg);
  static void set_has_key(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::hw::trezor::messages::monero::MoneroTransactionSourceEntry_MoneroOutputEntry_MoneroRctKeyPublic&
MoneroTransactionSourceEntry_MoneroOutputEntry::_Internal::key(const MoneroTransactionSourceEntry_MoneroOutputEntry* msg) {
  return *msg->key_;
}
MoneroTransactionSourceEntry_MoneroOutputEntry::MoneroTransactionSourceEntry_MoneroOutputEntry()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hw.trezor.messages.monero.MoneroTransactionSourceEntry.MoneroOutputEntry)
}
MoneroTransactionSourceEntry_MoneroOutputEntry::MoneroTransactionSourceEntry_MoneroOutputEntry(const MoneroTransactionSourceEntry_MoneroOutputEntry& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_key()) {
    key_ = new ::hw::trezor::messages::monero::MoneroTransactionSourceEntry_MoneroOutputEntry_MoneroRctKeyPublic(*from.key_);
  } else {
    key_ = nullptr;
  }
  idx_ = from.idx_;
  // @@protoc_insertion_point(copy_constructor:hw.trezor.messages.monero.MoneroTransactionSourceEntry.MoneroOutputEntry)
}

void MoneroTransactionSourceEntry_MoneroOutputEntry::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MoneroTransactionSourceEntry_MoneroOutputEntry_messages_2dmonero_2eproto.base);
  ::memset(&key_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&idx_) -
      reinterpret_cast<char*>(&key_)) + sizeof(idx_));
}

MoneroTransactionSourceEntry_MoneroOutputEntry::~MoneroTransactionSourceEntry_MoneroOutputEntry() {
  // @@protoc_insertion_point(destructor:hw.trezor.messages.monero.MoneroTransactionSourceEntry.MoneroOutputEntry)
  SharedDtor();
}

void MoneroTransactionSourceEntry_MoneroOutputEntry::SharedDtor() {
  if (this != internal_default_instance()) delete key_;
}

void MoneroTransactionSourceEntry_MoneroOutputEntry::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MoneroTransactionSourceEntry_MoneroOutputEntry& MoneroTransactionSourceEntry_MoneroOutputEntry::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MoneroTransactionSourceEntry_MoneroOutputEntry_messages_2dmonero_2eproto.base);
  return *internal_default_instance();
}


void MoneroTransactionSourceEntry_MoneroOutputEntry::Clear() {
// @@protoc_insertion_point(message_clear_start:hw.trezor.messages.monero.MoneroTransactionSourceEntry.MoneroOutputEntry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(key_ != nullptr);
    key_->Clear();
  }
  idx_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MoneroTransactionSourceEntry_MoneroOutputEntry::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint64 idx = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_idx(&has_bits);
          idx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .hw.trezor.messages.monero.MoneroTransactionSourceEntry.MoneroOutputEntry.MoneroRctKeyPublic key = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_key(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MoneroTransactionSourceEntry_MoneroOutputEntry::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hw.trezor.messages.monero.MoneroTransactionSourceEntry.MoneroOutputEntry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 idx = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_idx(), target);
  }

  // optional .hw.trezor.messages.monero.MoneroTransactionSourceEntry.MoneroOutputEntry.MoneroRctKeyPublic key = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::key(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hw.trezor.messages.monero.MoneroTransactionSourceEntry.MoneroOutputEntry)
  return target;
}

size_t MoneroTransactionSourceEntry_MoneroOutputEntry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hw.trezor.messages.monero.MoneroTransactionSourceEntry.MoneroOutputEntry)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .hw.trezor.messages.monero.MoneroTransactionSourceEntry.MoneroOutputEntry.MoneroRctKeyPublic key = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *key_);
    }

    // optional uint64 idx = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_idx());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MoneroTransactionSourceEntry_MoneroOutputEntry::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hw.trezor.messages.monero.MoneroTransactionSourceEntry.MoneroOutputEntry)
  GOOGLE_DCHECK_NE(&from, this);
  const MoneroTransactionSourceEntry_MoneroOutputEntry* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MoneroTransactionSourceEntry_MoneroOutputEntry>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hw.trezor.messages.monero.MoneroTransactionSourceEntry.MoneroOutputEntry)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hw.trezor.messages.monero.MoneroTransactionSourceEntry.MoneroOutputEntry)
    MergeFrom(*source);
  }
}

void MoneroTransactionSourceEntry_MoneroOutputEntry::MergeFrom(const MoneroTransactionSourceEntry_MoneroOutputEntry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hw.trezor.messages.monero.MoneroTransactionSourceEntry.MoneroOutputEntry)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_key()->::hw::trezor::messages::monero::MoneroTransactionSourceEntry_MoneroOutputEntry_MoneroRctKeyPublic::MergeFrom(from._internal_key());
    }
    if (cached_has_bits & 0x00000002u) {
      idx_ = from.idx_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MoneroTransactionSourceEntry_MoneroOutputEntry::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hw.trezor.messages.monero.MoneroTransactionSourceEntry.MoneroOutputEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MoneroTransactionSourceEntry_MoneroOutputEntry::CopyFrom(const MoneroTransactionSourceEntry_MoneroOutputEntry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hw.trezor.messages.monero.MoneroTransactionSourceEntry.MoneroOutputEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MoneroTransactionSourceEntry_MoneroOutputEntry::IsInitialized() const {
  return true;
}

void MoneroTransactionSourceEntry_MoneroOutputEntry::InternalSwap(MoneroTransactionSourceEntry_MoneroOutputEntry* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(key_, other->key_);
  swap(idx_, other->idx_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MoneroTransactionSourceEntry_MoneroOutputEntry::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MoneroTransactionSourceEntry_MoneroMultisigKLRki::InitAsDefaultInstance() {
}
class MoneroTransactionSourceEntry_MoneroMultisigKLRki::_Internal {
 public:
  using HasBits = decltype(std::declval<MoneroTransactionSourceEntry_MoneroMultisigKLRki>()._has_bits_);
  static void set_has_k(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_l(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_r(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_ki(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

MoneroTransactionSourceEntry_MoneroMultisigKLRki::MoneroTransactionSourceEntry_MoneroMultisigKLRki()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hw.trezor.messages.monero.MoneroTransactionSourceEntry.MoneroMultisigKLRki)
}
MoneroTransactionSourceEntry_MoneroMultisigKLRki::MoneroTransactionSourceEntry_MoneroMultisigKLRki(const MoneroTransactionSourceEntry_MoneroMultisigKLRki& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  k_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_k()) {
    k_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.k_);
  }
  l_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_l()) {
    l_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.l_);
  }
  r_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_r()) {
    r_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.r_);
  }
  ki_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_ki()) {
    ki_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.ki_);
  }
  // @@protoc_insertion_point(copy_constructor:hw.trezor.messages.monero.MoneroTransactionSourceEntry.MoneroMultisigKLRki)
}

void MoneroTransactionSourceEntry_MoneroMultisigKLRki::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MoneroTransactionSourceEntry_MoneroMultisigKLRki_messages_2dmonero_2eproto.base);
  k_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  l_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  r_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ki_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

MoneroTransactionSourceEntry_MoneroMultisigKLRki::~MoneroTransactionSourceEntry_MoneroMultisigKLRki() {
  // @@protoc_insertion_point(destructor:hw.trezor.messages.monero.MoneroTransactionSourceEntry.MoneroMultisigKLRki)
  SharedDtor();
}

void MoneroTransactionSourceEntry_MoneroMultisigKLRki::SharedDtor() {
  k_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  l_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  r_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ki_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MoneroTransactionSourceEntry_MoneroMultisigKLRki::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MoneroTransactionSourceEntry_MoneroMultisigKLRki& MoneroTransactionSourceEntry_MoneroMultisigKLRki::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MoneroTransactionSourceEntry_MoneroMultisigKLRki_messages_2dmonero_2eproto.base);
  return *internal_default_instance();
}


void MoneroTransactionSourceEntry_MoneroMultisigKLRki::Clear() {
// @@protoc_insertion_point(message_clear_start:hw.trezor.messages.monero.MoneroTransactionSourceEntry.MoneroMultisigKLRki)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      k_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      l_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      r_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000008u) {
      ki_.ClearNonDefaultToEmptyNoArena();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MoneroTransactionSourceEntry_MoneroMultisigKLRki::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bytes K = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_k();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes L = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_l();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes R = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_r();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes ki = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_ki();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MoneroTransactionSourceEntry_MoneroMultisigKLRki::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hw.trezor.messages.monero.MoneroTransactionSourceEntry.MoneroMultisigKLRki)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes K = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_k(), target);
  }

  // optional bytes L = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_l(), target);
  }

  // optional bytes R = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_r(), target);
  }

  // optional bytes ki = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_ki(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hw.trezor.messages.monero.MoneroTransactionSourceEntry.MoneroMultisigKLRki)
  return target;
}

size_t MoneroTransactionSourceEntry_MoneroMultisigKLRki::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hw.trezor.messages.monero.MoneroTransactionSourceEntry.MoneroMultisigKLRki)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional bytes K = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_k());
    }

    // optional bytes L = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_l());
    }

    // optional bytes R = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_r());
    }

    // optional bytes ki = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_ki());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MoneroTransactionSourceEntry_MoneroMultisigKLRki::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hw.trezor.messages.monero.MoneroTransactionSourceEntry.MoneroMultisigKLRki)
  GOOGLE_DCHECK_NE(&from, this);
  const MoneroTransactionSourceEntry_MoneroMultisigKLRki* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MoneroTransactionSourceEntry_MoneroMultisigKLRki>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hw.trezor.messages.monero.MoneroTransactionSourceEntry.MoneroMultisigKLRki)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hw.trezor.messages.monero.MoneroTransactionSourceEntry.MoneroMultisigKLRki)
    MergeFrom(*source);
  }
}

void MoneroTransactionSourceEntry_MoneroMultisigKLRki::MergeFrom(const MoneroTransactionSourceEntry_MoneroMultisigKLRki& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hw.trezor.messages.monero.MoneroTransactionSourceEntry.MoneroMultisigKLRki)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      k_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.k_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      l_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.l_);
    }
    if (cached_has_bits & 0x00000004u) {
      _has_bits_[0] |= 0x00000004u;
      r_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.r_);
    }
    if (cached_has_bits & 0x00000008u) {
      _has_bits_[0] |= 0x00000008u;
      ki_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.ki_);
    }
  }
}

void MoneroTransactionSourceEntry_MoneroMultisigKLRki::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hw.trezor.messages.monero.MoneroTransactionSourceEntry.MoneroMultisigKLRki)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MoneroTransactionSourceEntry_MoneroMultisigKLRki::CopyFrom(const MoneroTransactionSourceEntry_MoneroMultisigKLRki& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hw.trezor.messages.monero.MoneroTransactionSourceEntry.MoneroMultisigKLRki)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MoneroTransactionSourceEntry_MoneroMultisigKLRki::IsInitialized() const {
  return true;
}

void MoneroTransactionSourceEntry_MoneroMultisigKLRki::InternalSwap(MoneroTransactionSourceEntry_MoneroMultisigKLRki* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  k_.Swap(&other->k_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  l_.Swap(&other->l_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  r_.Swap(&other->r_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  ki_.Swap(&other->ki_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata MoneroTransactionSourceEntry_MoneroMultisigKLRki::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MoneroTransactionSourceEntry::InitAsDefaultInstance() {
  ::hw::trezor::messages::monero::_MoneroTransactionSourceEntry_default_instance_._instance.get_mutable()->multisig_klrki_ = const_cast< ::hw::trezor::messages::monero::MoneroTransactionSourceEntry_MoneroMultisigKLRki*>(
      ::hw::trezor::messages::monero::MoneroTransactionSourceEntry_MoneroMultisigKLRki::internal_default_instance());
}
class MoneroTransactionSourceEntry::_Internal {
 public:
  using HasBits = decltype(std::declval<MoneroTransactionSourceEntry>()._has_bits_);
  static void set_has_real_output(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_real_out_tx_key(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_real_output_in_tx_index(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_amount(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_rct(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_mask(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::hw::trezor::messages::monero::MoneroTransactionSourceEntry_MoneroMultisigKLRki& multisig_klrki(const MoneroTransactionSourceEntry* msg);
  static void set_has_multisig_klrki(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_subaddr_minor(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
};

const ::hw::trezor::messages::monero::MoneroTransactionSourceEntry_MoneroMultisigKLRki&
MoneroTransactionSourceEntry::_Internal::multisig_klrki(const MoneroTransactionSourceEntry* msg) {
  return *msg->multisig_klrki_;
}
MoneroTransactionSourceEntry::MoneroTransactionSourceEntry()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hw.trezor.messages.monero.MoneroTransactionSourceEntry)
}
MoneroTransactionSourceEntry::MoneroTransactionSourceEntry(const MoneroTransactionSourceEntry& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      outputs_(from.outputs_),
      real_out_additional_tx_keys_(from.real_out_additional_tx_keys_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  real_out_tx_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_real_out_tx_key()) {
    real_out_tx_key_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.real_out_tx_key_);
  }
  mask_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_mask()) {
    mask_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.mask_);
  }
  if (from._internal_has_multisig_klrki()) {
    multisig_klrki_ = new ::hw::trezor::messages::monero::MoneroTransactionSourceEntry_MoneroMultisigKLRki(*from.multisig_klrki_);
  } else {
    multisig_klrki_ = nullptr;
  }
  ::memcpy(&real_output_, &from.real_output_,
    static_cast<size_t>(reinterpret_cast<char*>(&subaddr_minor_) -
    reinterpret_cast<char*>(&real_output_)) + sizeof(subaddr_minor_));
  // @@protoc_insertion_point(copy_constructor:hw.trezor.messages.monero.MoneroTransactionSourceEntry)
}

void MoneroTransactionSourceEntry::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MoneroTransactionSourceEntry_messages_2dmonero_2eproto.base);
  real_out_tx_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  mask_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&multisig_klrki_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&subaddr_minor_) -
      reinterpret_cast<char*>(&multisig_klrki_)) + sizeof(subaddr_minor_));
}

MoneroTransactionSourceEntry::~MoneroTransactionSourceEntry() {
  // @@protoc_insertion_point(destructor:hw.trezor.messages.monero.MoneroTransactionSourceEntry)
  SharedDtor();
}

void MoneroTransactionSourceEntry::SharedDtor() {
  real_out_tx_key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  mask_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete multisig_klrki_;
}

void MoneroTransactionSourceEntry::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MoneroTransactionSourceEntry& MoneroTransactionSourceEntry::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MoneroTransactionSourceEntry_messages_2dmonero_2eproto.base);
  return *internal_default_instance();
}


void MoneroTransactionSourceEntry::Clear() {
// @@protoc_insertion_point(message_clear_start:hw.trezor.messages.monero.MoneroTransactionSourceEntry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  outputs_.Clear();
  real_out_additional_tx_keys_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      real_out_tx_key_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      mask_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(multisig_klrki_ != nullptr);
      multisig_klrki_->Clear();
    }
  }
  if (cached_has_bits & 0x000000f8u) {
    ::memset(&real_output_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&subaddr_minor_) -
        reinterpret_cast<char*>(&real_output_)) + sizeof(subaddr_minor_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MoneroTransactionSourceEntry::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .hw.trezor.messages.monero.MoneroTransactionSourceEntry.MoneroOutputEntry outputs = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_outputs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // optional uint64 real_output = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_real_output(&has_bits);
          real_output_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes real_out_tx_key = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_real_out_tx_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated bytes real_out_additional_tx_keys = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_real_out_additional_tx_keys();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // optional uint64 real_output_in_tx_index = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_real_output_in_tx_index(&has_bits);
          real_output_in_tx_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 amount = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_amount(&has_bits);
          amount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool rct = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_rct(&has_bits);
          rct_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes mask = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_mask();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .hw.trezor.messages.monero.MoneroTransactionSourceEntry.MoneroMultisigKLRki multisig_kLRki = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_multisig_klrki(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 subaddr_minor = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_subaddr_minor(&has_bits);
          subaddr_minor_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MoneroTransactionSourceEntry::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hw.trezor.messages.monero.MoneroTransactionSourceEntry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .hw.trezor.messages.monero.MoneroTransactionSourceEntry.MoneroOutputEntry outputs = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_outputs_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_outputs(i), target, stream);
  }

  cached_has_bits = _has_bits_[0];
  // optional uint64 real_output = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_real_output(), target);
  }

  // optional bytes real_out_tx_key = 3;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_real_out_tx_key(), target);
  }

  // repeated bytes real_out_additional_tx_keys = 4;
  for (int i = 0, n = this->_internal_real_out_additional_tx_keys_size(); i < n; i++) {
    const auto& s = this->_internal_real_out_additional_tx_keys(i);
    target = stream->WriteBytes(4, s, target);
  }

  // optional uint64 real_output_in_tx_index = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(5, this->_internal_real_output_in_tx_index(), target);
  }

  // optional uint64 amount = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(6, this->_internal_amount(), target);
  }

  // optional bool rct = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_rct(), target);
  }

  // optional bytes mask = 8;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteBytesMaybeAliased(
        8, this->_internal_mask(), target);
  }

  // optional .hw.trezor.messages.monero.MoneroTransactionSourceEntry.MoneroMultisigKLRki multisig_kLRki = 9;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::multisig_klrki(this), target, stream);
  }

  // optional uint32 subaddr_minor = 10;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(10, this->_internal_subaddr_minor(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hw.trezor.messages.monero.MoneroTransactionSourceEntry)
  return target;
}

size_t MoneroTransactionSourceEntry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hw.trezor.messages.monero.MoneroTransactionSourceEntry)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .hw.trezor.messages.monero.MoneroTransactionSourceEntry.MoneroOutputEntry outputs = 1;
  total_size += 1UL * this->_internal_outputs_size();
  for (const auto& msg : this->outputs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated bytes real_out_additional_tx_keys = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(real_out_additional_tx_keys_.size());
  for (int i = 0, n = real_out_additional_tx_keys_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
      real_out_additional_tx_keys_.Get(i));
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional bytes real_out_tx_key = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_real_out_tx_key());
    }

    // optional bytes mask = 8;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_mask());
    }

    // optional .hw.trezor.messages.monero.MoneroTransactionSourceEntry.MoneroMultisigKLRki multisig_kLRki = 9;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *multisig_klrki_);
    }

    // optional uint64 real_output = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_real_output());
    }

    // optional uint64 real_output_in_tx_index = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_real_output_in_tx_index());
    }

    // optional uint64 amount = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_amount());
    }

    // optional bool rct = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

    // optional uint32 subaddr_minor = 10;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_subaddr_minor());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MoneroTransactionSourceEntry::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hw.trezor.messages.monero.MoneroTransactionSourceEntry)
  GOOGLE_DCHECK_NE(&from, this);
  const MoneroTransactionSourceEntry* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MoneroTransactionSourceEntry>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hw.trezor.messages.monero.MoneroTransactionSourceEntry)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hw.trezor.messages.monero.MoneroTransactionSourceEntry)
    MergeFrom(*source);
  }
}

void MoneroTransactionSourceEntry::MergeFrom(const MoneroTransactionSourceEntry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hw.trezor.messages.monero.MoneroTransactionSourceEntry)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  outputs_.MergeFrom(from.outputs_);
  real_out_additional_tx_keys_.MergeFrom(from.real_out_additional_tx_keys_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      real_out_tx_key_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.real_out_tx_key_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      mask_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.mask_);
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_multisig_klrki()->::hw::trezor::messages::monero::MoneroTransactionSourceEntry_MoneroMultisigKLRki::MergeFrom(from._internal_multisig_klrki());
    }
    if (cached_has_bits & 0x00000008u) {
      real_output_ = from.real_output_;
    }
    if (cached_has_bits & 0x00000010u) {
      real_output_in_tx_index_ = from.real_output_in_tx_index_;
    }
    if (cached_has_bits & 0x00000020u) {
      amount_ = from.amount_;
    }
    if (cached_has_bits & 0x00000040u) {
      rct_ = from.rct_;
    }
    if (cached_has_bits & 0x00000080u) {
      subaddr_minor_ = from.subaddr_minor_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MoneroTransactionSourceEntry::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hw.trezor.messages.monero.MoneroTransactionSourceEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MoneroTransactionSourceEntry::CopyFrom(const MoneroTransactionSourceEntry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hw.trezor.messages.monero.MoneroTransactionSourceEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MoneroTransactionSourceEntry::IsInitialized() const {
  return true;
}

void MoneroTransactionSourceEntry::InternalSwap(MoneroTransactionSourceEntry* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  outputs_.InternalSwap(&other->outputs_);
  real_out_additional_tx_keys_.InternalSwap(&other->real_out_additional_tx_keys_);
  real_out_tx_key_.Swap(&other->real_out_tx_key_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  mask_.Swap(&other->mask_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(multisig_klrki_, other->multisig_klrki_);
  swap(real_output_, other->real_output_);
  swap(real_output_in_tx_index_, other->real_output_in_tx_index_);
  swap(amount_, other->amount_);
  swap(rct_, other->rct_);
  swap(subaddr_minor_, other->subaddr_minor_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MoneroTransactionSourceEntry::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MoneroTransactionDestinationEntry_MoneroAccountPublicAddress::InitAsDefaultInstance() {
}
class MoneroTransactionDestinationEntry_MoneroAccountPublicAddress::_Internal {
 public:
  using HasBits = decltype(std::declval<MoneroTransactionDestinationEntry_MoneroAccountPublicAddress>()._has_bits_);
  static void set_has_spend_public_key(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_view_public_key(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

MoneroTransactionDestinationEntry_MoneroAccountPublicAddress::MoneroTransactionDestinationEntry_MoneroAccountPublicAddress()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hw.trezor.messages.monero.MoneroTransactionDestinationEntry.MoneroAccountPublicAddress)
}
MoneroTransactionDestinationEntry_MoneroAccountPublicAddress::MoneroTransactionDestinationEntry_MoneroAccountPublicAddress(const MoneroTransactionDestinationEntry_MoneroAccountPublicAddress& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  spend_public_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_spend_public_key()) {
    spend_public_key_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.spend_public_key_);
  }
  view_public_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_view_public_key()) {
    view_public_key_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.view_public_key_);
  }
  // @@protoc_insertion_point(copy_constructor:hw.trezor.messages.monero.MoneroTransactionDestinationEntry.MoneroAccountPublicAddress)
}

void MoneroTransactionDestinationEntry_MoneroAccountPublicAddress::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MoneroTransactionDestinationEntry_MoneroAccountPublicAddress_messages_2dmonero_2eproto.base);
  spend_public_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  view_public_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

MoneroTransactionDestinationEntry_MoneroAccountPublicAddress::~MoneroTransactionDestinationEntry_MoneroAccountPublicAddress() {
  // @@protoc_insertion_point(destructor:hw.trezor.messages.monero.MoneroTransactionDestinationEntry.MoneroAccountPublicAddress)
  SharedDtor();
}

void MoneroTransactionDestinationEntry_MoneroAccountPublicAddress::SharedDtor() {
  spend_public_key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  view_public_key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MoneroTransactionDestinationEntry_MoneroAccountPublicAddress::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MoneroTransactionDestinationEntry_MoneroAccountPublicAddress& MoneroTransactionDestinationEntry_MoneroAccountPublicAddress::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MoneroTransactionDestinationEntry_MoneroAccountPublicAddress_messages_2dmonero_2eproto.base);
  return *internal_default_instance();
}


void MoneroTransactionDestinationEntry_MoneroAccountPublicAddress::Clear() {
// @@protoc_insertion_point(message_clear_start:hw.trezor.messages.monero.MoneroTransactionDestinationEntry.MoneroAccountPublicAddress)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      spend_public_key_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      view_public_key_.ClearNonDefaultToEmptyNoArena();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MoneroTransactionDestinationEntry_MoneroAccountPublicAddress::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bytes spend_public_key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_spend_public_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes view_public_key = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_view_public_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MoneroTransactionDestinationEntry_MoneroAccountPublicAddress::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hw.trezor.messages.monero.MoneroTransactionDestinationEntry.MoneroAccountPublicAddress)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes spend_public_key = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_spend_public_key(), target);
  }

  // optional bytes view_public_key = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_view_public_key(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hw.trezor.messages.monero.MoneroTransactionDestinationEntry.MoneroAccountPublicAddress)
  return target;
}

size_t MoneroTransactionDestinationEntry_MoneroAccountPublicAddress::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hw.trezor.messages.monero.MoneroTransactionDestinationEntry.MoneroAccountPublicAddress)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional bytes spend_public_key = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_spend_public_key());
    }

    // optional bytes view_public_key = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_view_public_key());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MoneroTransactionDestinationEntry_MoneroAccountPublicAddress::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hw.trezor.messages.monero.MoneroTransactionDestinationEntry.MoneroAccountPublicAddress)
  GOOGLE_DCHECK_NE(&from, this);
  const MoneroTransactionDestinationEntry_MoneroAccountPublicAddress* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MoneroTransactionDestinationEntry_MoneroAccountPublicAddress>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hw.trezor.messages.monero.MoneroTransactionDestinationEntry.MoneroAccountPublicAddress)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hw.trezor.messages.monero.MoneroTransactionDestinationEntry.MoneroAccountPublicAddress)
    MergeFrom(*source);
  }
}

void MoneroTransactionDestinationEntry_MoneroAccountPublicAddress::MergeFrom(const MoneroTransactionDestinationEntry_MoneroAccountPublicAddress& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hw.trezor.messages.monero.MoneroTransactionDestinationEntry.MoneroAccountPublicAddress)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      spend_public_key_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.spend_public_key_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      view_public_key_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.view_public_key_);
    }
  }
}

void MoneroTransactionDestinationEntry_MoneroAccountPublicAddress::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hw.trezor.messages.monero.MoneroTransactionDestinationEntry.MoneroAccountPublicAddress)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MoneroTransactionDestinationEntry_MoneroAccountPublicAddress::CopyFrom(const MoneroTransactionDestinationEntry_MoneroAccountPublicAddress& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hw.trezor.messages.monero.MoneroTransactionDestinationEntry.MoneroAccountPublicAddress)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MoneroTransactionDestinationEntry_MoneroAccountPublicAddress::IsInitialized() const {
  return true;
}

void MoneroTransactionDestinationEntry_MoneroAccountPublicAddress::InternalSwap(MoneroTransactionDestinationEntry_MoneroAccountPublicAddress* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  spend_public_key_.Swap(&other->spend_public_key_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  view_public_key_.Swap(&other->view_public_key_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata MoneroTransactionDestinationEntry_MoneroAccountPublicAddress::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MoneroTransactionDestinationEntry::InitAsDefaultInstance() {
  ::hw::trezor::messages::monero::_MoneroTransactionDestinationEntry_default_instance_._instance.get_mutable()->addr_ = const_cast< ::hw::trezor::messages::monero::MoneroTransactionDestinationEntry_MoneroAccountPublicAddress*>(
      ::hw::trezor::messages::monero::MoneroTransactionDestinationEntry_MoneroAccountPublicAddress::internal_default_instance());
}
class MoneroTransactionDestinationEntry::_Internal {
 public:
  using HasBits = decltype(std::declval<MoneroTransactionDestinationEntry>()._has_bits_);
  static void set_has_amount(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::hw::trezor::messages::monero::MoneroTransactionDestinationEntry_MoneroAccountPublicAddress& addr(const MoneroTransactionDestinationEntry* msg);
  static void set_has_addr(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_is_subaddress(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_original(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_is_integrated(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

const ::hw::trezor::messages::monero::MoneroTransactionDestinationEntry_MoneroAccountPublicAddress&
MoneroTransactionDestinationEntry::_Internal::addr(const MoneroTransactionDestinationEntry* msg) {
  return *msg->addr_;
}
MoneroTransactionDestinationEntry::MoneroTransactionDestinationEntry()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hw.trezor.messages.monero.MoneroTransactionDestinationEntry)
}
MoneroTransactionDestinationEntry::MoneroTransactionDestinationEntry(const MoneroTransactionDestinationEntry& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  original_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_original()) {
    original_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.original_);
  }
  if (from._internal_has_addr()) {
    addr_ = new ::hw::trezor::messages::monero::MoneroTransactionDestinationEntry_MoneroAccountPublicAddress(*from.addr_);
  } else {
    addr_ = nullptr;
  }
  ::memcpy(&amount_, &from.amount_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_integrated_) -
    reinterpret_cast<char*>(&amount_)) + sizeof(is_integrated_));
  // @@protoc_insertion_point(copy_constructor:hw.trezor.messages.monero.MoneroTransactionDestinationEntry)
}

void MoneroTransactionDestinationEntry::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MoneroTransactionDestinationEntry_messages_2dmonero_2eproto.base);
  original_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&addr_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_integrated_) -
      reinterpret_cast<char*>(&addr_)) + sizeof(is_integrated_));
}

MoneroTransactionDestinationEntry::~MoneroTransactionDestinationEntry() {
  // @@protoc_insertion_point(destructor:hw.trezor.messages.monero.MoneroTransactionDestinationEntry)
  SharedDtor();
}

void MoneroTransactionDestinationEntry::SharedDtor() {
  original_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete addr_;
}

void MoneroTransactionDestinationEntry::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MoneroTransactionDestinationEntry& MoneroTransactionDestinationEntry::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MoneroTransactionDestinationEntry_messages_2dmonero_2eproto.base);
  return *internal_default_instance();
}


void MoneroTransactionDestinationEntry::Clear() {
// @@protoc_insertion_point(message_clear_start:hw.trezor.messages.monero.MoneroTransactionDestinationEntry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      original_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(addr_ != nullptr);
      addr_->Clear();
    }
  }
  if (cached_has_bits & 0x0000001cu) {
    ::memset(&amount_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&is_integrated_) -
        reinterpret_cast<char*>(&amount_)) + sizeof(is_integrated_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MoneroTransactionDestinationEntry::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint64 amount = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_amount(&has_bits);
          amount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .hw.trezor.messages.monero.MoneroTransactionDestinationEntry.MoneroAccountPublicAddress addr = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_addr(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_subaddress = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_is_subaddress(&has_bits);
          is_subaddress_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes original = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_original();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_integrated = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_is_integrated(&has_bits);
          is_integrated_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MoneroTransactionDestinationEntry::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hw.trezor.messages.monero.MoneroTransactionDestinationEntry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 amount = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_amount(), target);
  }

  // optional .hw.trezor.messages.monero.MoneroTransactionDestinationEntry.MoneroAccountPublicAddress addr = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::addr(this), target, stream);
  }

  // optional bool is_subaddress = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_is_subaddress(), target);
  }

  // optional bytes original = 4;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_original(), target);
  }

  // optional bool is_integrated = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_is_integrated(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hw.trezor.messages.monero.MoneroTransactionDestinationEntry)
  return target;
}

size_t MoneroTransactionDestinationEntry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hw.trezor.messages.monero.MoneroTransactionDestinationEntry)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional bytes original = 4;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_original());
    }

    // optional .hw.trezor.messages.monero.MoneroTransactionDestinationEntry.MoneroAccountPublicAddress addr = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *addr_);
    }

    // optional uint64 amount = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_amount());
    }

    // optional bool is_subaddress = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional bool is_integrated = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MoneroTransactionDestinationEntry::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hw.trezor.messages.monero.MoneroTransactionDestinationEntry)
  GOOGLE_DCHECK_NE(&from, this);
  const MoneroTransactionDestinationEntry* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MoneroTransactionDestinationEntry>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hw.trezor.messages.monero.MoneroTransactionDestinationEntry)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hw.trezor.messages.monero.MoneroTransactionDestinationEntry)
    MergeFrom(*source);
  }
}

void MoneroTransactionDestinationEntry::MergeFrom(const MoneroTransactionDestinationEntry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hw.trezor.messages.monero.MoneroTransactionDestinationEntry)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      original_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.original_);
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_addr()->::hw::trezor::messages::monero::MoneroTransactionDestinationEntry_MoneroAccountPublicAddress::MergeFrom(from._internal_addr());
    }
    if (cached_has_bits & 0x00000004u) {
      amount_ = from.amount_;
    }
    if (cached_has_bits & 0x00000008u) {
      is_subaddress_ = from.is_subaddress_;
    }
    if (cached_has_bits & 0x00000010u) {
      is_integrated_ = from.is_integrated_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MoneroTransactionDestinationEntry::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hw.trezor.messages.monero.MoneroTransactionDestinationEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MoneroTransactionDestinationEntry::CopyFrom(const MoneroTransactionDestinationEntry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hw.trezor.messages.monero.MoneroTransactionDestinationEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MoneroTransactionDestinationEntry::IsInitialized() const {
  return true;
}

void MoneroTransactionDestinationEntry::InternalSwap(MoneroTransactionDestinationEntry* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  original_.Swap(&other->original_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(addr_, other->addr_);
  swap(amount_, other->amount_);
  swap(is_subaddress_, other->is_subaddress_);
  swap(is_integrated_, other->is_integrated_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MoneroTransactionDestinationEntry::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MoneroTransactionRsigData::InitAsDefaultInstance() {
}
class MoneroTransactionRsigData::_Internal {
 public:
  using HasBits = decltype(std::declval<MoneroTransactionRsigData>()._has_bits_);
  static void set_has_rsig_type(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_offload_type(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_mask(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_rsig(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_bp_version(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

MoneroTransactionRsigData::MoneroTransactionRsigData()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hw.trezor.messages.monero.MoneroTransactionRsigData)
}
MoneroTransactionRsigData::MoneroTransactionRsigData(const MoneroTransactionRsigData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      grouping_(from.grouping_),
      rsig_parts_(from.rsig_parts_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  mask_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_mask()) {
    mask_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.mask_);
  }
  rsig_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_rsig()) {
    rsig_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.rsig_);
  }
  ::memcpy(&rsig_type_, &from.rsig_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&bp_version_) -
    reinterpret_cast<char*>(&rsig_type_)) + sizeof(bp_version_));
  // @@protoc_insertion_point(copy_constructor:hw.trezor.messages.monero.MoneroTransactionRsigData)
}

void MoneroTransactionRsigData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MoneroTransactionRsigData_messages_2dmonero_2eproto.base);
  mask_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  rsig_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&rsig_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&bp_version_) -
      reinterpret_cast<char*>(&rsig_type_)) + sizeof(bp_version_));
}

MoneroTransactionRsigData::~MoneroTransactionRsigData() {
  // @@protoc_insertion_point(destructor:hw.trezor.messages.monero.MoneroTransactionRsigData)
  SharedDtor();
}

void MoneroTransactionRsigData::SharedDtor() {
  mask_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  rsig_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MoneroTransactionRsigData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MoneroTransactionRsigData& MoneroTransactionRsigData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MoneroTransactionRsigData_messages_2dmonero_2eproto.base);
  return *internal_default_instance();
}


void MoneroTransactionRsigData::Clear() {
// @@protoc_insertion_point(message_clear_start:hw.trezor.messages.monero.MoneroTransactionRsigData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  grouping_.Clear();
  rsig_parts_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      mask_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      rsig_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 0x0000001cu) {
    ::memset(&rsig_type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&bp_version_) -
        reinterpret_cast<char*>(&rsig_type_)) + sizeof(bp_version_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MoneroTransactionRsigData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 rsig_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_rsig_type(&has_bits);
          rsig_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 offload_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_offload_type(&has_bits);
          offload_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint64 grouping = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_grouping(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<24>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(_internal_mutable_grouping(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes mask = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_mask();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes rsig = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_rsig();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated bytes rsig_parts = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_rsig_parts();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      // optional uint32 bp_version = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_bp_version(&has_bits);
          bp_version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MoneroTransactionRsigData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hw.trezor.messages.monero.MoneroTransactionRsigData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 rsig_type = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_rsig_type(), target);
  }

  // optional uint32 offload_type = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_offload_type(), target);
  }

  // repeated uint64 grouping = 3;
  for (int i = 0, n = this->_internal_grouping_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_grouping(i), target);
  }

  // optional bytes mask = 4;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_mask(), target);
  }

  // optional bytes rsig = 5;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteBytesMaybeAliased(
        5, this->_internal_rsig(), target);
  }

  // repeated bytes rsig_parts = 6;
  for (int i = 0, n = this->_internal_rsig_parts_size(); i < n; i++) {
    const auto& s = this->_internal_rsig_parts(i);
    target = stream->WriteBytes(6, s, target);
  }

  // optional uint32 bp_version = 7;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_bp_version(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hw.trezor.messages.monero.MoneroTransactionRsigData)
  return target;
}

size_t MoneroTransactionRsigData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hw.trezor.messages.monero.MoneroTransactionRsigData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint64 grouping = 3;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt64Size(this->grouping_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_grouping_size());
    total_size += data_size;
  }

  // repeated bytes rsig_parts = 6;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(rsig_parts_.size());
  for (int i = 0, n = rsig_parts_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
      rsig_parts_.Get(i));
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional bytes mask = 4;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_mask());
    }

    // optional bytes rsig = 5;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_rsig());
    }

    // optional uint32 rsig_type = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_rsig_type());
    }

    // optional uint32 offload_type = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_offload_type());
    }

    // optional uint32 bp_version = 7;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_bp_version());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MoneroTransactionRsigData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hw.trezor.messages.monero.MoneroTransactionRsigData)
  GOOGLE_DCHECK_NE(&from, this);
  const MoneroTransactionRsigData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MoneroTransactionRsigData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hw.trezor.messages.monero.MoneroTransactionRsigData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hw.trezor.messages.monero.MoneroTransactionRsigData)
    MergeFrom(*source);
  }
}

void MoneroTransactionRsigData::MergeFrom(const MoneroTransactionRsigData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hw.trezor.messages.monero.MoneroTransactionRsigData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  grouping_.MergeFrom(from.grouping_);
  rsig_parts_.MergeFrom(from.rsig_parts_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      mask_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.mask_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      rsig_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.rsig_);
    }
    if (cached_has_bits & 0x00000004u) {
      rsig_type_ = from.rsig_type_;
    }
    if (cached_has_bits & 0x00000008u) {
      offload_type_ = from.offload_type_;
    }
    if (cached_has_bits & 0x00000010u) {
      bp_version_ = from.bp_version_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MoneroTransactionRsigData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hw.trezor.messages.monero.MoneroTransactionRsigData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MoneroTransactionRsigData::CopyFrom(const MoneroTransactionRsigData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hw.trezor.messages.monero.MoneroTransactionRsigData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MoneroTransactionRsigData::IsInitialized() const {
  return true;
}

void MoneroTransactionRsigData::InternalSwap(MoneroTransactionRsigData* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  grouping_.InternalSwap(&other->grouping_);
  rsig_parts_.InternalSwap(&other->rsig_parts_);
  mask_.Swap(&other->mask_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  rsig_.Swap(&other->rsig_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(rsig_type_, other->rsig_type_);
  swap(offload_type_, other->offload_type_);
  swap(bp_version_, other->bp_version_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MoneroTransactionRsigData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MoneroGetAddress::InitAsDefaultInstance() {
}
class MoneroGetAddress::_Internal {
 public:
  using HasBits = decltype(std::declval<MoneroGetAddress>()._has_bits_);
  static void set_has_show_display(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_network_type(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_account(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_minor(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_payment_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

MoneroGetAddress::MoneroGetAddress()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hw.trezor.messages.monero.MoneroGetAddress)
}
MoneroGetAddress::MoneroGetAddress(const MoneroGetAddress& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      address_n_(from.address_n_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  payment_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_payment_id()) {
    payment_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.payment_id_);
  }
  ::memcpy(&show_display_, &from.show_display_,
    static_cast<size_t>(reinterpret_cast<char*>(&minor_) -
    reinterpret_cast<char*>(&show_display_)) + sizeof(minor_));
  // @@protoc_insertion_point(copy_constructor:hw.trezor.messages.monero.MoneroGetAddress)
}

void MoneroGetAddress::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MoneroGetAddress_messages_2dmonero_2eproto.base);
  payment_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&show_display_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&minor_) -
      reinterpret_cast<char*>(&show_display_)) + sizeof(minor_));
}

MoneroGetAddress::~MoneroGetAddress() {
  // @@protoc_insertion_point(destructor:hw.trezor.messages.monero.MoneroGetAddress)
  SharedDtor();
}

void MoneroGetAddress::SharedDtor() {
  payment_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MoneroGetAddress::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MoneroGetAddress& MoneroGetAddress::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MoneroGetAddress_messages_2dmonero_2eproto.base);
  return *internal_default_instance();
}


void MoneroGetAddress::Clear() {
// @@protoc_insertion_point(message_clear_start:hw.trezor.messages.monero.MoneroGetAddress)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  address_n_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    payment_id_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 0x0000001eu) {
    ::memset(&show_display_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&minor_) -
        reinterpret_cast<char*>(&show_display_)) + sizeof(minor_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MoneroGetAddress::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated uint32 address_n = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_address_n(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<8>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_address_n(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool show_display = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_show_display(&has_bits);
          show_display_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 network_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_network_type(&has_bits);
          network_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 account = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_account(&has_bits);
          account_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 minor = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_minor(&has_bits);
          minor_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes payment_id = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_payment_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MoneroGetAddress::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hw.trezor.messages.monero.MoneroGetAddress)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 address_n = 1;
  for (int i = 0, n = this->_internal_address_n_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_address_n(i), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional bool show_display = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_show_display(), target);
  }

  // optional uint32 network_type = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_network_type(), target);
  }

  // optional uint32 account = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_account(), target);
  }

  // optional uint32 minor = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_minor(), target);
  }

  // optional bytes payment_id = 6;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        6, this->_internal_payment_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hw.trezor.messages.monero.MoneroGetAddress)
  return target;
}

size_t MoneroGetAddress::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hw.trezor.messages.monero.MoneroGetAddress)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 address_n = 1;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->address_n_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_address_n_size());
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional bytes payment_id = 6;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_payment_id());
    }

    // optional bool show_display = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

    // optional uint32 network_type = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_network_type());
    }

    // optional uint32 account = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_account());
    }

    // optional uint32 minor = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_minor());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MoneroGetAddress::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hw.trezor.messages.monero.MoneroGetAddress)
  GOOGLE_DCHECK_NE(&from, this);
  const MoneroGetAddress* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MoneroGetAddress>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hw.trezor.messages.monero.MoneroGetAddress)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hw.trezor.messages.monero.MoneroGetAddress)
    MergeFrom(*source);
  }
}

void MoneroGetAddress::MergeFrom(const MoneroGetAddress& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hw.trezor.messages.monero.MoneroGetAddress)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  address_n_.MergeFrom(from.address_n_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      payment_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.payment_id_);
    }
    if (cached_has_bits & 0x00000002u) {
      show_display_ = from.show_display_;
    }
    if (cached_has_bits & 0x00000004u) {
      network_type_ = from.network_type_;
    }
    if (cached_has_bits & 0x00000008u) {
      account_ = from.account_;
    }
    if (cached_has_bits & 0x00000010u) {
      minor_ = from.minor_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MoneroGetAddress::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hw.trezor.messages.monero.MoneroGetAddress)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MoneroGetAddress::CopyFrom(const MoneroGetAddress& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hw.trezor.messages.monero.MoneroGetAddress)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MoneroGetAddress::IsInitialized() const {
  return true;
}

void MoneroGetAddress::InternalSwap(MoneroGetAddress* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  address_n_.InternalSwap(&other->address_n_);
  payment_id_.Swap(&other->payment_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(show_display_, other->show_display_);
  swap(network_type_, other->network_type_);
  swap(account_, other->account_);
  swap(minor_, other->minor_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MoneroGetAddress::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MoneroAddress::InitAsDefaultInstance() {
}
class MoneroAddress::_Internal {
 public:
  using HasBits = decltype(std::declval<MoneroAddress>()._has_bits_);
  static void set_has_address(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

MoneroAddress::MoneroAddress()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hw.trezor.messages.monero.MoneroAddress)
}
MoneroAddress::MoneroAddress(const MoneroAddress& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_address()) {
    address_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.address_);
  }
  // @@protoc_insertion_point(copy_constructor:hw.trezor.messages.monero.MoneroAddress)
}

void MoneroAddress::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MoneroAddress_messages_2dmonero_2eproto.base);
  address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

MoneroAddress::~MoneroAddress() {
  // @@protoc_insertion_point(destructor:hw.trezor.messages.monero.MoneroAddress)
  SharedDtor();
}

void MoneroAddress::SharedDtor() {
  address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MoneroAddress::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MoneroAddress& MoneroAddress::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MoneroAddress_messages_2dmonero_2eproto.base);
  return *internal_default_instance();
}


void MoneroAddress::Clear() {
// @@protoc_insertion_point(message_clear_start:hw.trezor.messages.monero.MoneroAddress)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    address_.ClearNonDefaultToEmptyNoArena();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MoneroAddress::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bytes address = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MoneroAddress::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hw.trezor.messages.monero.MoneroAddress)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes address = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_address(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hw.trezor.messages.monero.MoneroAddress)
  return target;
}

size_t MoneroAddress::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hw.trezor.messages.monero.MoneroAddress)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bytes address = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_address());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MoneroAddress::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hw.trezor.messages.monero.MoneroAddress)
  GOOGLE_DCHECK_NE(&from, this);
  const MoneroAddress* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MoneroAddress>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hw.trezor.messages.monero.MoneroAddress)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hw.trezor.messages.monero.MoneroAddress)
    MergeFrom(*source);
  }
}

void MoneroAddress::MergeFrom(const MoneroAddress& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hw.trezor.messages.monero.MoneroAddress)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_address()) {
    _has_bits_[0] |= 0x00000001u;
    address_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.address_);
  }
}

void MoneroAddress::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hw.trezor.messages.monero.MoneroAddress)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MoneroAddress::CopyFrom(const MoneroAddress& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hw.trezor.messages.monero.MoneroAddress)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MoneroAddress::IsInitialized() const {
  return true;
}

void MoneroAddress::InternalSwap(MoneroAddress* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  address_.Swap(&other->address_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata MoneroAddress::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MoneroGetWatchKey::InitAsDefaultInstance() {
}
class MoneroGetWatchKey::_Internal {
 public:
  using HasBits = decltype(std::declval<MoneroGetWatchKey>()._has_bits_);
  static void set_has_network_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

MoneroGetWatchKey::MoneroGetWatchKey()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hw.trezor.messages.monero.MoneroGetWatchKey)
}
MoneroGetWatchKey::MoneroGetWatchKey(const MoneroGetWatchKey& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      address_n_(from.address_n_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  network_type_ = from.network_type_;
  // @@protoc_insertion_point(copy_constructor:hw.trezor.messages.monero.MoneroGetWatchKey)
}

void MoneroGetWatchKey::SharedCtor() {
  network_type_ = 0u;
}

MoneroGetWatchKey::~MoneroGetWatchKey() {
  // @@protoc_insertion_point(destructor:hw.trezor.messages.monero.MoneroGetWatchKey)
  SharedDtor();
}

void MoneroGetWatchKey::SharedDtor() {
}

void MoneroGetWatchKey::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MoneroGetWatchKey& MoneroGetWatchKey::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MoneroGetWatchKey_messages_2dmonero_2eproto.base);
  return *internal_default_instance();
}


void MoneroGetWatchKey::Clear() {
// @@protoc_insertion_point(message_clear_start:hw.trezor.messages.monero.MoneroGetWatchKey)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  address_n_.Clear();
  network_type_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MoneroGetWatchKey::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated uint32 address_n = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_address_n(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<8>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_address_n(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 network_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_network_type(&has_bits);
          network_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MoneroGetWatchKey::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hw.trezor.messages.monero.MoneroGetWatchKey)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 address_n = 1;
  for (int i = 0, n = this->_internal_address_n_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_address_n(i), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional uint32 network_type = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_network_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hw.trezor.messages.monero.MoneroGetWatchKey)
  return target;
}

size_t MoneroGetWatchKey::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hw.trezor.messages.monero.MoneroGetWatchKey)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 address_n = 1;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->address_n_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_address_n_size());
    total_size += data_size;
  }

  // optional uint32 network_type = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_network_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MoneroGetWatchKey::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hw.trezor.messages.monero.MoneroGetWatchKey)
  GOOGLE_DCHECK_NE(&from, this);
  const MoneroGetWatchKey* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MoneroGetWatchKey>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hw.trezor.messages.monero.MoneroGetWatchKey)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hw.trezor.messages.monero.MoneroGetWatchKey)
    MergeFrom(*source);
  }
}

void MoneroGetWatchKey::MergeFrom(const MoneroGetWatchKey& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hw.trezor.messages.monero.MoneroGetWatchKey)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  address_n_.MergeFrom(from.address_n_);
  if (from._internal_has_network_type()) {
    _internal_set_network_type(from._internal_network_type());
  }
}

void MoneroGetWatchKey::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hw.trezor.messages.monero.MoneroGetWatchKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MoneroGetWatchKey::CopyFrom(const MoneroGetWatchKey& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hw.trezor.messages.monero.MoneroGetWatchKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MoneroGetWatchKey::IsInitialized() const {
  return true;
}

void MoneroGetWatchKey::InternalSwap(MoneroGetWatchKey* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  address_n_.InternalSwap(&other->address_n_);
  swap(network_type_, other->network_type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MoneroGetWatchKey::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MoneroWatchKey::InitAsDefaultInstance() {
}
class MoneroWatchKey::_Internal {
 public:
  using HasBits = decltype(std::declval<MoneroWatchKey>()._has_bits_);
  static void set_has_watch_key(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_address(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

MoneroWatchKey::MoneroWatchKey()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hw.trezor.messages.monero.MoneroWatchKey)
}
MoneroWatchKey::MoneroWatchKey(const MoneroWatchKey& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  watch_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_watch_key()) {
    watch_key_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.watch_key_);
  }
  address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_address()) {
    address_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.address_);
  }
  // @@protoc_insertion_point(copy_constructor:hw.trezor.messages.monero.MoneroWatchKey)
}

void MoneroWatchKey::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MoneroWatchKey_messages_2dmonero_2eproto.base);
  watch_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

MoneroWatchKey::~MoneroWatchKey() {
  // @@protoc_insertion_point(destructor:hw.trezor.messages.monero.MoneroWatchKey)
  SharedDtor();
}

void MoneroWatchKey::SharedDtor() {
  watch_key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MoneroWatchKey::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MoneroWatchKey& MoneroWatchKey::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MoneroWatchKey_messages_2dmonero_2eproto.base);
  return *internal_default_instance();
}


void MoneroWatchKey::Clear() {
// @@protoc_insertion_point(message_clear_start:hw.trezor.messages.monero.MoneroWatchKey)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      watch_key_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      address_.ClearNonDefaultToEmptyNoArena();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MoneroWatchKey::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bytes watch_key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_watch_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes address = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MoneroWatchKey::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hw.trezor.messages.monero.MoneroWatchKey)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes watch_key = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_watch_key(), target);
  }

  // optional bytes address = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_address(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hw.trezor.messages.monero.MoneroWatchKey)
  return target;
}

size_t MoneroWatchKey::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hw.trezor.messages.monero.MoneroWatchKey)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional bytes watch_key = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_watch_key());
    }

    // optional bytes address = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_address());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MoneroWatchKey::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hw.trezor.messages.monero.MoneroWatchKey)
  GOOGLE_DCHECK_NE(&from, this);
  const MoneroWatchKey* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MoneroWatchKey>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hw.trezor.messages.monero.MoneroWatchKey)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hw.trezor.messages.monero.MoneroWatchKey)
    MergeFrom(*source);
  }
}

void MoneroWatchKey::MergeFrom(const MoneroWatchKey& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hw.trezor.messages.monero.MoneroWatchKey)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      watch_key_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.watch_key_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      address_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.address_);
    }
  }
}

void MoneroWatchKey::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hw.trezor.messages.monero.MoneroWatchKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MoneroWatchKey::CopyFrom(const MoneroWatchKey& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hw.trezor.messages.monero.MoneroWatchKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MoneroWatchKey::IsInitialized() const {
  return true;
}

void MoneroWatchKey::InternalSwap(MoneroWatchKey* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  watch_key_.Swap(&other->watch_key_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  address_.Swap(&other->address_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata MoneroWatchKey::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MoneroTransactionInitRequest_MoneroTransactionData::InitAsDefaultInstance() {
  ::hw::trezor::messages::monero::_MoneroTransactionInitRequest_MoneroTransactionData_default_instance_._instance.get_mutable()->change_dts_ = const_cast< ::hw::trezor::messages::monero::MoneroTransactionDestinationEntry*>(
      ::hw::trezor::messages::monero::MoneroTransactionDestinationEntry::internal_default_instance());
  ::hw::trezor::messages::monero::_MoneroTransactionInitRequest_MoneroTransactionData_default_instance_._instance.get_mutable()->rsig_data_ = const_cast< ::hw::trezor::messages::monero::MoneroTransactionRsigData*>(
      ::hw::trezor::messages::monero::MoneroTransactionRsigData::internal_default_instance());
}
class MoneroTransactionInitRequest_MoneroTransactionData::_Internal {
 public:
  using HasBits = decltype(std::declval<MoneroTransactionInitRequest_MoneroTransactionData>()._has_bits_);
  static void set_has_version(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_payment_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_unlock_time(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::hw::trezor::messages::monero::MoneroTransactionDestinationEntry& change_dts(const MoneroTransactionInitRequest_MoneroTransactionData* msg);
  static void set_has_change_dts(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_num_inputs(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_mixin(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_fee(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_account(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static const ::hw::trezor::messages::monero::MoneroTransactionRsigData& rsig_data(const MoneroTransactionInitRequest_MoneroTransactionData* msg);
  static void set_has_rsig_data(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_client_version(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_hard_fork(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_monero_version(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::hw::trezor::messages::monero::MoneroTransactionDestinationEntry&
MoneroTransactionInitRequest_MoneroTransactionData::_Internal::change_dts(const MoneroTransactionInitRequest_MoneroTransactionData* msg) {
  return *msg->change_dts_;
}
const ::hw::trezor::messages::monero::MoneroTransactionRsigData&
MoneroTransactionInitRequest_MoneroTransactionData::_Internal::rsig_data(const MoneroTransactionInitRequest_MoneroTransactionData* msg) {
  return *msg->rsig_data_;
}
MoneroTransactionInitRequest_MoneroTransactionData::MoneroTransactionInitRequest_MoneroTransactionData()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hw.trezor.messages.monero.MoneroTransactionInitRequest.MoneroTransactionData)
}
MoneroTransactionInitRequest_MoneroTransactionData::MoneroTransactionInitRequest_MoneroTransactionData(const MoneroTransactionInitRequest_MoneroTransactionData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      outputs_(from.outputs_),
      minor_indices_(from.minor_indices_),
      integrated_indices_(from.integrated_indices_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  payment_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_payment_id()) {
    payment_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.payment_id_);
  }
  monero_version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_monero_version()) {
    monero_version_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.monero_version_);
  }
  if (from._internal_has_change_dts()) {
    change_dts_ = new ::hw::trezor::messages::monero::MoneroTransactionDestinationEntry(*from.change_dts_);
  } else {
    change_dts_ = nullptr;
  }
  if (from._internal_has_rsig_data()) {
    rsig_data_ = new ::hw::trezor::messages::monero::MoneroTransactionRsigData(*from.rsig_data_);
  } else {
    rsig_data_ = nullptr;
  }
  ::memcpy(&unlock_time_, &from.unlock_time_,
    static_cast<size_t>(reinterpret_cast<char*>(&hard_fork_) -
    reinterpret_cast<char*>(&unlock_time_)) + sizeof(hard_fork_));
  // @@protoc_insertion_point(copy_constructor:hw.trezor.messages.monero.MoneroTransactionInitRequest.MoneroTransactionData)
}

void MoneroTransactionInitRequest_MoneroTransactionData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MoneroTransactionInitRequest_MoneroTransactionData_messages_2dmonero_2eproto.base);
  payment_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  monero_version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&change_dts_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&hard_fork_) -
      reinterpret_cast<char*>(&change_dts_)) + sizeof(hard_fork_));
}

MoneroTransactionInitRequest_MoneroTransactionData::~MoneroTransactionInitRequest_MoneroTransactionData() {
  // @@protoc_insertion_point(destructor:hw.trezor.messages.monero.MoneroTransactionInitRequest.MoneroTransactionData)
  SharedDtor();
}

void MoneroTransactionInitRequest_MoneroTransactionData::SharedDtor() {
  payment_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  monero_version_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete change_dts_;
  if (this != internal_default_instance()) delete rsig_data_;
}

void MoneroTransactionInitRequest_MoneroTransactionData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MoneroTransactionInitRequest_MoneroTransactionData& MoneroTransactionInitRequest_MoneroTransactionData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MoneroTransactionInitRequest_MoneroTransactionData_messages_2dmonero_2eproto.base);
  return *internal_default_instance();
}


void MoneroTransactionInitRequest_MoneroTransactionData::Clear() {
// @@protoc_insertion_point(message_clear_start:hw.trezor.messages.monero.MoneroTransactionInitRequest.MoneroTransactionData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  outputs_.Clear();
  minor_indices_.Clear();
  integrated_indices_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      payment_id_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      monero_version_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(change_dts_ != nullptr);
      change_dts_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(rsig_data_ != nullptr);
      rsig_data_->Clear();
    }
  }
  if (cached_has_bits & 0x000000f0u) {
    ::memset(&unlock_time_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&fee_) -
        reinterpret_cast<char*>(&unlock_time_)) + sizeof(fee_));
  }
  if (cached_has_bits & 0x00000f00u) {
    ::memset(&mixin_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&hard_fork_) -
        reinterpret_cast<char*>(&mixin_)) + sizeof(hard_fork_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MoneroTransactionInitRequest_MoneroTransactionData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 version = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_version(&has_bits);
          version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes payment_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_payment_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 unlock_time = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_unlock_time(&has_bits);
          unlock_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .hw.trezor.messages.monero.MoneroTransactionDestinationEntry outputs = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_outputs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // optional .hw.trezor.messages.monero.MoneroTransactionDestinationEntry change_dts = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_change_dts(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 num_inputs = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_num_inputs(&has_bits);
          num_inputs_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 mixin = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_mixin(&has_bits);
          mixin_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 fee = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_fee(&has_bits);
          fee_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 account = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_account(&has_bits);
          account_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 minor_indices = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_minor_indices(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<80>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_minor_indices(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .hw.trezor.messages.monero.MoneroTransactionRsigData rsig_data = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_rsig_data(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 integrated_indices = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_integrated_indices(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<96>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_integrated_indices(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 client_version = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          _Internal::set_has_client_version(&has_bits);
          client_version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 hard_fork = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          _Internal::set_has_hard_fork(&has_bits);
          hard_fork_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes monero_version = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          auto str = _internal_mutable_monero_version();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MoneroTransactionInitRequest_MoneroTransactionData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hw.trezor.messages.monero.MoneroTransactionInitRequest.MoneroTransactionData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 version = 1;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_version(), target);
  }

  // optional bytes payment_id = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_payment_id(), target);
  }

  // optional uint64 unlock_time = 3;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_unlock_time(), target);
  }

  // repeated .hw.trezor.messages.monero.MoneroTransactionDestinationEntry outputs = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_outputs_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_outputs(i), target, stream);
  }

  // optional .hw.trezor.messages.monero.MoneroTransactionDestinationEntry change_dts = 5;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::change_dts(this), target, stream);
  }

  // optional uint32 num_inputs = 6;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_num_inputs(), target);
  }

  // optional uint32 mixin = 7;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_mixin(), target);
  }

  // optional uint64 fee = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(8, this->_internal_fee(), target);
  }

  // optional uint32 account = 9;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(9, this->_internal_account(), target);
  }

  // repeated uint32 minor_indices = 10;
  for (int i = 0, n = this->_internal_minor_indices_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(10, this->_internal_minor_indices(i), target);
  }

  // optional .hw.trezor.messages.monero.MoneroTransactionRsigData rsig_data = 11;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        11, _Internal::rsig_data(this), target, stream);
  }

  // repeated uint32 integrated_indices = 12;
  for (int i = 0, n = this->_internal_integrated_indices_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(12, this->_internal_integrated_indices(i), target);
  }

  // optional uint32 client_version = 13;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(13, this->_internal_client_version(), target);
  }

  // optional uint32 hard_fork = 14;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(14, this->_internal_hard_fork(), target);
  }

  // optional bytes monero_version = 15;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteBytesMaybeAliased(
        15, this->_internal_monero_version(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hw.trezor.messages.monero.MoneroTransactionInitRequest.MoneroTransactionData)
  return target;
}

size_t MoneroTransactionInitRequest_MoneroTransactionData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hw.trezor.messages.monero.MoneroTransactionInitRequest.MoneroTransactionData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .hw.trezor.messages.monero.MoneroTransactionDestinationEntry outputs = 4;
  total_size += 1UL * this->_internal_outputs_size();
  for (const auto& msg : this->outputs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated uint32 minor_indices = 10;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->minor_indices_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_minor_indices_size());
    total_size += data_size;
  }

  // repeated uint32 integrated_indices = 12;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->integrated_indices_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_integrated_indices_size());
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional bytes payment_id = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_payment_id());
    }

    // optional bytes monero_version = 15;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_monero_version());
    }

    // optional .hw.trezor.messages.monero.MoneroTransactionDestinationEntry change_dts = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *change_dts_);
    }

    // optional .hw.trezor.messages.monero.MoneroTransactionRsigData rsig_data = 11;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *rsig_data_);
    }

    // optional uint64 unlock_time = 3;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_unlock_time());
    }

    // optional uint32 version = 1;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_version());
    }

    // optional uint32 num_inputs = 6;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_num_inputs());
    }

    // optional uint64 fee = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_fee());
    }

  }
  if (cached_has_bits & 0x00000f00u) {
    // optional uint32 mixin = 7;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_mixin());
    }

    // optional uint32 account = 9;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_account());
    }

    // optional uint32 client_version = 13;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_client_version());
    }

    // optional uint32 hard_fork = 14;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_hard_fork());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MoneroTransactionInitRequest_MoneroTransactionData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hw.trezor.messages.monero.MoneroTransactionInitRequest.MoneroTransactionData)
  GOOGLE_DCHECK_NE(&from, this);
  const MoneroTransactionInitRequest_MoneroTransactionData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MoneroTransactionInitRequest_MoneroTransactionData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hw.trezor.messages.monero.MoneroTransactionInitRequest.MoneroTransactionData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hw.trezor.messages.monero.MoneroTransactionInitRequest.MoneroTransactionData)
    MergeFrom(*source);
  }
}

void MoneroTransactionInitRequest_MoneroTransactionData::MergeFrom(const MoneroTransactionInitRequest_MoneroTransactionData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hw.trezor.messages.monero.MoneroTransactionInitRequest.MoneroTransactionData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  outputs_.MergeFrom(from.outputs_);
  minor_indices_.MergeFrom(from.minor_indices_);
  integrated_indices_.MergeFrom(from.integrated_indices_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      payment_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.payment_id_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      monero_version_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.monero_version_);
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_change_dts()->::hw::trezor::messages::monero::MoneroTransactionDestinationEntry::MergeFrom(from._internal_change_dts());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_rsig_data()->::hw::trezor::messages::monero::MoneroTransactionRsigData::MergeFrom(from._internal_rsig_data());
    }
    if (cached_has_bits & 0x00000010u) {
      unlock_time_ = from.unlock_time_;
    }
    if (cached_has_bits & 0x00000020u) {
      version_ = from.version_;
    }
    if (cached_has_bits & 0x00000040u) {
      num_inputs_ = from.num_inputs_;
    }
    if (cached_has_bits & 0x00000080u) {
      fee_ = from.fee_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000f00u) {
    if (cached_has_bits & 0x00000100u) {
      mixin_ = from.mixin_;
    }
    if (cached_has_bits & 0x00000200u) {
      account_ = from.account_;
    }
    if (cached_has_bits & 0x00000400u) {
      client_version_ = from.client_version_;
    }
    if (cached_has_bits & 0x00000800u) {
      hard_fork_ = from.hard_fork_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MoneroTransactionInitRequest_MoneroTransactionData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hw.trezor.messages.monero.MoneroTransactionInitRequest.MoneroTransactionData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MoneroTransactionInitRequest_MoneroTransactionData::CopyFrom(const MoneroTransactionInitRequest_MoneroTransactionData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hw.trezor.messages.monero.MoneroTransactionInitRequest.MoneroTransactionData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MoneroTransactionInitRequest_MoneroTransactionData::IsInitialized() const {
  return true;
}

void MoneroTransactionInitRequest_MoneroTransactionData::InternalSwap(MoneroTransactionInitRequest_MoneroTransactionData* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  outputs_.InternalSwap(&other->outputs_);
  minor_indices_.InternalSwap(&other->minor_indices_);
  integrated_indices_.InternalSwap(&other->integrated_indices_);
  payment_id_.Swap(&other->payment_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  monero_version_.Swap(&other->monero_version_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(change_dts_, other->change_dts_);
  swap(rsig_data_, other->rsig_data_);
  swap(unlock_time_, other->unlock_time_);
  swap(version_, other->version_);
  swap(num_inputs_, other->num_inputs_);
  swap(fee_, other->fee_);
  swap(mixin_, other->mixin_);
  swap(account_, other->account_);
  swap(client_version_, other->client_version_);
  swap(hard_fork_, other->hard_fork_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MoneroTransactionInitRequest_MoneroTransactionData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MoneroTransactionInitRequest::InitAsDefaultInstance() {
  ::hw::trezor::messages::monero::_MoneroTransactionInitRequest_default_instance_._instance.get_mutable()->tsx_data_ = const_cast< ::hw::trezor::messages::monero::MoneroTransactionInitRequest_MoneroTransactionData*>(
      ::hw::trezor::messages::monero::MoneroTransactionInitRequest_MoneroTransactionData::internal_default_instance());
}
class MoneroTransactionInitRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<MoneroTransactionInitRequest>()._has_bits_);
  static void set_has_version(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_network_type(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::hw::trezor::messages::monero::MoneroTransactionInitRequest_MoneroTransactionData& tsx_data(const MoneroTransactionInitRequest* msg);
  static void set_has_tsx_data(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::hw::trezor::messages::monero::MoneroTransactionInitRequest_MoneroTransactionData&
MoneroTransactionInitRequest::_Internal::tsx_data(const MoneroTransactionInitRequest* msg) {
  return *msg->tsx_data_;
}
MoneroTransactionInitRequest::MoneroTransactionInitRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hw.trezor.messages.monero.MoneroTransactionInitRequest)
}
MoneroTransactionInitRequest::MoneroTransactionInitRequest(const MoneroTransactionInitRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      address_n_(from.address_n_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_tsx_data()) {
    tsx_data_ = new ::hw::trezor::messages::monero::MoneroTransactionInitRequest_MoneroTransactionData(*from.tsx_data_);
  } else {
    tsx_data_ = nullptr;
  }
  ::memcpy(&version_, &from.version_,
    static_cast<size_t>(reinterpret_cast<char*>(&network_type_) -
    reinterpret_cast<char*>(&version_)) + sizeof(network_type_));
  // @@protoc_insertion_point(copy_constructor:hw.trezor.messages.monero.MoneroTransactionInitRequest)
}

void MoneroTransactionInitRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MoneroTransactionInitRequest_messages_2dmonero_2eproto.base);
  ::memset(&tsx_data_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&network_type_) -
      reinterpret_cast<char*>(&tsx_data_)) + sizeof(network_type_));
}

MoneroTransactionInitRequest::~MoneroTransactionInitRequest() {
  // @@protoc_insertion_point(destructor:hw.trezor.messages.monero.MoneroTransactionInitRequest)
  SharedDtor();
}

void MoneroTransactionInitRequest::SharedDtor() {
  if (this != internal_default_instance()) delete tsx_data_;
}

void MoneroTransactionInitRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MoneroTransactionInitRequest& MoneroTransactionInitRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MoneroTransactionInitRequest_messages_2dmonero_2eproto.base);
  return *internal_default_instance();
}


void MoneroTransactionInitRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:hw.trezor.messages.monero.MoneroTransactionInitRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  address_n_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(tsx_data_ != nullptr);
    tsx_data_->Clear();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&version_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&network_type_) -
        reinterpret_cast<char*>(&version_)) + sizeof(network_type_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MoneroTransactionInitRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 version = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_version(&has_bits);
          version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 address_n = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_address_n(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<16>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_address_n(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 network_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_network_type(&has_bits);
          network_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .hw.trezor.messages.monero.MoneroTransactionInitRequest.MoneroTransactionData tsx_data = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_tsx_data(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MoneroTransactionInitRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hw.trezor.messages.monero.MoneroTransactionInitRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 version = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_version(), target);
  }

  // repeated uint32 address_n = 2;
  for (int i = 0, n = this->_internal_address_n_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_address_n(i), target);
  }

  // optional uint32 network_type = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_network_type(), target);
  }

  // optional .hw.trezor.messages.monero.MoneroTransactionInitRequest.MoneroTransactionData tsx_data = 4;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::tsx_data(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hw.trezor.messages.monero.MoneroTransactionInitRequest)
  return target;
}

size_t MoneroTransactionInitRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hw.trezor.messages.monero.MoneroTransactionInitRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 address_n = 2;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->address_n_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_address_n_size());
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .hw.trezor.messages.monero.MoneroTransactionInitRequest.MoneroTransactionData tsx_data = 4;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *tsx_data_);
    }

    // optional uint32 version = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_version());
    }

    // optional uint32 network_type = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_network_type());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MoneroTransactionInitRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hw.trezor.messages.monero.MoneroTransactionInitRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const MoneroTransactionInitRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MoneroTransactionInitRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hw.trezor.messages.monero.MoneroTransactionInitRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hw.trezor.messages.monero.MoneroTransactionInitRequest)
    MergeFrom(*source);
  }
}

void MoneroTransactionInitRequest::MergeFrom(const MoneroTransactionInitRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hw.trezor.messages.monero.MoneroTransactionInitRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  address_n_.MergeFrom(from.address_n_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_tsx_data()->::hw::trezor::messages::monero::MoneroTransactionInitRequest_MoneroTransactionData::MergeFrom(from._internal_tsx_data());
    }
    if (cached_has_bits & 0x00000002u) {
      version_ = from.version_;
    }
    if (cached_has_bits & 0x00000004u) {
      network_type_ = from.network_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MoneroTransactionInitRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hw.trezor.messages.monero.MoneroTransactionInitRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MoneroTransactionInitRequest::CopyFrom(const MoneroTransactionInitRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hw.trezor.messages.monero.MoneroTransactionInitRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MoneroTransactionInitRequest::IsInitialized() const {
  return true;
}

void MoneroTransactionInitRequest::InternalSwap(MoneroTransactionInitRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  address_n_.InternalSwap(&other->address_n_);
  swap(tsx_data_, other->tsx_data_);
  swap(version_, other->version_);
  swap(network_type_, other->network_type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MoneroTransactionInitRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MoneroTransactionInitAck::InitAsDefaultInstance() {
  ::hw::trezor::messages::monero::_MoneroTransactionInitAck_default_instance_._instance.get_mutable()->rsig_data_ = const_cast< ::hw::trezor::messages::monero::MoneroTransactionRsigData*>(
      ::hw::trezor::messages::monero::MoneroTransactionRsigData::internal_default_instance());
}
class MoneroTransactionInitAck::_Internal {
 public:
  using HasBits = decltype(std::declval<MoneroTransactionInitAck>()._has_bits_);
  static const ::hw::trezor::messages::monero::MoneroTransactionRsigData& rsig_data(const MoneroTransactionInitAck* msg);
  static void set_has_rsig_data(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::hw::trezor::messages::monero::MoneroTransactionRsigData&
MoneroTransactionInitAck::_Internal::rsig_data(const MoneroTransactionInitAck* msg) {
  return *msg->rsig_data_;
}
MoneroTransactionInitAck::MoneroTransactionInitAck()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hw.trezor.messages.monero.MoneroTransactionInitAck)
}
MoneroTransactionInitAck::MoneroTransactionInitAck(const MoneroTransactionInitAck& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      hmacs_(from.hmacs_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_rsig_data()) {
    rsig_data_ = new ::hw::trezor::messages::monero::MoneroTransactionRsigData(*from.rsig_data_);
  } else {
    rsig_data_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:hw.trezor.messages.monero.MoneroTransactionInitAck)
}

void MoneroTransactionInitAck::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MoneroTransactionInitAck_messages_2dmonero_2eproto.base);
  rsig_data_ = nullptr;
}

MoneroTransactionInitAck::~MoneroTransactionInitAck() {
  // @@protoc_insertion_point(destructor:hw.trezor.messages.monero.MoneroTransactionInitAck)
  SharedDtor();
}

void MoneroTransactionInitAck::SharedDtor() {
  if (this != internal_default_instance()) delete rsig_data_;
}

void MoneroTransactionInitAck::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MoneroTransactionInitAck& MoneroTransactionInitAck::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MoneroTransactionInitAck_messages_2dmonero_2eproto.base);
  return *internal_default_instance();
}


void MoneroTransactionInitAck::Clear() {
// @@protoc_insertion_point(message_clear_start:hw.trezor.messages.monero.MoneroTransactionInitAck)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  hmacs_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(rsig_data_ != nullptr);
    rsig_data_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MoneroTransactionInitAck::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated bytes hmacs = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_hmacs();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // optional .hw.trezor.messages.monero.MoneroTransactionRsigData rsig_data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_rsig_data(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MoneroTransactionInitAck::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hw.trezor.messages.monero.MoneroTransactionInitAck)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated bytes hmacs = 1;
  for (int i = 0, n = this->_internal_hmacs_size(); i < n; i++) {
    const auto& s = this->_internal_hmacs(i);
    target = stream->WriteBytes(1, s, target);
  }

  cached_has_bits = _has_bits_[0];
  // optional .hw.trezor.messages.monero.MoneroTransactionRsigData rsig_data = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::rsig_data(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hw.trezor.messages.monero.MoneroTransactionInitAck)
  return target;
}

size_t MoneroTransactionInitAck::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hw.trezor.messages.monero.MoneroTransactionInitAck)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated bytes hmacs = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(hmacs_.size());
  for (int i = 0, n = hmacs_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
      hmacs_.Get(i));
  }

  // optional .hw.trezor.messages.monero.MoneroTransactionRsigData rsig_data = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *rsig_data_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MoneroTransactionInitAck::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hw.trezor.messages.monero.MoneroTransactionInitAck)
  GOOGLE_DCHECK_NE(&from, this);
  const MoneroTransactionInitAck* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MoneroTransactionInitAck>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hw.trezor.messages.monero.MoneroTransactionInitAck)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hw.trezor.messages.monero.MoneroTransactionInitAck)
    MergeFrom(*source);
  }
}

void MoneroTransactionInitAck::MergeFrom(const MoneroTransactionInitAck& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hw.trezor.messages.monero.MoneroTransactionInitAck)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  hmacs_.MergeFrom(from.hmacs_);
  if (from._internal_has_rsig_data()) {
    _internal_mutable_rsig_data()->::hw::trezor::messages::monero::MoneroTransactionRsigData::MergeFrom(from._internal_rsig_data());
  }
}

void MoneroTransactionInitAck::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hw.trezor.messages.monero.MoneroTransactionInitAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MoneroTransactionInitAck::CopyFrom(const MoneroTransactionInitAck& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hw.trezor.messages.monero.MoneroTransactionInitAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MoneroTransactionInitAck::IsInitialized() const {
  return true;
}

void MoneroTransactionInitAck::InternalSwap(MoneroTransactionInitAck* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  hmacs_.InternalSwap(&other->hmacs_);
  swap(rsig_data_, other->rsig_data_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MoneroTransactionInitAck::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MoneroTransactionSetInputRequest::InitAsDefaultInstance() {
  ::hw::trezor::messages::monero::_MoneroTransactionSetInputRequest_default_instance_._instance.get_mutable()->src_entr_ = const_cast< ::hw::trezor::messages::monero::MoneroTransactionSourceEntry*>(
      ::hw::trezor::messages::monero::MoneroTransactionSourceEntry::internal_default_instance());
}
class MoneroTransactionSetInputRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<MoneroTransactionSetInputRequest>()._has_bits_);
  static const ::hw::trezor::messages::monero::MoneroTransactionSourceEntry& src_entr(const MoneroTransactionSetInputRequest* msg);
  static void set_has_src_entr(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::hw::trezor::messages::monero::MoneroTransactionSourceEntry&
MoneroTransactionSetInputRequest::_Internal::src_entr(const MoneroTransactionSetInputRequest* msg) {
  return *msg->src_entr_;
}
MoneroTransactionSetInputRequest::MoneroTransactionSetInputRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hw.trezor.messages.monero.MoneroTransactionSetInputRequest)
}
MoneroTransactionSetInputRequest::MoneroTransactionSetInputRequest(const MoneroTransactionSetInputRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_src_entr()) {
    src_entr_ = new ::hw::trezor::messages::monero::MoneroTransactionSourceEntry(*from.src_entr_);
  } else {
    src_entr_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:hw.trezor.messages.monero.MoneroTransactionSetInputRequest)
}

void MoneroTransactionSetInputRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MoneroTransactionSetInputRequest_messages_2dmonero_2eproto.base);
  src_entr_ = nullptr;
}

MoneroTransactionSetInputRequest::~MoneroTransactionSetInputRequest() {
  // @@protoc_insertion_point(destructor:hw.trezor.messages.monero.MoneroTransactionSetInputRequest)
  SharedDtor();
}

void MoneroTransactionSetInputRequest::SharedDtor() {
  if (this != internal_default_instance()) delete src_entr_;
}

void MoneroTransactionSetInputRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MoneroTransactionSetInputRequest& MoneroTransactionSetInputRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MoneroTransactionSetInputRequest_messages_2dmonero_2eproto.base);
  return *internal_default_instance();
}


void MoneroTransactionSetInputRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:hw.trezor.messages.monero.MoneroTransactionSetInputRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(src_entr_ != nullptr);
    src_entr_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MoneroTransactionSetInputRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .hw.trezor.messages.monero.MoneroTransactionSourceEntry src_entr = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_src_entr(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MoneroTransactionSetInputRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hw.trezor.messages.monero.MoneroTransactionSetInputRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .hw.trezor.messages.monero.MoneroTransactionSourceEntry src_entr = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::src_entr(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hw.trezor.messages.monero.MoneroTransactionSetInputRequest)
  return target;
}

size_t MoneroTransactionSetInputRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hw.trezor.messages.monero.MoneroTransactionSetInputRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .hw.trezor.messages.monero.MoneroTransactionSourceEntry src_entr = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *src_entr_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MoneroTransactionSetInputRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hw.trezor.messages.monero.MoneroTransactionSetInputRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const MoneroTransactionSetInputRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MoneroTransactionSetInputRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hw.trezor.messages.monero.MoneroTransactionSetInputRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hw.trezor.messages.monero.MoneroTransactionSetInputRequest)
    MergeFrom(*source);
  }
}

void MoneroTransactionSetInputRequest::MergeFrom(const MoneroTransactionSetInputRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hw.trezor.messages.monero.MoneroTransactionSetInputRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_src_entr()) {
    _internal_mutable_src_entr()->::hw::trezor::messages::monero::MoneroTransactionSourceEntry::MergeFrom(from._internal_src_entr());
  }
}

void MoneroTransactionSetInputRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hw.trezor.messages.monero.MoneroTransactionSetInputRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MoneroTransactionSetInputRequest::CopyFrom(const MoneroTransactionSetInputRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hw.trezor.messages.monero.MoneroTransactionSetInputRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MoneroTransactionSetInputRequest::IsInitialized() const {
  return true;
}

void MoneroTransactionSetInputRequest::InternalSwap(MoneroTransactionSetInputRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(src_entr_, other->src_entr_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MoneroTransactionSetInputRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MoneroTransactionSetInputAck::InitAsDefaultInstance() {
}
class MoneroTransactionSetInputAck::_Internal {
 public:
  using HasBits = decltype(std::declval<MoneroTransactionSetInputAck>()._has_bits_);
  static void set_has_vini(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_vini_hmac(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_pseudo_out(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_pseudo_out_hmac(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_pseudo_out_alpha(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_spend_key(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

MoneroTransactionSetInputAck::MoneroTransactionSetInputAck()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hw.trezor.messages.monero.MoneroTransactionSetInputAck)
}
MoneroTransactionSetInputAck::MoneroTransactionSetInputAck(const MoneroTransactionSetInputAck& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  vini_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_vini()) {
    vini_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.vini_);
  }
  vini_hmac_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_vini_hmac()) {
    vini_hmac_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.vini_hmac_);
  }
  pseudo_out_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_pseudo_out()) {
    pseudo_out_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.pseudo_out_);
  }
  pseudo_out_hmac_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_pseudo_out_hmac()) {
    pseudo_out_hmac_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.pseudo_out_hmac_);
  }
  pseudo_out_alpha_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_pseudo_out_alpha()) {
    pseudo_out_alpha_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.pseudo_out_alpha_);
  }
  spend_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_spend_key()) {
    spend_key_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.spend_key_);
  }
  // @@protoc_insertion_point(copy_constructor:hw.trezor.messages.monero.MoneroTransactionSetInputAck)
}

void MoneroTransactionSetInputAck::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MoneroTransactionSetInputAck_messages_2dmonero_2eproto.base);
  vini_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  vini_hmac_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  pseudo_out_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  pseudo_out_hmac_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  pseudo_out_alpha_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  spend_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

MoneroTransactionSetInputAck::~MoneroTransactionSetInputAck() {
  // @@protoc_insertion_point(destructor:hw.trezor.messages.monero.MoneroTransactionSetInputAck)
  SharedDtor();
}

void MoneroTransactionSetInputAck::SharedDtor() {
  vini_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  vini_hmac_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  pseudo_out_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  pseudo_out_hmac_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  pseudo_out_alpha_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  spend_key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MoneroTransactionSetInputAck::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MoneroTransactionSetInputAck& MoneroTransactionSetInputAck::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MoneroTransactionSetInputAck_messages_2dmonero_2eproto.base);
  return *internal_default_instance();
}


void MoneroTransactionSetInputAck::Clear() {
// @@protoc_insertion_point(message_clear_start:hw.trezor.messages.monero.MoneroTransactionSetInputAck)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      vini_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      vini_hmac_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      pseudo_out_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000008u) {
      pseudo_out_hmac_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000010u) {
      pseudo_out_alpha_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000020u) {
      spend_key_.ClearNonDefaultToEmptyNoArena();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MoneroTransactionSetInputAck::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bytes vini = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_vini();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes vini_hmac = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_vini_hmac();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes pseudo_out = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_pseudo_out();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes pseudo_out_hmac = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_pseudo_out_hmac();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes pseudo_out_alpha = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_pseudo_out_alpha();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes spend_key = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_spend_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MoneroTransactionSetInputAck::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hw.trezor.messages.monero.MoneroTransactionSetInputAck)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes vini = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_vini(), target);
  }

  // optional bytes vini_hmac = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_vini_hmac(), target);
  }

  // optional bytes pseudo_out = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_pseudo_out(), target);
  }

  // optional bytes pseudo_out_hmac = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_pseudo_out_hmac(), target);
  }

  // optional bytes pseudo_out_alpha = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->WriteBytesMaybeAliased(
        5, this->_internal_pseudo_out_alpha(), target);
  }

  // optional bytes spend_key = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->WriteBytesMaybeAliased(
        6, this->_internal_spend_key(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hw.trezor.messages.monero.MoneroTransactionSetInputAck)
  return target;
}

size_t MoneroTransactionSetInputAck::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hw.trezor.messages.monero.MoneroTransactionSetInputAck)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional bytes vini = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_vini());
    }

    // optional bytes vini_hmac = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_vini_hmac());
    }

    // optional bytes pseudo_out = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_pseudo_out());
    }

    // optional bytes pseudo_out_hmac = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_pseudo_out_hmac());
    }

    // optional bytes pseudo_out_alpha = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_pseudo_out_alpha());
    }

    // optional bytes spend_key = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_spend_key());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MoneroTransactionSetInputAck::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hw.trezor.messages.monero.MoneroTransactionSetInputAck)
  GOOGLE_DCHECK_NE(&from, this);
  const MoneroTransactionSetInputAck* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MoneroTransactionSetInputAck>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hw.trezor.messages.monero.MoneroTransactionSetInputAck)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hw.trezor.messages.monero.MoneroTransactionSetInputAck)
    MergeFrom(*source);
  }
}

void MoneroTransactionSetInputAck::MergeFrom(const MoneroTransactionSetInputAck& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hw.trezor.messages.monero.MoneroTransactionSetInputAck)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      vini_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.vini_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      vini_hmac_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.vini_hmac_);
    }
    if (cached_has_bits & 0x00000004u) {
      _has_bits_[0] |= 0x00000004u;
      pseudo_out_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.pseudo_out_);
    }
    if (cached_has_bits & 0x00000008u) {
      _has_bits_[0] |= 0x00000008u;
      pseudo_out_hmac_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.pseudo_out_hmac_);
    }
    if (cached_has_bits & 0x00000010u) {
      _has_bits_[0] |= 0x00000010u;
      pseudo_out_alpha_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.pseudo_out_alpha_);
    }
    if (cached_has_bits & 0x00000020u) {
      _has_bits_[0] |= 0x00000020u;
      spend_key_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.spend_key_);
    }
  }
}

void MoneroTransactionSetInputAck::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hw.trezor.messages.monero.MoneroTransactionSetInputAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MoneroTransactionSetInputAck::CopyFrom(const MoneroTransactionSetInputAck& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hw.trezor.messages.monero.MoneroTransactionSetInputAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MoneroTransactionSetInputAck::IsInitialized() const {
  return true;
}

void MoneroTransactionSetInputAck::InternalSwap(MoneroTransactionSetInputAck* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  vini_.Swap(&other->vini_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  vini_hmac_.Swap(&other->vini_hmac_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  pseudo_out_.Swap(&other->pseudo_out_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  pseudo_out_hmac_.Swap(&other->pseudo_out_hmac_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  pseudo_out_alpha_.Swap(&other->pseudo_out_alpha_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  spend_key_.Swap(&other->spend_key_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata MoneroTransactionSetInputAck::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MoneroTransactionInputsPermutationRequest::InitAsDefaultInstance() {
}
class MoneroTransactionInputsPermutationRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<MoneroTransactionInputsPermutationRequest>()._has_bits_);
};

MoneroTransactionInputsPermutationRequest::MoneroTransactionInputsPermutationRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hw.trezor.messages.monero.MoneroTransactionInputsPermutationRequest)
}
MoneroTransactionInputsPermutationRequest::MoneroTransactionInputsPermutationRequest(const MoneroTransactionInputsPermutationRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      perm_(from.perm_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:hw.trezor.messages.monero.MoneroTransactionInputsPermutationRequest)
}

void MoneroTransactionInputsPermutationRequest::SharedCtor() {
}

MoneroTransactionInputsPermutationRequest::~MoneroTransactionInputsPermutationRequest() {
  // @@protoc_insertion_point(destructor:hw.trezor.messages.monero.MoneroTransactionInputsPermutationRequest)
  SharedDtor();
}

void MoneroTransactionInputsPermutationRequest::SharedDtor() {
}

void MoneroTransactionInputsPermutationRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MoneroTransactionInputsPermutationRequest& MoneroTransactionInputsPermutationRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MoneroTransactionInputsPermutationRequest_messages_2dmonero_2eproto.base);
  return *internal_default_instance();
}


void MoneroTransactionInputsPermutationRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:hw.trezor.messages.monero.MoneroTransactionInputsPermutationRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  perm_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MoneroTransactionInputsPermutationRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated uint32 perm = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_perm(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<8>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_perm(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MoneroTransactionInputsPermutationRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hw.trezor.messages.monero.MoneroTransactionInputsPermutationRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 perm = 1;
  for (int i = 0, n = this->_internal_perm_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_perm(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hw.trezor.messages.monero.MoneroTransactionInputsPermutationRequest)
  return target;
}

size_t MoneroTransactionInputsPermutationRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hw.trezor.messages.monero.MoneroTransactionInputsPermutationRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 perm = 1;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->perm_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_perm_size());
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MoneroTransactionInputsPermutationRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hw.trezor.messages.monero.MoneroTransactionInputsPermutationRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const MoneroTransactionInputsPermutationRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MoneroTransactionInputsPermutationRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hw.trezor.messages.monero.MoneroTransactionInputsPermutationRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hw.trezor.messages.monero.MoneroTransactionInputsPermutationRequest)
    MergeFrom(*source);
  }
}

void MoneroTransactionInputsPermutationRequest::MergeFrom(const MoneroTransactionInputsPermutationRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hw.trezor.messages.monero.MoneroTransactionInputsPermutationRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  perm_.MergeFrom(from.perm_);
}

void MoneroTransactionInputsPermutationRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hw.trezor.messages.monero.MoneroTransactionInputsPermutationRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MoneroTransactionInputsPermutationRequest::CopyFrom(const MoneroTransactionInputsPermutationRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hw.trezor.messages.monero.MoneroTransactionInputsPermutationRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MoneroTransactionInputsPermutationRequest::IsInitialized() const {
  return true;
}

void MoneroTransactionInputsPermutationRequest::InternalSwap(MoneroTransactionInputsPermutationRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  perm_.InternalSwap(&other->perm_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MoneroTransactionInputsPermutationRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MoneroTransactionInputsPermutationAck::InitAsDefaultInstance() {
}
class MoneroTransactionInputsPermutationAck::_Internal {
 public:
  using HasBits = decltype(std::declval<MoneroTransactionInputsPermutationAck>()._has_bits_);
};

MoneroTransactionInputsPermutationAck::MoneroTransactionInputsPermutationAck()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hw.trezor.messages.monero.MoneroTransactionInputsPermutationAck)
}
MoneroTransactionInputsPermutationAck::MoneroTransactionInputsPermutationAck(const MoneroTransactionInputsPermutationAck& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:hw.trezor.messages.monero.MoneroTransactionInputsPermutationAck)
}

void MoneroTransactionInputsPermutationAck::SharedCtor() {
}

MoneroTransactionInputsPermutationAck::~MoneroTransactionInputsPermutationAck() {
  // @@protoc_insertion_point(destructor:hw.trezor.messages.monero.MoneroTransactionInputsPermutationAck)
  SharedDtor();
}

void MoneroTransactionInputsPermutationAck::SharedDtor() {
}

void MoneroTransactionInputsPermutationAck::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MoneroTransactionInputsPermutationAck& MoneroTransactionInputsPermutationAck::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MoneroTransactionInputsPermutationAck_messages_2dmonero_2eproto.base);
  return *internal_default_instance();
}


void MoneroTransactionInputsPermutationAck::Clear() {
// @@protoc_insertion_point(message_clear_start:hw.trezor.messages.monero.MoneroTransactionInputsPermutationAck)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MoneroTransactionInputsPermutationAck::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MoneroTransactionInputsPermutationAck::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hw.trezor.messages.monero.MoneroTransactionInputsPermutationAck)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hw.trezor.messages.monero.MoneroTransactionInputsPermutationAck)
  return target;
}

size_t MoneroTransactionInputsPermutationAck::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hw.trezor.messages.monero.MoneroTransactionInputsPermutationAck)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MoneroTransactionInputsPermutationAck::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hw.trezor.messages.monero.MoneroTransactionInputsPermutationAck)
  GOOGLE_DCHECK_NE(&from, this);
  const MoneroTransactionInputsPermutationAck* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MoneroTransactionInputsPermutationAck>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hw.trezor.messages.monero.MoneroTransactionInputsPermutationAck)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hw.trezor.messages.monero.MoneroTransactionInputsPermutationAck)
    MergeFrom(*source);
  }
}

void MoneroTransactionInputsPermutationAck::MergeFrom(const MoneroTransactionInputsPermutationAck& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hw.trezor.messages.monero.MoneroTransactionInputsPermutationAck)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void MoneroTransactionInputsPermutationAck::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hw.trezor.messages.monero.MoneroTransactionInputsPermutationAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MoneroTransactionInputsPermutationAck::CopyFrom(const MoneroTransactionInputsPermutationAck& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hw.trezor.messages.monero.MoneroTransactionInputsPermutationAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MoneroTransactionInputsPermutationAck::IsInitialized() const {
  return true;
}

void MoneroTransactionInputsPermutationAck::InternalSwap(MoneroTransactionInputsPermutationAck* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata MoneroTransactionInputsPermutationAck::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MoneroTransactionInputViniRequest::InitAsDefaultInstance() {
  ::hw::trezor::messages::monero::_MoneroTransactionInputViniRequest_default_instance_._instance.get_mutable()->src_entr_ = const_cast< ::hw::trezor::messages::monero::MoneroTransactionSourceEntry*>(
      ::hw::trezor::messages::monero::MoneroTransactionSourceEntry::internal_default_instance());
}
class MoneroTransactionInputViniRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<MoneroTransactionInputViniRequest>()._has_bits_);
  static const ::hw::trezor::messages::monero::MoneroTransactionSourceEntry& src_entr(const MoneroTransactionInputViniRequest* msg);
  static void set_has_src_entr(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_vini(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_vini_hmac(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_pseudo_out(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_pseudo_out_hmac(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_orig_idx(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

const ::hw::trezor::messages::monero::MoneroTransactionSourceEntry&
MoneroTransactionInputViniRequest::_Internal::src_entr(const MoneroTransactionInputViniRequest* msg) {
  return *msg->src_entr_;
}
MoneroTransactionInputViniRequest::MoneroTransactionInputViniRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hw.trezor.messages.monero.MoneroTransactionInputViniRequest)
}
MoneroTransactionInputViniRequest::MoneroTransactionInputViniRequest(const MoneroTransactionInputViniRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  vini_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_vini()) {
    vini_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.vini_);
  }
  vini_hmac_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_vini_hmac()) {
    vini_hmac_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.vini_hmac_);
  }
  pseudo_out_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_pseudo_out()) {
    pseudo_out_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.pseudo_out_);
  }
  pseudo_out_hmac_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_pseudo_out_hmac()) {
    pseudo_out_hmac_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.pseudo_out_hmac_);
  }
  if (from._internal_has_src_entr()) {
    src_entr_ = new ::hw::trezor::messages::monero::MoneroTransactionSourceEntry(*from.src_entr_);
  } else {
    src_entr_ = nullptr;
  }
  orig_idx_ = from.orig_idx_;
  // @@protoc_insertion_point(copy_constructor:hw.trezor.messages.monero.MoneroTransactionInputViniRequest)
}

void MoneroTransactionInputViniRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MoneroTransactionInputViniRequest_messages_2dmonero_2eproto.base);
  vini_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  vini_hmac_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  pseudo_out_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  pseudo_out_hmac_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&src_entr_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&orig_idx_) -
      reinterpret_cast<char*>(&src_entr_)) + sizeof(orig_idx_));
}

MoneroTransactionInputViniRequest::~MoneroTransactionInputViniRequest() {
  // @@protoc_insertion_point(destructor:hw.trezor.messages.monero.MoneroTransactionInputViniRequest)
  SharedDtor();
}

void MoneroTransactionInputViniRequest::SharedDtor() {
  vini_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  vini_hmac_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  pseudo_out_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  pseudo_out_hmac_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete src_entr_;
}

void MoneroTransactionInputViniRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MoneroTransactionInputViniRequest& MoneroTransactionInputViniRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MoneroTransactionInputViniRequest_messages_2dmonero_2eproto.base);
  return *internal_default_instance();
}


void MoneroTransactionInputViniRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:hw.trezor.messages.monero.MoneroTransactionInputViniRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      vini_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      vini_hmac_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      pseudo_out_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000008u) {
      pseudo_out_hmac_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(src_entr_ != nullptr);
      src_entr_->Clear();
    }
  }
  orig_idx_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MoneroTransactionInputViniRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .hw.trezor.messages.monero.MoneroTransactionSourceEntry src_entr = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_src_entr(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes vini = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_vini();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes vini_hmac = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_vini_hmac();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes pseudo_out = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_pseudo_out();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes pseudo_out_hmac = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_pseudo_out_hmac();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 orig_idx = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_orig_idx(&has_bits);
          orig_idx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MoneroTransactionInputViniRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hw.trezor.messages.monero.MoneroTransactionInputViniRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .hw.trezor.messages.monero.MoneroTransactionSourceEntry src_entr = 1;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::src_entr(this), target, stream);
  }

  // optional bytes vini = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_vini(), target);
  }

  // optional bytes vini_hmac = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_vini_hmac(), target);
  }

  // optional bytes pseudo_out = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_pseudo_out(), target);
  }

  // optional bytes pseudo_out_hmac = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->WriteBytesMaybeAliased(
        5, this->_internal_pseudo_out_hmac(), target);
  }

  // optional uint32 orig_idx = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_orig_idx(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hw.trezor.messages.monero.MoneroTransactionInputViniRequest)
  return target;
}

size_t MoneroTransactionInputViniRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hw.trezor.messages.monero.MoneroTransactionInputViniRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional bytes vini = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_vini());
    }

    // optional bytes vini_hmac = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_vini_hmac());
    }

    // optional bytes pseudo_out = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_pseudo_out());
    }

    // optional bytes pseudo_out_hmac = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_pseudo_out_hmac());
    }

    // optional .hw.trezor.messages.monero.MoneroTransactionSourceEntry src_entr = 1;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *src_entr_);
    }

    // optional uint32 orig_idx = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_orig_idx());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MoneroTransactionInputViniRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hw.trezor.messages.monero.MoneroTransactionInputViniRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const MoneroTransactionInputViniRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MoneroTransactionInputViniRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hw.trezor.messages.monero.MoneroTransactionInputViniRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hw.trezor.messages.monero.MoneroTransactionInputViniRequest)
    MergeFrom(*source);
  }
}

void MoneroTransactionInputViniRequest::MergeFrom(const MoneroTransactionInputViniRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hw.trezor.messages.monero.MoneroTransactionInputViniRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      vini_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.vini_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      vini_hmac_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.vini_hmac_);
    }
    if (cached_has_bits & 0x00000004u) {
      _has_bits_[0] |= 0x00000004u;
      pseudo_out_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.pseudo_out_);
    }
    if (cached_has_bits & 0x00000008u) {
      _has_bits_[0] |= 0x00000008u;
      pseudo_out_hmac_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.pseudo_out_hmac_);
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_src_entr()->::hw::trezor::messages::monero::MoneroTransactionSourceEntry::MergeFrom(from._internal_src_entr());
    }
    if (cached_has_bits & 0x00000020u) {
      orig_idx_ = from.orig_idx_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MoneroTransactionInputViniRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hw.trezor.messages.monero.MoneroTransactionInputViniRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MoneroTransactionInputViniRequest::CopyFrom(const MoneroTransactionInputViniRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hw.trezor.messages.monero.MoneroTransactionInputViniRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MoneroTransactionInputViniRequest::IsInitialized() const {
  return true;
}

void MoneroTransactionInputViniRequest::InternalSwap(MoneroTransactionInputViniRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  vini_.Swap(&other->vini_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  vini_hmac_.Swap(&other->vini_hmac_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  pseudo_out_.Swap(&other->pseudo_out_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  pseudo_out_hmac_.Swap(&other->pseudo_out_hmac_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(src_entr_, other->src_entr_);
  swap(orig_idx_, other->orig_idx_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MoneroTransactionInputViniRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MoneroTransactionInputViniAck::InitAsDefaultInstance() {
}
class MoneroTransactionInputViniAck::_Internal {
 public:
  using HasBits = decltype(std::declval<MoneroTransactionInputViniAck>()._has_bits_);
};

MoneroTransactionInputViniAck::MoneroTransactionInputViniAck()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hw.trezor.messages.monero.MoneroTransactionInputViniAck)
}
MoneroTransactionInputViniAck::MoneroTransactionInputViniAck(const MoneroTransactionInputViniAck& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:hw.trezor.messages.monero.MoneroTransactionInputViniAck)
}

void MoneroTransactionInputViniAck::SharedCtor() {
}

MoneroTransactionInputViniAck::~MoneroTransactionInputViniAck() {
  // @@protoc_insertion_point(destructor:hw.trezor.messages.monero.MoneroTransactionInputViniAck)
  SharedDtor();
}

void MoneroTransactionInputViniAck::SharedDtor() {
}

void MoneroTransactionInputViniAck::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MoneroTransactionInputViniAck& MoneroTransactionInputViniAck::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MoneroTransactionInputViniAck_messages_2dmonero_2eproto.base);
  return *internal_default_instance();
}


void MoneroTransactionInputViniAck::Clear() {
// @@protoc_insertion_point(message_clear_start:hw.trezor.messages.monero.MoneroTransactionInputViniAck)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MoneroTransactionInputViniAck::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MoneroTransactionInputViniAck::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hw.trezor.messages.monero.MoneroTransactionInputViniAck)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hw.trezor.messages.monero.MoneroTransactionInputViniAck)
  return target;
}

size_t MoneroTransactionInputViniAck::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hw.trezor.messages.monero.MoneroTransactionInputViniAck)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MoneroTransactionInputViniAck::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hw.trezor.messages.monero.MoneroTransactionInputViniAck)
  GOOGLE_DCHECK_NE(&from, this);
  const MoneroTransactionInputViniAck* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MoneroTransactionInputViniAck>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hw.trezor.messages.monero.MoneroTransactionInputViniAck)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hw.trezor.messages.monero.MoneroTransactionInputViniAck)
    MergeFrom(*source);
  }
}

void MoneroTransactionInputViniAck::MergeFrom(const MoneroTransactionInputViniAck& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hw.trezor.messages.monero.MoneroTransactionInputViniAck)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void MoneroTransactionInputViniAck::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hw.trezor.messages.monero.MoneroTransactionInputViniAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MoneroTransactionInputViniAck::CopyFrom(const MoneroTransactionInputViniAck& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hw.trezor.messages.monero.MoneroTransactionInputViniAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MoneroTransactionInputViniAck::IsInitialized() const {
  return true;
}

void MoneroTransactionInputViniAck::InternalSwap(MoneroTransactionInputViniAck* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata MoneroTransactionInputViniAck::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MoneroTransactionAllInputsSetRequest::InitAsDefaultInstance() {
}
class MoneroTransactionAllInputsSetRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<MoneroTransactionAllInputsSetRequest>()._has_bits_);
};

MoneroTransactionAllInputsSetRequest::MoneroTransactionAllInputsSetRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hw.trezor.messages.monero.MoneroTransactionAllInputsSetRequest)
}
MoneroTransactionAllInputsSetRequest::MoneroTransactionAllInputsSetRequest(const MoneroTransactionAllInputsSetRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:hw.trezor.messages.monero.MoneroTransactionAllInputsSetRequest)
}

void MoneroTransactionAllInputsSetRequest::SharedCtor() {
}

MoneroTransactionAllInputsSetRequest::~MoneroTransactionAllInputsSetRequest() {
  // @@protoc_insertion_point(destructor:hw.trezor.messages.monero.MoneroTransactionAllInputsSetRequest)
  SharedDtor();
}

void MoneroTransactionAllInputsSetRequest::SharedDtor() {
}

void MoneroTransactionAllInputsSetRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MoneroTransactionAllInputsSetRequest& MoneroTransactionAllInputsSetRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MoneroTransactionAllInputsSetRequest_messages_2dmonero_2eproto.base);
  return *internal_default_instance();
}


void MoneroTransactionAllInputsSetRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:hw.trezor.messages.monero.MoneroTransactionAllInputsSetRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MoneroTransactionAllInputsSetRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MoneroTransactionAllInputsSetRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hw.trezor.messages.monero.MoneroTransactionAllInputsSetRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hw.trezor.messages.monero.MoneroTransactionAllInputsSetRequest)
  return target;
}

size_t MoneroTransactionAllInputsSetRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hw.trezor.messages.monero.MoneroTransactionAllInputsSetRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MoneroTransactionAllInputsSetRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hw.trezor.messages.monero.MoneroTransactionAllInputsSetRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const MoneroTransactionAllInputsSetRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MoneroTransactionAllInputsSetRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hw.trezor.messages.monero.MoneroTransactionAllInputsSetRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hw.trezor.messages.monero.MoneroTransactionAllInputsSetRequest)
    MergeFrom(*source);
  }
}

void MoneroTransactionAllInputsSetRequest::MergeFrom(const MoneroTransactionAllInputsSetRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hw.trezor.messages.monero.MoneroTransactionAllInputsSetRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void MoneroTransactionAllInputsSetRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hw.trezor.messages.monero.MoneroTransactionAllInputsSetRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MoneroTransactionAllInputsSetRequest::CopyFrom(const MoneroTransactionAllInputsSetRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hw.trezor.messages.monero.MoneroTransactionAllInputsSetRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MoneroTransactionAllInputsSetRequest::IsInitialized() const {
  return true;
}

void MoneroTransactionAllInputsSetRequest::InternalSwap(MoneroTransactionAllInputsSetRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata MoneroTransactionAllInputsSetRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MoneroTransactionAllInputsSetAck::InitAsDefaultInstance() {
  ::hw::trezor::messages::monero::_MoneroTransactionAllInputsSetAck_default_instance_._instance.get_mutable()->rsig_data_ = const_cast< ::hw::trezor::messages::monero::MoneroTransactionRsigData*>(
      ::hw::trezor::messages::monero::MoneroTransactionRsigData::internal_default_instance());
}
class MoneroTransactionAllInputsSetAck::_Internal {
 public:
  using HasBits = decltype(std::declval<MoneroTransactionAllInputsSetAck>()._has_bits_);
  static const ::hw::trezor::messages::monero::MoneroTransactionRsigData& rsig_data(const MoneroTransactionAllInputsSetAck* msg);
  static void set_has_rsig_data(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::hw::trezor::messages::monero::MoneroTransactionRsigData&
MoneroTransactionAllInputsSetAck::_Internal::rsig_data(const MoneroTransactionAllInputsSetAck* msg) {
  return *msg->rsig_data_;
}
MoneroTransactionAllInputsSetAck::MoneroTransactionAllInputsSetAck()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hw.trezor.messages.monero.MoneroTransactionAllInputsSetAck)
}
MoneroTransactionAllInputsSetAck::MoneroTransactionAllInputsSetAck(const MoneroTransactionAllInputsSetAck& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_rsig_data()) {
    rsig_data_ = new ::hw::trezor::messages::monero::MoneroTransactionRsigData(*from.rsig_data_);
  } else {
    rsig_data_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:hw.trezor.messages.monero.MoneroTransactionAllInputsSetAck)
}

void MoneroTransactionAllInputsSetAck::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MoneroTransactionAllInputsSetAck_messages_2dmonero_2eproto.base);
  rsig_data_ = nullptr;
}

MoneroTransactionAllInputsSetAck::~MoneroTransactionAllInputsSetAck() {
  // @@protoc_insertion_point(destructor:hw.trezor.messages.monero.MoneroTransactionAllInputsSetAck)
  SharedDtor();
}

void MoneroTransactionAllInputsSetAck::SharedDtor() {
  if (this != internal_default_instance()) delete rsig_data_;
}

void MoneroTransactionAllInputsSetAck::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MoneroTransactionAllInputsSetAck& MoneroTransactionAllInputsSetAck::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MoneroTransactionAllInputsSetAck_messages_2dmonero_2eproto.base);
  return *internal_default_instance();
}


void MoneroTransactionAllInputsSetAck::Clear() {
// @@protoc_insertion_point(message_clear_start:hw.trezor.messages.monero.MoneroTransactionAllInputsSetAck)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(rsig_data_ != nullptr);
    rsig_data_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MoneroTransactionAllInputsSetAck::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .hw.trezor.messages.monero.MoneroTransactionRsigData rsig_data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_rsig_data(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MoneroTransactionAllInputsSetAck::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hw.trezor.messages.monero.MoneroTransactionAllInputsSetAck)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .hw.trezor.messages.monero.MoneroTransactionRsigData rsig_data = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::rsig_data(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hw.trezor.messages.monero.MoneroTransactionAllInputsSetAck)
  return target;
}

size_t MoneroTransactionAllInputsSetAck::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hw.trezor.messages.monero.MoneroTransactionAllInputsSetAck)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .hw.trezor.messages.monero.MoneroTransactionRsigData rsig_data = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *rsig_data_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MoneroTransactionAllInputsSetAck::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hw.trezor.messages.monero.MoneroTransactionAllInputsSetAck)
  GOOGLE_DCHECK_NE(&from, this);
  const MoneroTransactionAllInputsSetAck* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MoneroTransactionAllInputsSetAck>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hw.trezor.messages.monero.MoneroTransactionAllInputsSetAck)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hw.trezor.messages.monero.MoneroTransactionAllInputsSetAck)
    MergeFrom(*source);
  }
}

void MoneroTransactionAllInputsSetAck::MergeFrom(const MoneroTransactionAllInputsSetAck& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hw.trezor.messages.monero.MoneroTransactionAllInputsSetAck)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_rsig_data()) {
    _internal_mutable_rsig_data()->::hw::trezor::messages::monero::MoneroTransactionRsigData::MergeFrom(from._internal_rsig_data());
  }
}

void MoneroTransactionAllInputsSetAck::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hw.trezor.messages.monero.MoneroTransactionAllInputsSetAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MoneroTransactionAllInputsSetAck::CopyFrom(const MoneroTransactionAllInputsSetAck& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hw.trezor.messages.monero.MoneroTransactionAllInputsSetAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MoneroTransactionAllInputsSetAck::IsInitialized() const {
  return true;
}

void MoneroTransactionAllInputsSetAck::InternalSwap(MoneroTransactionAllInputsSetAck* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(rsig_data_, other->rsig_data_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MoneroTransactionAllInputsSetAck::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MoneroTransactionSetOutputRequest::InitAsDefaultInstance() {
  ::hw::trezor::messages::monero::_MoneroTransactionSetOutputRequest_default_instance_._instance.get_mutable()->dst_entr_ = const_cast< ::hw::trezor::messages::monero::MoneroTransactionDestinationEntry*>(
      ::hw::trezor::messages::monero::MoneroTransactionDestinationEntry::internal_default_instance());
  ::hw::trezor::messages::monero::_MoneroTransactionSetOutputRequest_default_instance_._instance.get_mutable()->rsig_data_ = const_cast< ::hw::trezor::messages::monero::MoneroTransactionRsigData*>(
      ::hw::trezor::messages::monero::MoneroTransactionRsigData::internal_default_instance());
}
class MoneroTransactionSetOutputRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<MoneroTransactionSetOutputRequest>()._has_bits_);
  static const ::hw::trezor::messages::monero::MoneroTransactionDestinationEntry& dst_entr(const MoneroTransactionSetOutputRequest* msg);
  static void set_has_dst_entr(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_dst_entr_hmac(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::hw::trezor::messages::monero::MoneroTransactionRsigData& rsig_data(const MoneroTransactionSetOutputRequest* msg);
  static void set_has_rsig_data(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_is_offloaded_bp(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::hw::trezor::messages::monero::MoneroTransactionDestinationEntry&
MoneroTransactionSetOutputRequest::_Internal::dst_entr(const MoneroTransactionSetOutputRequest* msg) {
  return *msg->dst_entr_;
}
const ::hw::trezor::messages::monero::MoneroTransactionRsigData&
MoneroTransactionSetOutputRequest::_Internal::rsig_data(const MoneroTransactionSetOutputRequest* msg) {
  return *msg->rsig_data_;
}
MoneroTransactionSetOutputRequest::MoneroTransactionSetOutputRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hw.trezor.messages.monero.MoneroTransactionSetOutputRequest)
}
MoneroTransactionSetOutputRequest::MoneroTransactionSetOutputRequest(const MoneroTransactionSetOutputRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  dst_entr_hmac_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_dst_entr_hmac()) {
    dst_entr_hmac_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.dst_entr_hmac_);
  }
  if (from._internal_has_dst_entr()) {
    dst_entr_ = new ::hw::trezor::messages::monero::MoneroTransactionDestinationEntry(*from.dst_entr_);
  } else {
    dst_entr_ = nullptr;
  }
  if (from._internal_has_rsig_data()) {
    rsig_data_ = new ::hw::trezor::messages::monero::MoneroTransactionRsigData(*from.rsig_data_);
  } else {
    rsig_data_ = nullptr;
  }
  is_offloaded_bp_ = from.is_offloaded_bp_;
  // @@protoc_insertion_point(copy_constructor:hw.trezor.messages.monero.MoneroTransactionSetOutputRequest)
}

void MoneroTransactionSetOutputRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MoneroTransactionSetOutputRequest_messages_2dmonero_2eproto.base);
  dst_entr_hmac_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&dst_entr_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_offloaded_bp_) -
      reinterpret_cast<char*>(&dst_entr_)) + sizeof(is_offloaded_bp_));
}

MoneroTransactionSetOutputRequest::~MoneroTransactionSetOutputRequest() {
  // @@protoc_insertion_point(destructor:hw.trezor.messages.monero.MoneroTransactionSetOutputRequest)
  SharedDtor();
}

void MoneroTransactionSetOutputRequest::SharedDtor() {
  dst_entr_hmac_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete dst_entr_;
  if (this != internal_default_instance()) delete rsig_data_;
}

void MoneroTransactionSetOutputRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MoneroTransactionSetOutputRequest& MoneroTransactionSetOutputRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MoneroTransactionSetOutputRequest_messages_2dmonero_2eproto.base);
  return *internal_default_instance();
}


void MoneroTransactionSetOutputRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:hw.trezor.messages.monero.MoneroTransactionSetOutputRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      dst_entr_hmac_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(dst_entr_ != nullptr);
      dst_entr_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(rsig_data_ != nullptr);
      rsig_data_->Clear();
    }
  }
  is_offloaded_bp_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MoneroTransactionSetOutputRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .hw.trezor.messages.monero.MoneroTransactionDestinationEntry dst_entr = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_dst_entr(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes dst_entr_hmac = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_dst_entr_hmac();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .hw.trezor.messages.monero.MoneroTransactionRsigData rsig_data = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_rsig_data(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_offloaded_bp = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_is_offloaded_bp(&has_bits);
          is_offloaded_bp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MoneroTransactionSetOutputRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hw.trezor.messages.monero.MoneroTransactionSetOutputRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .hw.trezor.messages.monero.MoneroTransactionDestinationEntry dst_entr = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::dst_entr(this), target, stream);
  }

  // optional bytes dst_entr_hmac = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_dst_entr_hmac(), target);
  }

  // optional .hw.trezor.messages.monero.MoneroTransactionRsigData rsig_data = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::rsig_data(this), target, stream);
  }

  // optional bool is_offloaded_bp = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_is_offloaded_bp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hw.trezor.messages.monero.MoneroTransactionSetOutputRequest)
  return target;
}

size_t MoneroTransactionSetOutputRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hw.trezor.messages.monero.MoneroTransactionSetOutputRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional bytes dst_entr_hmac = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_dst_entr_hmac());
    }

    // optional .hw.trezor.messages.monero.MoneroTransactionDestinationEntry dst_entr = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *dst_entr_);
    }

    // optional .hw.trezor.messages.monero.MoneroTransactionRsigData rsig_data = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *rsig_data_);
    }

    // optional bool is_offloaded_bp = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MoneroTransactionSetOutputRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hw.trezor.messages.monero.MoneroTransactionSetOutputRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const MoneroTransactionSetOutputRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MoneroTransactionSetOutputRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hw.trezor.messages.monero.MoneroTransactionSetOutputRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hw.trezor.messages.monero.MoneroTransactionSetOutputRequest)
    MergeFrom(*source);
  }
}

void MoneroTransactionSetOutputRequest::MergeFrom(const MoneroTransactionSetOutputRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hw.trezor.messages.monero.MoneroTransactionSetOutputRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      dst_entr_hmac_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.dst_entr_hmac_);
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_dst_entr()->::hw::trezor::messages::monero::MoneroTransactionDestinationEntry::MergeFrom(from._internal_dst_entr());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_rsig_data()->::hw::trezor::messages::monero::MoneroTransactionRsigData::MergeFrom(from._internal_rsig_data());
    }
    if (cached_has_bits & 0x00000008u) {
      is_offloaded_bp_ = from.is_offloaded_bp_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MoneroTransactionSetOutputRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hw.trezor.messages.monero.MoneroTransactionSetOutputRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MoneroTransactionSetOutputRequest::CopyFrom(const MoneroTransactionSetOutputRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hw.trezor.messages.monero.MoneroTransactionSetOutputRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MoneroTransactionSetOutputRequest::IsInitialized() const {
  return true;
}

void MoneroTransactionSetOutputRequest::InternalSwap(MoneroTransactionSetOutputRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  dst_entr_hmac_.Swap(&other->dst_entr_hmac_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(dst_entr_, other->dst_entr_);
  swap(rsig_data_, other->rsig_data_);
  swap(is_offloaded_bp_, other->is_offloaded_bp_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MoneroTransactionSetOutputRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MoneroTransactionSetOutputAck::InitAsDefaultInstance() {
  ::hw::trezor::messages::monero::_MoneroTransactionSetOutputAck_default_instance_._instance.get_mutable()->rsig_data_ = const_cast< ::hw::trezor::messages::monero::MoneroTransactionRsigData*>(
      ::hw::trezor::messages::monero::MoneroTransactionRsigData::internal_default_instance());
}
class MoneroTransactionSetOutputAck::_Internal {
 public:
  using HasBits = decltype(std::declval<MoneroTransactionSetOutputAck>()._has_bits_);
  static void set_has_tx_out(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_vouti_hmac(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::hw::trezor::messages::monero::MoneroTransactionRsigData& rsig_data(const MoneroTransactionSetOutputAck* msg);
  static void set_has_rsig_data(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_out_pk(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_ecdh_info(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::hw::trezor::messages::monero::MoneroTransactionRsigData&
MoneroTransactionSetOutputAck::_Internal::rsig_data(const MoneroTransactionSetOutputAck* msg) {
  return *msg->rsig_data_;
}
MoneroTransactionSetOutputAck::MoneroTransactionSetOutputAck()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hw.trezor.messages.monero.MoneroTransactionSetOutputAck)
}
MoneroTransactionSetOutputAck::MoneroTransactionSetOutputAck(const MoneroTransactionSetOutputAck& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  tx_out_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_tx_out()) {
    tx_out_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.tx_out_);
  }
  vouti_hmac_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_vouti_hmac()) {
    vouti_hmac_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.vouti_hmac_);
  }
  out_pk_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_out_pk()) {
    out_pk_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.out_pk_);
  }
  ecdh_info_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_ecdh_info()) {
    ecdh_info_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.ecdh_info_);
  }
  if (from._internal_has_rsig_data()) {
    rsig_data_ = new ::hw::trezor::messages::monero::MoneroTransactionRsigData(*from.rsig_data_);
  } else {
    rsig_data_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:hw.trezor.messages.monero.MoneroTransactionSetOutputAck)
}

void MoneroTransactionSetOutputAck::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MoneroTransactionSetOutputAck_messages_2dmonero_2eproto.base);
  tx_out_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  vouti_hmac_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  out_pk_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ecdh_info_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  rsig_data_ = nullptr;
}

MoneroTransactionSetOutputAck::~MoneroTransactionSetOutputAck() {
  // @@protoc_insertion_point(destructor:hw.trezor.messages.monero.MoneroTransactionSetOutputAck)
  SharedDtor();
}

void MoneroTransactionSetOutputAck::SharedDtor() {
  tx_out_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  vouti_hmac_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  out_pk_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ecdh_info_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete rsig_data_;
}

void MoneroTransactionSetOutputAck::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MoneroTransactionSetOutputAck& MoneroTransactionSetOutputAck::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MoneroTransactionSetOutputAck_messages_2dmonero_2eproto.base);
  return *internal_default_instance();
}


void MoneroTransactionSetOutputAck::Clear() {
// @@protoc_insertion_point(message_clear_start:hw.trezor.messages.monero.MoneroTransactionSetOutputAck)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      tx_out_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      vouti_hmac_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      out_pk_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000008u) {
      ecdh_info_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(rsig_data_ != nullptr);
      rsig_data_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MoneroTransactionSetOutputAck::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bytes tx_out = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_tx_out();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes vouti_hmac = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_vouti_hmac();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .hw.trezor.messages.monero.MoneroTransactionRsigData rsig_data = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_rsig_data(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes out_pk = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_out_pk();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes ecdh_info = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_ecdh_info();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MoneroTransactionSetOutputAck::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hw.trezor.messages.monero.MoneroTransactionSetOutputAck)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes tx_out = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_tx_out(), target);
  }

  // optional bytes vouti_hmac = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_vouti_hmac(), target);
  }

  // optional .hw.trezor.messages.monero.MoneroTransactionRsigData rsig_data = 3;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::rsig_data(this), target, stream);
  }

  // optional bytes out_pk = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_out_pk(), target);
  }

  // optional bytes ecdh_info = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->WriteBytesMaybeAliased(
        5, this->_internal_ecdh_info(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hw.trezor.messages.monero.MoneroTransactionSetOutputAck)
  return target;
}

size_t MoneroTransactionSetOutputAck::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hw.trezor.messages.monero.MoneroTransactionSetOutputAck)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional bytes tx_out = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_tx_out());
    }

    // optional bytes vouti_hmac = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_vouti_hmac());
    }

    // optional bytes out_pk = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_out_pk());
    }

    // optional bytes ecdh_info = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_ecdh_info());
    }

    // optional .hw.trezor.messages.monero.MoneroTransactionRsigData rsig_data = 3;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *rsig_data_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MoneroTransactionSetOutputAck::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hw.trezor.messages.monero.MoneroTransactionSetOutputAck)
  GOOGLE_DCHECK_NE(&from, this);
  const MoneroTransactionSetOutputAck* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MoneroTransactionSetOutputAck>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hw.trezor.messages.monero.MoneroTransactionSetOutputAck)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hw.trezor.messages.monero.MoneroTransactionSetOutputAck)
    MergeFrom(*source);
  }
}

void MoneroTransactionSetOutputAck::MergeFrom(const MoneroTransactionSetOutputAck& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hw.trezor.messages.monero.MoneroTransactionSetOutputAck)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      tx_out_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.tx_out_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      vouti_hmac_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.vouti_hmac_);
    }
    if (cached_has_bits & 0x00000004u) {
      _has_bits_[0] |= 0x00000004u;
      out_pk_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.out_pk_);
    }
    if (cached_has_bits & 0x00000008u) {
      _has_bits_[0] |= 0x00000008u;
      ecdh_info_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.ecdh_info_);
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_rsig_data()->::hw::trezor::messages::monero::MoneroTransactionRsigData::MergeFrom(from._internal_rsig_data());
    }
  }
}

void MoneroTransactionSetOutputAck::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hw.trezor.messages.monero.MoneroTransactionSetOutputAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MoneroTransactionSetOutputAck::CopyFrom(const MoneroTransactionSetOutputAck& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hw.trezor.messages.monero.MoneroTransactionSetOutputAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MoneroTransactionSetOutputAck::IsInitialized() const {
  return true;
}

void MoneroTransactionSetOutputAck::InternalSwap(MoneroTransactionSetOutputAck* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  tx_out_.Swap(&other->tx_out_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  vouti_hmac_.Swap(&other->vouti_hmac_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  out_pk_.Swap(&other->out_pk_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  ecdh_info_.Swap(&other->ecdh_info_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(rsig_data_, other->rsig_data_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MoneroTransactionSetOutputAck::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MoneroTransactionAllOutSetRequest::InitAsDefaultInstance() {
  ::hw::trezor::messages::monero::_MoneroTransactionAllOutSetRequest_default_instance_._instance.get_mutable()->rsig_data_ = const_cast< ::hw::trezor::messages::monero::MoneroTransactionRsigData*>(
      ::hw::trezor::messages::monero::MoneroTransactionRsigData::internal_default_instance());
}
class MoneroTransactionAllOutSetRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<MoneroTransactionAllOutSetRequest>()._has_bits_);
  static const ::hw::trezor::messages::monero::MoneroTransactionRsigData& rsig_data(const MoneroTransactionAllOutSetRequest* msg);
  static void set_has_rsig_data(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::hw::trezor::messages::monero::MoneroTransactionRsigData&
MoneroTransactionAllOutSetRequest::_Internal::rsig_data(const MoneroTransactionAllOutSetRequest* msg) {
  return *msg->rsig_data_;
}
MoneroTransactionAllOutSetRequest::MoneroTransactionAllOutSetRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hw.trezor.messages.monero.MoneroTransactionAllOutSetRequest)
}
MoneroTransactionAllOutSetRequest::MoneroTransactionAllOutSetRequest(const MoneroTransactionAllOutSetRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_rsig_data()) {
    rsig_data_ = new ::hw::trezor::messages::monero::MoneroTransactionRsigData(*from.rsig_data_);
  } else {
    rsig_data_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:hw.trezor.messages.monero.MoneroTransactionAllOutSetRequest)
}

void MoneroTransactionAllOutSetRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MoneroTransactionAllOutSetRequest_messages_2dmonero_2eproto.base);
  rsig_data_ = nullptr;
}

MoneroTransactionAllOutSetRequest::~MoneroTransactionAllOutSetRequest() {
  // @@protoc_insertion_point(destructor:hw.trezor.messages.monero.MoneroTransactionAllOutSetRequest)
  SharedDtor();
}

void MoneroTransactionAllOutSetRequest::SharedDtor() {
  if (this != internal_default_instance()) delete rsig_data_;
}

void MoneroTransactionAllOutSetRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MoneroTransactionAllOutSetRequest& MoneroTransactionAllOutSetRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MoneroTransactionAllOutSetRequest_messages_2dmonero_2eproto.base);
  return *internal_default_instance();
}


void MoneroTransactionAllOutSetRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:hw.trezor.messages.monero.MoneroTransactionAllOutSetRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(rsig_data_ != nullptr);
    rsig_data_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MoneroTransactionAllOutSetRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .hw.trezor.messages.monero.MoneroTransactionRsigData rsig_data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_rsig_data(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MoneroTransactionAllOutSetRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hw.trezor.messages.monero.MoneroTransactionAllOutSetRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .hw.trezor.messages.monero.MoneroTransactionRsigData rsig_data = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::rsig_data(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hw.trezor.messages.monero.MoneroTransactionAllOutSetRequest)
  return target;
}

size_t MoneroTransactionAllOutSetRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hw.trezor.messages.monero.MoneroTransactionAllOutSetRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .hw.trezor.messages.monero.MoneroTransactionRsigData rsig_data = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *rsig_data_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MoneroTransactionAllOutSetRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hw.trezor.messages.monero.MoneroTransactionAllOutSetRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const MoneroTransactionAllOutSetRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MoneroTransactionAllOutSetRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hw.trezor.messages.monero.MoneroTransactionAllOutSetRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hw.trezor.messages.monero.MoneroTransactionAllOutSetRequest)
    MergeFrom(*source);
  }
}

void MoneroTransactionAllOutSetRequest::MergeFrom(const MoneroTransactionAllOutSetRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hw.trezor.messages.monero.MoneroTransactionAllOutSetRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_rsig_data()) {
    _internal_mutable_rsig_data()->::hw::trezor::messages::monero::MoneroTransactionRsigData::MergeFrom(from._internal_rsig_data());
  }
}

void MoneroTransactionAllOutSetRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hw.trezor.messages.monero.MoneroTransactionAllOutSetRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MoneroTransactionAllOutSetRequest::CopyFrom(const MoneroTransactionAllOutSetRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hw.trezor.messages.monero.MoneroTransactionAllOutSetRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MoneroTransactionAllOutSetRequest::IsInitialized() const {
  return true;
}

void MoneroTransactionAllOutSetRequest::InternalSwap(MoneroTransactionAllOutSetRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(rsig_data_, other->rsig_data_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MoneroTransactionAllOutSetRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MoneroTransactionAllOutSetAck_MoneroRingCtSig::InitAsDefaultInstance() {
}
class MoneroTransactionAllOutSetAck_MoneroRingCtSig::_Internal {
 public:
  using HasBits = decltype(std::declval<MoneroTransactionAllOutSetAck_MoneroRingCtSig>()._has_bits_);
  static void set_has_txn_fee(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_message(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_rv_type(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

MoneroTransactionAllOutSetAck_MoneroRingCtSig::MoneroTransactionAllOutSetAck_MoneroRingCtSig()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hw.trezor.messages.monero.MoneroTransactionAllOutSetAck.MoneroRingCtSig)
}
MoneroTransactionAllOutSetAck_MoneroRingCtSig::MoneroTransactionAllOutSetAck_MoneroRingCtSig(const MoneroTransactionAllOutSetAck_MoneroRingCtSig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_message()) {
    message_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.message_);
  }
  ::memcpy(&txn_fee_, &from.txn_fee_,
    static_cast<size_t>(reinterpret_cast<char*>(&rv_type_) -
    reinterpret_cast<char*>(&txn_fee_)) + sizeof(rv_type_));
  // @@protoc_insertion_point(copy_constructor:hw.trezor.messages.monero.MoneroTransactionAllOutSetAck.MoneroRingCtSig)
}

void MoneroTransactionAllOutSetAck_MoneroRingCtSig::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MoneroTransactionAllOutSetAck_MoneroRingCtSig_messages_2dmonero_2eproto.base);
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&txn_fee_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&rv_type_) -
      reinterpret_cast<char*>(&txn_fee_)) + sizeof(rv_type_));
}

MoneroTransactionAllOutSetAck_MoneroRingCtSig::~MoneroTransactionAllOutSetAck_MoneroRingCtSig() {
  // @@protoc_insertion_point(destructor:hw.trezor.messages.monero.MoneroTransactionAllOutSetAck.MoneroRingCtSig)
  SharedDtor();
}

void MoneroTransactionAllOutSetAck_MoneroRingCtSig::SharedDtor() {
  message_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MoneroTransactionAllOutSetAck_MoneroRingCtSig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MoneroTransactionAllOutSetAck_MoneroRingCtSig& MoneroTransactionAllOutSetAck_MoneroRingCtSig::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MoneroTransactionAllOutSetAck_MoneroRingCtSig_messages_2dmonero_2eproto.base);
  return *internal_default_instance();
}


void MoneroTransactionAllOutSetAck_MoneroRingCtSig::Clear() {
// @@protoc_insertion_point(message_clear_start:hw.trezor.messages.monero.MoneroTransactionAllOutSetAck.MoneroRingCtSig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    message_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&txn_fee_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&rv_type_) -
        reinterpret_cast<char*>(&txn_fee_)) + sizeof(rv_type_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MoneroTransactionAllOutSetAck_MoneroRingCtSig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint64 txn_fee = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_txn_fee(&has_bits);
          txn_fee_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes message = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_message();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 rv_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_rv_type(&has_bits);
          rv_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MoneroTransactionAllOutSetAck_MoneroRingCtSig::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hw.trezor.messages.monero.MoneroTransactionAllOutSetAck.MoneroRingCtSig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 txn_fee = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_txn_fee(), target);
  }

  // optional bytes message = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_message(), target);
  }

  // optional uint32 rv_type = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_rv_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hw.trezor.messages.monero.MoneroTransactionAllOutSetAck.MoneroRingCtSig)
  return target;
}

size_t MoneroTransactionAllOutSetAck_MoneroRingCtSig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hw.trezor.messages.monero.MoneroTransactionAllOutSetAck.MoneroRingCtSig)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional bytes message = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_message());
    }

    // optional uint64 txn_fee = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_txn_fee());
    }

    // optional uint32 rv_type = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_rv_type());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MoneroTransactionAllOutSetAck_MoneroRingCtSig::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hw.trezor.messages.monero.MoneroTransactionAllOutSetAck.MoneroRingCtSig)
  GOOGLE_DCHECK_NE(&from, this);
  const MoneroTransactionAllOutSetAck_MoneroRingCtSig* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MoneroTransactionAllOutSetAck_MoneroRingCtSig>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hw.trezor.messages.monero.MoneroTransactionAllOutSetAck.MoneroRingCtSig)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hw.trezor.messages.monero.MoneroTransactionAllOutSetAck.MoneroRingCtSig)
    MergeFrom(*source);
  }
}

void MoneroTransactionAllOutSetAck_MoneroRingCtSig::MergeFrom(const MoneroTransactionAllOutSetAck_MoneroRingCtSig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hw.trezor.messages.monero.MoneroTransactionAllOutSetAck.MoneroRingCtSig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      message_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.message_);
    }
    if (cached_has_bits & 0x00000002u) {
      txn_fee_ = from.txn_fee_;
    }
    if (cached_has_bits & 0x00000004u) {
      rv_type_ = from.rv_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MoneroTransactionAllOutSetAck_MoneroRingCtSig::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hw.trezor.messages.monero.MoneroTransactionAllOutSetAck.MoneroRingCtSig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MoneroTransactionAllOutSetAck_MoneroRingCtSig::CopyFrom(const MoneroTransactionAllOutSetAck_MoneroRingCtSig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hw.trezor.messages.monero.MoneroTransactionAllOutSetAck.MoneroRingCtSig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MoneroTransactionAllOutSetAck_MoneroRingCtSig::IsInitialized() const {
  return true;
}

void MoneroTransactionAllOutSetAck_MoneroRingCtSig::InternalSwap(MoneroTransactionAllOutSetAck_MoneroRingCtSig* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  message_.Swap(&other->message_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(txn_fee_, other->txn_fee_);
  swap(rv_type_, other->rv_type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MoneroTransactionAllOutSetAck_MoneroRingCtSig::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MoneroTransactionAllOutSetAck::InitAsDefaultInstance() {
  ::hw::trezor::messages::monero::_MoneroTransactionAllOutSetAck_default_instance_._instance.get_mutable()->rv_ = const_cast< ::hw::trezor::messages::monero::MoneroTransactionAllOutSetAck_MoneroRingCtSig*>(
      ::hw::trezor::messages::monero::MoneroTransactionAllOutSetAck_MoneroRingCtSig::internal_default_instance());
}
class MoneroTransactionAllOutSetAck::_Internal {
 public:
  using HasBits = decltype(std::declval<MoneroTransactionAllOutSetAck>()._has_bits_);
  static void set_has_extra(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_tx_prefix_hash(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::hw::trezor::messages::monero::MoneroTransactionAllOutSetAck_MoneroRingCtSig& rv(const MoneroTransactionAllOutSetAck* msg);
  static void set_has_rv(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_full_message_hash(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::hw::trezor::messages::monero::MoneroTransactionAllOutSetAck_MoneroRingCtSig&
MoneroTransactionAllOutSetAck::_Internal::rv(const MoneroTransactionAllOutSetAck* msg) {
  return *msg->rv_;
}
MoneroTransactionAllOutSetAck::MoneroTransactionAllOutSetAck()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hw.trezor.messages.monero.MoneroTransactionAllOutSetAck)
}
MoneroTransactionAllOutSetAck::MoneroTransactionAllOutSetAck(const MoneroTransactionAllOutSetAck& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  extra_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_extra()) {
    extra_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.extra_);
  }
  tx_prefix_hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_tx_prefix_hash()) {
    tx_prefix_hash_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.tx_prefix_hash_);
  }
  full_message_hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_full_message_hash()) {
    full_message_hash_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.full_message_hash_);
  }
  if (from._internal_has_rv()) {
    rv_ = new ::hw::trezor::messages::monero::MoneroTransactionAllOutSetAck_MoneroRingCtSig(*from.rv_);
  } else {
    rv_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:hw.trezor.messages.monero.MoneroTransactionAllOutSetAck)
}

void MoneroTransactionAllOutSetAck::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MoneroTransactionAllOutSetAck_messages_2dmonero_2eproto.base);
  extra_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  tx_prefix_hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  full_message_hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  rv_ = nullptr;
}

MoneroTransactionAllOutSetAck::~MoneroTransactionAllOutSetAck() {
  // @@protoc_insertion_point(destructor:hw.trezor.messages.monero.MoneroTransactionAllOutSetAck)
  SharedDtor();
}

void MoneroTransactionAllOutSetAck::SharedDtor() {
  extra_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  tx_prefix_hash_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  full_message_hash_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete rv_;
}

void MoneroTransactionAllOutSetAck::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MoneroTransactionAllOutSetAck& MoneroTransactionAllOutSetAck::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MoneroTransactionAllOutSetAck_messages_2dmonero_2eproto.base);
  return *internal_default_instance();
}


void MoneroTransactionAllOutSetAck::Clear() {
// @@protoc_insertion_point(message_clear_start:hw.trezor.messages.monero.MoneroTransactionAllOutSetAck)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      extra_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      tx_prefix_hash_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      full_message_hash_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(rv_ != nullptr);
      rv_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MoneroTransactionAllOutSetAck::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bytes extra = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_extra();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes tx_prefix_hash = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_tx_prefix_hash();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .hw.trezor.messages.monero.MoneroTransactionAllOutSetAck.MoneroRingCtSig rv = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_rv(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes full_message_hash = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_full_message_hash();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MoneroTransactionAllOutSetAck::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hw.trezor.messages.monero.MoneroTransactionAllOutSetAck)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes extra = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_extra(), target);
  }

  // optional bytes tx_prefix_hash = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_tx_prefix_hash(), target);
  }

  // optional .hw.trezor.messages.monero.MoneroTransactionAllOutSetAck.MoneroRingCtSig rv = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::rv(this), target, stream);
  }

  // optional bytes full_message_hash = 5;
  if (cached_has_bits & 0x00000004u) {
    target = stream->WriteBytesMaybeAliased(
        5, this->_internal_full_message_hash(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hw.trezor.messages.monero.MoneroTransactionAllOutSetAck)
  return target;
}

size_t MoneroTransactionAllOutSetAck::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hw.trezor.messages.monero.MoneroTransactionAllOutSetAck)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional bytes extra = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_extra());
    }

    // optional bytes tx_prefix_hash = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_tx_prefix_hash());
    }

    // optional bytes full_message_hash = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_full_message_hash());
    }

    // optional .hw.trezor.messages.monero.MoneroTransactionAllOutSetAck.MoneroRingCtSig rv = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *rv_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MoneroTransactionAllOutSetAck::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hw.trezor.messages.monero.MoneroTransactionAllOutSetAck)
  GOOGLE_DCHECK_NE(&from, this);
  const MoneroTransactionAllOutSetAck* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MoneroTransactionAllOutSetAck>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hw.trezor.messages.monero.MoneroTransactionAllOutSetAck)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hw.trezor.messages.monero.MoneroTransactionAllOutSetAck)
    MergeFrom(*source);
  }
}

void MoneroTransactionAllOutSetAck::MergeFrom(const MoneroTransactionAllOutSetAck& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hw.trezor.messages.monero.MoneroTransactionAllOutSetAck)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      extra_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.extra_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      tx_prefix_hash_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.tx_prefix_hash_);
    }
    if (cached_has_bits & 0x00000004u) {
      _has_bits_[0] |= 0x00000004u;
      full_message_hash_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.full_message_hash_);
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_rv()->::hw::trezor::messages::monero::MoneroTransactionAllOutSetAck_MoneroRingCtSig::MergeFrom(from._internal_rv());
    }
  }
}

void MoneroTransactionAllOutSetAck::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hw.trezor.messages.monero.MoneroTransactionAllOutSetAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MoneroTransactionAllOutSetAck::CopyFrom(const MoneroTransactionAllOutSetAck& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hw.trezor.messages.monero.MoneroTransactionAllOutSetAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MoneroTransactionAllOutSetAck::IsInitialized() const {
  return true;
}

void MoneroTransactionAllOutSetAck::InternalSwap(MoneroTransactionAllOutSetAck* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  extra_.Swap(&other->extra_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  tx_prefix_hash_.Swap(&other->tx_prefix_hash_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  full_message_hash_.Swap(&other->full_message_hash_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(rv_, other->rv_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MoneroTransactionAllOutSetAck::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MoneroTransactionSignInputRequest::InitAsDefaultInstance() {
  ::hw::trezor::messages::monero::_MoneroTransactionSignInputRequest_default_instance_._instance.get_mutable()->src_entr_ = const_cast< ::hw::trezor::messages::monero::MoneroTransactionSourceEntry*>(
      ::hw::trezor::messages::monero::MoneroTransactionSourceEntry::internal_default_instance());
}
class MoneroTransactionSignInputRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<MoneroTransactionSignInputRequest>()._has_bits_);
  static const ::hw::trezor::messages::monero::MoneroTransactionSourceEntry& src_entr(const MoneroTransactionSignInputRequest* msg);
  static void set_has_src_entr(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_vini(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_vini_hmac(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_pseudo_out(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_pseudo_out_hmac(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_pseudo_out_alpha(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_spend_key(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_orig_idx(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
};

const ::hw::trezor::messages::monero::MoneroTransactionSourceEntry&
MoneroTransactionSignInputRequest::_Internal::src_entr(const MoneroTransactionSignInputRequest* msg) {
  return *msg->src_entr_;
}
MoneroTransactionSignInputRequest::MoneroTransactionSignInputRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hw.trezor.messages.monero.MoneroTransactionSignInputRequest)
}
MoneroTransactionSignInputRequest::MoneroTransactionSignInputRequest(const MoneroTransactionSignInputRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  vini_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_vini()) {
    vini_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.vini_);
  }
  vini_hmac_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_vini_hmac()) {
    vini_hmac_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.vini_hmac_);
  }
  pseudo_out_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_pseudo_out()) {
    pseudo_out_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.pseudo_out_);
  }
  pseudo_out_hmac_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_pseudo_out_hmac()) {
    pseudo_out_hmac_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.pseudo_out_hmac_);
  }
  pseudo_out_alpha_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_pseudo_out_alpha()) {
    pseudo_out_alpha_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.pseudo_out_alpha_);
  }
  spend_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_spend_key()) {
    spend_key_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.spend_key_);
  }
  if (from._internal_has_src_entr()) {
    src_entr_ = new ::hw::trezor::messages::monero::MoneroTransactionSourceEntry(*from.src_entr_);
  } else {
    src_entr_ = nullptr;
  }
  orig_idx_ = from.orig_idx_;
  // @@protoc_insertion_point(copy_constructor:hw.trezor.messages.monero.MoneroTransactionSignInputRequest)
}

void MoneroTransactionSignInputRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MoneroTransactionSignInputRequest_messages_2dmonero_2eproto.base);
  vini_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  vini_hmac_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  pseudo_out_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  pseudo_out_hmac_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  pseudo_out_alpha_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  spend_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&src_entr_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&orig_idx_) -
      reinterpret_cast<char*>(&src_entr_)) + sizeof(orig_idx_));
}

MoneroTransactionSignInputRequest::~MoneroTransactionSignInputRequest() {
  // @@protoc_insertion_point(destructor:hw.trezor.messages.monero.MoneroTransactionSignInputRequest)
  SharedDtor();
}

void MoneroTransactionSignInputRequest::SharedDtor() {
  vini_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  vini_hmac_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  pseudo_out_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  pseudo_out_hmac_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  pseudo_out_alpha_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  spend_key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete src_entr_;
}

void MoneroTransactionSignInputRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MoneroTransactionSignInputRequest& MoneroTransactionSignInputRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MoneroTransactionSignInputRequest_messages_2dmonero_2eproto.base);
  return *internal_default_instance();
}


void MoneroTransactionSignInputRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:hw.trezor.messages.monero.MoneroTransactionSignInputRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      vini_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      vini_hmac_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      pseudo_out_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000008u) {
      pseudo_out_hmac_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000010u) {
      pseudo_out_alpha_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000020u) {
      spend_key_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(src_entr_ != nullptr);
      src_entr_->Clear();
    }
  }
  orig_idx_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MoneroTransactionSignInputRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .hw.trezor.messages.monero.MoneroTransactionSourceEntry src_entr = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_src_entr(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes vini = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_vini();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes vini_hmac = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_vini_hmac();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes pseudo_out = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_pseudo_out();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes pseudo_out_hmac = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_pseudo_out_hmac();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes pseudo_out_alpha = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_pseudo_out_alpha();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes spend_key = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_spend_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 orig_idx = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_orig_idx(&has_bits);
          orig_idx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MoneroTransactionSignInputRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hw.trezor.messages.monero.MoneroTransactionSignInputRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .hw.trezor.messages.monero.MoneroTransactionSourceEntry src_entr = 1;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::src_entr(this), target, stream);
  }

  // optional bytes vini = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_vini(), target);
  }

  // optional bytes vini_hmac = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_vini_hmac(), target);
  }

  // optional bytes pseudo_out = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_pseudo_out(), target);
  }

  // optional bytes pseudo_out_hmac = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->WriteBytesMaybeAliased(
        5, this->_internal_pseudo_out_hmac(), target);
  }

  // optional bytes pseudo_out_alpha = 6;
  if (cached_has_bits & 0x00000010u) {
    target = stream->WriteBytesMaybeAliased(
        6, this->_internal_pseudo_out_alpha(), target);
  }

  // optional bytes spend_key = 7;
  if (cached_has_bits & 0x00000020u) {
    target = stream->WriteBytesMaybeAliased(
        7, this->_internal_spend_key(), target);
  }

  // optional uint32 orig_idx = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(8, this->_internal_orig_idx(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hw.trezor.messages.monero.MoneroTransactionSignInputRequest)
  return target;
}

size_t MoneroTransactionSignInputRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hw.trezor.messages.monero.MoneroTransactionSignInputRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional bytes vini = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_vini());
    }

    // optional bytes vini_hmac = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_vini_hmac());
    }

    // optional bytes pseudo_out = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_pseudo_out());
    }

    // optional bytes pseudo_out_hmac = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_pseudo_out_hmac());
    }

    // optional bytes pseudo_out_alpha = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_pseudo_out_alpha());
    }

    // optional bytes spend_key = 7;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_spend_key());
    }

    // optional .hw.trezor.messages.monero.MoneroTransactionSourceEntry src_entr = 1;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *src_entr_);
    }

    // optional uint32 orig_idx = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_orig_idx());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MoneroTransactionSignInputRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hw.trezor.messages.monero.MoneroTransactionSignInputRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const MoneroTransactionSignInputRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MoneroTransactionSignInputRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hw.trezor.messages.monero.MoneroTransactionSignInputRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hw.trezor.messages.monero.MoneroTransactionSignInputRequest)
    MergeFrom(*source);
  }
}

void MoneroTransactionSignInputRequest::MergeFrom(const MoneroTransactionSignInputRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hw.trezor.messages.monero.MoneroTransactionSignInputRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      vini_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.vini_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      vini_hmac_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.vini_hmac_);
    }
    if (cached_has_bits & 0x00000004u) {
      _has_bits_[0] |= 0x00000004u;
      pseudo_out_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.pseudo_out_);
    }
    if (cached_has_bits & 0x00000008u) {
      _has_bits_[0] |= 0x00000008u;
      pseudo_out_hmac_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.pseudo_out_hmac_);
    }
    if (cached_has_bits & 0x00000010u) {
      _has_bits_[0] |= 0x00000010u;
      pseudo_out_alpha_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.pseudo_out_alpha_);
    }
    if (cached_has_bits & 0x00000020u) {
      _has_bits_[0] |= 0x00000020u;
      spend_key_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.spend_key_);
    }
    if (cached_has_bits & 0x00000040u) {
      _internal_mutable_src_entr()->::hw::trezor::messages::monero::MoneroTransactionSourceEntry::MergeFrom(from._internal_src_entr());
    }
    if (cached_has_bits & 0x00000080u) {
      orig_idx_ = from.orig_idx_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MoneroTransactionSignInputRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hw.trezor.messages.monero.MoneroTransactionSignInputRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MoneroTransactionSignInputRequest::CopyFrom(const MoneroTransactionSignInputRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hw.trezor.messages.monero.MoneroTransactionSignInputRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MoneroTransactionSignInputRequest::IsInitialized() const {
  return true;
}

void MoneroTransactionSignInputRequest::InternalSwap(MoneroTransactionSignInputRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  vini_.Swap(&other->vini_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  vini_hmac_.Swap(&other->vini_hmac_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  pseudo_out_.Swap(&other->pseudo_out_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  pseudo_out_hmac_.Swap(&other->pseudo_out_hmac_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  pseudo_out_alpha_.Swap(&other->pseudo_out_alpha_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  spend_key_.Swap(&other->spend_key_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(src_entr_, other->src_entr_);
  swap(orig_idx_, other->orig_idx_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MoneroTransactionSignInputRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MoneroTransactionSignInputAck::InitAsDefaultInstance() {
}
class MoneroTransactionSignInputAck::_Internal {
 public:
  using HasBits = decltype(std::declval<MoneroTransactionSignInputAck>()._has_bits_);
  static void set_has_signature(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_pseudo_out(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

MoneroTransactionSignInputAck::MoneroTransactionSignInputAck()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hw.trezor.messages.monero.MoneroTransactionSignInputAck)
}
MoneroTransactionSignInputAck::MoneroTransactionSignInputAck(const MoneroTransactionSignInputAck& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  signature_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_signature()) {
    signature_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.signature_);
  }
  pseudo_out_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_pseudo_out()) {
    pseudo_out_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.pseudo_out_);
  }
  // @@protoc_insertion_point(copy_constructor:hw.trezor.messages.monero.MoneroTransactionSignInputAck)
}

void MoneroTransactionSignInputAck::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MoneroTransactionSignInputAck_messages_2dmonero_2eproto.base);
  signature_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  pseudo_out_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

MoneroTransactionSignInputAck::~MoneroTransactionSignInputAck() {
  // @@protoc_insertion_point(destructor:hw.trezor.messages.monero.MoneroTransactionSignInputAck)
  SharedDtor();
}

void MoneroTransactionSignInputAck::SharedDtor() {
  signature_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  pseudo_out_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MoneroTransactionSignInputAck::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MoneroTransactionSignInputAck& MoneroTransactionSignInputAck::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MoneroTransactionSignInputAck_messages_2dmonero_2eproto.base);
  return *internal_default_instance();
}


void MoneroTransactionSignInputAck::Clear() {
// @@protoc_insertion_point(message_clear_start:hw.trezor.messages.monero.MoneroTransactionSignInputAck)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      signature_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      pseudo_out_.ClearNonDefaultToEmptyNoArena();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MoneroTransactionSignInputAck::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bytes signature = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_signature();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes pseudo_out = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_pseudo_out();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MoneroTransactionSignInputAck::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hw.trezor.messages.monero.MoneroTransactionSignInputAck)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes signature = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_signature(), target);
  }

  // optional bytes pseudo_out = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_pseudo_out(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hw.trezor.messages.monero.MoneroTransactionSignInputAck)
  return target;
}

size_t MoneroTransactionSignInputAck::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hw.trezor.messages.monero.MoneroTransactionSignInputAck)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional bytes signature = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_signature());
    }

    // optional bytes pseudo_out = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_pseudo_out());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MoneroTransactionSignInputAck::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hw.trezor.messages.monero.MoneroTransactionSignInputAck)
  GOOGLE_DCHECK_NE(&from, this);
  const MoneroTransactionSignInputAck* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MoneroTransactionSignInputAck>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hw.trezor.messages.monero.MoneroTransactionSignInputAck)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hw.trezor.messages.monero.MoneroTransactionSignInputAck)
    MergeFrom(*source);
  }
}

void MoneroTransactionSignInputAck::MergeFrom(const MoneroTransactionSignInputAck& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hw.trezor.messages.monero.MoneroTransactionSignInputAck)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      signature_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.signature_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      pseudo_out_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.pseudo_out_);
    }
  }
}

void MoneroTransactionSignInputAck::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hw.trezor.messages.monero.MoneroTransactionSignInputAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MoneroTransactionSignInputAck::CopyFrom(const MoneroTransactionSignInputAck& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hw.trezor.messages.monero.MoneroTransactionSignInputAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MoneroTransactionSignInputAck::IsInitialized() const {
  return true;
}

void MoneroTransactionSignInputAck::InternalSwap(MoneroTransactionSignInputAck* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  signature_.Swap(&other->signature_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  pseudo_out_.Swap(&other->pseudo_out_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata MoneroTransactionSignInputAck::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MoneroTransactionFinalRequest::InitAsDefaultInstance() {
}
class MoneroTransactionFinalRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<MoneroTransactionFinalRequest>()._has_bits_);
};

MoneroTransactionFinalRequest::MoneroTransactionFinalRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hw.trezor.messages.monero.MoneroTransactionFinalRequest)
}
MoneroTransactionFinalRequest::MoneroTransactionFinalRequest(const MoneroTransactionFinalRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:hw.trezor.messages.monero.MoneroTransactionFinalRequest)
}

void MoneroTransactionFinalRequest::SharedCtor() {
}

MoneroTransactionFinalRequest::~MoneroTransactionFinalRequest() {
  // @@protoc_insertion_point(destructor:hw.trezor.messages.monero.MoneroTransactionFinalRequest)
  SharedDtor();
}

void MoneroTransactionFinalRequest::SharedDtor() {
}

void MoneroTransactionFinalRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MoneroTransactionFinalRequest& MoneroTransactionFinalRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MoneroTransactionFinalRequest_messages_2dmonero_2eproto.base);
  return *internal_default_instance();
}


void MoneroTransactionFinalRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:hw.trezor.messages.monero.MoneroTransactionFinalRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MoneroTransactionFinalRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MoneroTransactionFinalRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hw.trezor.messages.monero.MoneroTransactionFinalRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hw.trezor.messages.monero.MoneroTransactionFinalRequest)
  return target;
}

size_t MoneroTransactionFinalRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hw.trezor.messages.monero.MoneroTransactionFinalRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MoneroTransactionFinalRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hw.trezor.messages.monero.MoneroTransactionFinalRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const MoneroTransactionFinalRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MoneroTransactionFinalRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hw.trezor.messages.monero.MoneroTransactionFinalRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hw.trezor.messages.monero.MoneroTransactionFinalRequest)
    MergeFrom(*source);
  }
}

void MoneroTransactionFinalRequest::MergeFrom(const MoneroTransactionFinalRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hw.trezor.messages.monero.MoneroTransactionFinalRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void MoneroTransactionFinalRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hw.trezor.messages.monero.MoneroTransactionFinalRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MoneroTransactionFinalRequest::CopyFrom(const MoneroTransactionFinalRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hw.trezor.messages.monero.MoneroTransactionFinalRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MoneroTransactionFinalRequest::IsInitialized() const {
  return true;
}

void MoneroTransactionFinalRequest::InternalSwap(MoneroTransactionFinalRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata MoneroTransactionFinalRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MoneroTransactionFinalAck::InitAsDefaultInstance() {
}
class MoneroTransactionFinalAck::_Internal {
 public:
  using HasBits = decltype(std::declval<MoneroTransactionFinalAck>()._has_bits_);
  static void set_has_cout_key(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_salt(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_rand_mult(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_tx_enc_keys(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_opening_key(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

MoneroTransactionFinalAck::MoneroTransactionFinalAck()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hw.trezor.messages.monero.MoneroTransactionFinalAck)
}
MoneroTransactionFinalAck::MoneroTransactionFinalAck(const MoneroTransactionFinalAck& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  cout_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_cout_key()) {
    cout_key_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.cout_key_);
  }
  salt_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_salt()) {
    salt_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.salt_);
  }
  rand_mult_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_rand_mult()) {
    rand_mult_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.rand_mult_);
  }
  tx_enc_keys_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_tx_enc_keys()) {
    tx_enc_keys_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.tx_enc_keys_);
  }
  opening_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_opening_key()) {
    opening_key_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.opening_key_);
  }
  // @@protoc_insertion_point(copy_constructor:hw.trezor.messages.monero.MoneroTransactionFinalAck)
}

void MoneroTransactionFinalAck::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MoneroTransactionFinalAck_messages_2dmonero_2eproto.base);
  cout_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  salt_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  rand_mult_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  tx_enc_keys_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  opening_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

MoneroTransactionFinalAck::~MoneroTransactionFinalAck() {
  // @@protoc_insertion_point(destructor:hw.trezor.messages.monero.MoneroTransactionFinalAck)
  SharedDtor();
}

void MoneroTransactionFinalAck::SharedDtor() {
  cout_key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  salt_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  rand_mult_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  tx_enc_keys_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  opening_key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MoneroTransactionFinalAck::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MoneroTransactionFinalAck& MoneroTransactionFinalAck::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MoneroTransactionFinalAck_messages_2dmonero_2eproto.base);
  return *internal_default_instance();
}


void MoneroTransactionFinalAck::Clear() {
// @@protoc_insertion_point(message_clear_start:hw.trezor.messages.monero.MoneroTransactionFinalAck)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      cout_key_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      salt_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      rand_mult_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000008u) {
      tx_enc_keys_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000010u) {
      opening_key_.ClearNonDefaultToEmptyNoArena();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MoneroTransactionFinalAck::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bytes cout_key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_cout_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes salt = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_salt();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes rand_mult = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_rand_mult();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes tx_enc_keys = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_tx_enc_keys();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes opening_key = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_opening_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MoneroTransactionFinalAck::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hw.trezor.messages.monero.MoneroTransactionFinalAck)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes cout_key = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_cout_key(), target);
  }

  // optional bytes salt = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_salt(), target);
  }

  // optional bytes rand_mult = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_rand_mult(), target);
  }

  // optional bytes tx_enc_keys = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_tx_enc_keys(), target);
  }

  // optional bytes opening_key = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->WriteBytesMaybeAliased(
        5, this->_internal_opening_key(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hw.trezor.messages.monero.MoneroTransactionFinalAck)
  return target;
}

size_t MoneroTransactionFinalAck::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hw.trezor.messages.monero.MoneroTransactionFinalAck)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional bytes cout_key = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_cout_key());
    }

    // optional bytes salt = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_salt());
    }

    // optional bytes rand_mult = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_rand_mult());
    }

    // optional bytes tx_enc_keys = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_tx_enc_keys());
    }

    // optional bytes opening_key = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_opening_key());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MoneroTransactionFinalAck::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hw.trezor.messages.monero.MoneroTransactionFinalAck)
  GOOGLE_DCHECK_NE(&from, this);
  const MoneroTransactionFinalAck* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MoneroTransactionFinalAck>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hw.trezor.messages.monero.MoneroTransactionFinalAck)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hw.trezor.messages.monero.MoneroTransactionFinalAck)
    MergeFrom(*source);
  }
}

void MoneroTransactionFinalAck::MergeFrom(const MoneroTransactionFinalAck& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hw.trezor.messages.monero.MoneroTransactionFinalAck)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      cout_key_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.cout_key_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      salt_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.salt_);
    }
    if (cached_has_bits & 0x00000004u) {
      _has_bits_[0] |= 0x00000004u;
      rand_mult_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.rand_mult_);
    }
    if (cached_has_bits & 0x00000008u) {
      _has_bits_[0] |= 0x00000008u;
      tx_enc_keys_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.tx_enc_keys_);
    }
    if (cached_has_bits & 0x00000010u) {
      _has_bits_[0] |= 0x00000010u;
      opening_key_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.opening_key_);
    }
  }
}

void MoneroTransactionFinalAck::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hw.trezor.messages.monero.MoneroTransactionFinalAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MoneroTransactionFinalAck::CopyFrom(const MoneroTransactionFinalAck& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hw.trezor.messages.monero.MoneroTransactionFinalAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MoneroTransactionFinalAck::IsInitialized() const {
  return true;
}

void MoneroTransactionFinalAck::InternalSwap(MoneroTransactionFinalAck* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  cout_key_.Swap(&other->cout_key_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  salt_.Swap(&other->salt_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  rand_mult_.Swap(&other->rand_mult_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  tx_enc_keys_.Swap(&other->tx_enc_keys_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  opening_key_.Swap(&other->opening_key_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata MoneroTransactionFinalAck::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MoneroKeyImageExportInitRequest_MoneroSubAddressIndicesList::InitAsDefaultInstance() {
}
class MoneroKeyImageExportInitRequest_MoneroSubAddressIndicesList::_Internal {
 public:
  using HasBits = decltype(std::declval<MoneroKeyImageExportInitRequest_MoneroSubAddressIndicesList>()._has_bits_);
  static void set_has_account(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

MoneroKeyImageExportInitRequest_MoneroSubAddressIndicesList::MoneroKeyImageExportInitRequest_MoneroSubAddressIndicesList()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hw.trezor.messages.monero.MoneroKeyImageExportInitRequest.MoneroSubAddressIndicesList)
}
MoneroKeyImageExportInitRequest_MoneroSubAddressIndicesList::MoneroKeyImageExportInitRequest_MoneroSubAddressIndicesList(const MoneroKeyImageExportInitRequest_MoneroSubAddressIndicesList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      minor_indices_(from.minor_indices_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  account_ = from.account_;
  // @@protoc_insertion_point(copy_constructor:hw.trezor.messages.monero.MoneroKeyImageExportInitRequest.MoneroSubAddressIndicesList)
}

void MoneroKeyImageExportInitRequest_MoneroSubAddressIndicesList::SharedCtor() {
  account_ = 0u;
}

MoneroKeyImageExportInitRequest_MoneroSubAddressIndicesList::~MoneroKeyImageExportInitRequest_MoneroSubAddressIndicesList() {
  // @@protoc_insertion_point(destructor:hw.trezor.messages.monero.MoneroKeyImageExportInitRequest.MoneroSubAddressIndicesList)
  SharedDtor();
}

void MoneroKeyImageExportInitRequest_MoneroSubAddressIndicesList::SharedDtor() {
}

void MoneroKeyImageExportInitRequest_MoneroSubAddressIndicesList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MoneroKeyImageExportInitRequest_MoneroSubAddressIndicesList& MoneroKeyImageExportInitRequest_MoneroSubAddressIndicesList::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MoneroKeyImageExportInitRequest_MoneroSubAddressIndicesList_messages_2dmonero_2eproto.base);
  return *internal_default_instance();
}


void MoneroKeyImageExportInitRequest_MoneroSubAddressIndicesList::Clear() {
// @@protoc_insertion_point(message_clear_start:hw.trezor.messages.monero.MoneroKeyImageExportInitRequest.MoneroSubAddressIndicesList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  minor_indices_.Clear();
  account_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MoneroKeyImageExportInitRequest_MoneroSubAddressIndicesList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 account = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_account(&has_bits);
          account_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 minor_indices = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_minor_indices(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<16>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_minor_indices(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MoneroKeyImageExportInitRequest_MoneroSubAddressIndicesList::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hw.trezor.messages.monero.MoneroKeyImageExportInitRequest.MoneroSubAddressIndicesList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 account = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_account(), target);
  }

  // repeated uint32 minor_indices = 2;
  for (int i = 0, n = this->_internal_minor_indices_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_minor_indices(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hw.trezor.messages.monero.MoneroKeyImageExportInitRequest.MoneroSubAddressIndicesList)
  return target;
}

size_t MoneroKeyImageExportInitRequest_MoneroSubAddressIndicesList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hw.trezor.messages.monero.MoneroKeyImageExportInitRequest.MoneroSubAddressIndicesList)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 minor_indices = 2;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->minor_indices_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_minor_indices_size());
    total_size += data_size;
  }

  // optional uint32 account = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_account());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MoneroKeyImageExportInitRequest_MoneroSubAddressIndicesList::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hw.trezor.messages.monero.MoneroKeyImageExportInitRequest.MoneroSubAddressIndicesList)
  GOOGLE_DCHECK_NE(&from, this);
  const MoneroKeyImageExportInitRequest_MoneroSubAddressIndicesList* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MoneroKeyImageExportInitRequest_MoneroSubAddressIndicesList>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hw.trezor.messages.monero.MoneroKeyImageExportInitRequest.MoneroSubAddressIndicesList)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hw.trezor.messages.monero.MoneroKeyImageExportInitRequest.MoneroSubAddressIndicesList)
    MergeFrom(*source);
  }
}

void MoneroKeyImageExportInitRequest_MoneroSubAddressIndicesList::MergeFrom(const MoneroKeyImageExportInitRequest_MoneroSubAddressIndicesList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hw.trezor.messages.monero.MoneroKeyImageExportInitRequest.MoneroSubAddressIndicesList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  minor_indices_.MergeFrom(from.minor_indices_);
  if (from._internal_has_account()) {
    _internal_set_account(from._internal_account());
  }
}

void MoneroKeyImageExportInitRequest_MoneroSubAddressIndicesList::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hw.trezor.messages.monero.MoneroKeyImageExportInitRequest.MoneroSubAddressIndicesList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MoneroKeyImageExportInitRequest_MoneroSubAddressIndicesList::CopyFrom(const MoneroKeyImageExportInitRequest_MoneroSubAddressIndicesList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hw.trezor.messages.monero.MoneroKeyImageExportInitRequest.MoneroSubAddressIndicesList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MoneroKeyImageExportInitRequest_MoneroSubAddressIndicesList::IsInitialized() const {
  return true;
}

void MoneroKeyImageExportInitRequest_MoneroSubAddressIndicesList::InternalSwap(MoneroKeyImageExportInitRequest_MoneroSubAddressIndicesList* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  minor_indices_.InternalSwap(&other->minor_indices_);
  swap(account_, other->account_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MoneroKeyImageExportInitRequest_MoneroSubAddressIndicesList::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MoneroKeyImageExportInitRequest::InitAsDefaultInstance() {
}
class MoneroKeyImageExportInitRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<MoneroKeyImageExportInitRequest>()._has_bits_);
  static void set_has_num(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_hash(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_network_type(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

MoneroKeyImageExportInitRequest::MoneroKeyImageExportInitRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hw.trezor.messages.monero.MoneroKeyImageExportInitRequest)
}
MoneroKeyImageExportInitRequest::MoneroKeyImageExportInitRequest(const MoneroKeyImageExportInitRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      address_n_(from.address_n_),
      subs_(from.subs_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_hash()) {
    hash_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.hash_);
  }
  ::memcpy(&num_, &from.num_,
    static_cast<size_t>(reinterpret_cast<char*>(&network_type_) -
    reinterpret_cast<char*>(&num_)) + sizeof(network_type_));
  // @@protoc_insertion_point(copy_constructor:hw.trezor.messages.monero.MoneroKeyImageExportInitRequest)
}

void MoneroKeyImageExportInitRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MoneroKeyImageExportInitRequest_messages_2dmonero_2eproto.base);
  hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&num_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&network_type_) -
      reinterpret_cast<char*>(&num_)) + sizeof(network_type_));
}

MoneroKeyImageExportInitRequest::~MoneroKeyImageExportInitRequest() {
  // @@protoc_insertion_point(destructor:hw.trezor.messages.monero.MoneroKeyImageExportInitRequest)
  SharedDtor();
}

void MoneroKeyImageExportInitRequest::SharedDtor() {
  hash_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MoneroKeyImageExportInitRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MoneroKeyImageExportInitRequest& MoneroKeyImageExportInitRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MoneroKeyImageExportInitRequest_messages_2dmonero_2eproto.base);
  return *internal_default_instance();
}


void MoneroKeyImageExportInitRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:hw.trezor.messages.monero.MoneroKeyImageExportInitRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  address_n_.Clear();
  subs_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    hash_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&num_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&network_type_) -
        reinterpret_cast<char*>(&num_)) + sizeof(network_type_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MoneroKeyImageExportInitRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint64 num = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_num(&has_bits);
          num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes hash = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_hash();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 address_n = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_address_n(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<24>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_address_n(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 network_type = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_network_type(&has_bits);
          network_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .hw.trezor.messages.monero.MoneroKeyImageExportInitRequest.MoneroSubAddressIndicesList subs = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_subs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MoneroKeyImageExportInitRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hw.trezor.messages.monero.MoneroKeyImageExportInitRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 num = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_num(), target);
  }

  // optional bytes hash = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_hash(), target);
  }

  // repeated uint32 address_n = 3;
  for (int i = 0, n = this->_internal_address_n_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_address_n(i), target);
  }

  // optional uint32 network_type = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_network_type(), target);
  }

  // repeated .hw.trezor.messages.monero.MoneroKeyImageExportInitRequest.MoneroSubAddressIndicesList subs = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_subs_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_subs(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hw.trezor.messages.monero.MoneroKeyImageExportInitRequest)
  return target;
}

size_t MoneroKeyImageExportInitRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hw.trezor.messages.monero.MoneroKeyImageExportInitRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 address_n = 3;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->address_n_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_address_n_size());
    total_size += data_size;
  }

  // repeated .hw.trezor.messages.monero.MoneroKeyImageExportInitRequest.MoneroSubAddressIndicesList subs = 5;
  total_size += 1UL * this->_internal_subs_size();
  for (const auto& msg : this->subs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional bytes hash = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_hash());
    }

    // optional uint64 num = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_num());
    }

    // optional uint32 network_type = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_network_type());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MoneroKeyImageExportInitRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hw.trezor.messages.monero.MoneroKeyImageExportInitRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const MoneroKeyImageExportInitRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MoneroKeyImageExportInitRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hw.trezor.messages.monero.MoneroKeyImageExportInitRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hw.trezor.messages.monero.MoneroKeyImageExportInitRequest)
    MergeFrom(*source);
  }
}

void MoneroKeyImageExportInitRequest::MergeFrom(const MoneroKeyImageExportInitRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hw.trezor.messages.monero.MoneroKeyImageExportInitRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  address_n_.MergeFrom(from.address_n_);
  subs_.MergeFrom(from.subs_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      hash_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.hash_);
    }
    if (cached_has_bits & 0x00000002u) {
      num_ = from.num_;
    }
    if (cached_has_bits & 0x00000004u) {
      network_type_ = from.network_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MoneroKeyImageExportInitRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hw.trezor.messages.monero.MoneroKeyImageExportInitRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MoneroKeyImageExportInitRequest::CopyFrom(const MoneroKeyImageExportInitRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hw.trezor.messages.monero.MoneroKeyImageExportInitRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MoneroKeyImageExportInitRequest::IsInitialized() const {
  return true;
}

void MoneroKeyImageExportInitRequest::InternalSwap(MoneroKeyImageExportInitRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  address_n_.InternalSwap(&other->address_n_);
  subs_.InternalSwap(&other->subs_);
  hash_.Swap(&other->hash_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(num_, other->num_);
  swap(network_type_, other->network_type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MoneroKeyImageExportInitRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MoneroKeyImageExportInitAck::InitAsDefaultInstance() {
}
class MoneroKeyImageExportInitAck::_Internal {
 public:
  using HasBits = decltype(std::declval<MoneroKeyImageExportInitAck>()._has_bits_);
};

MoneroKeyImageExportInitAck::MoneroKeyImageExportInitAck()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hw.trezor.messages.monero.MoneroKeyImageExportInitAck)
}
MoneroKeyImageExportInitAck::MoneroKeyImageExportInitAck(const MoneroKeyImageExportInitAck& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:hw.trezor.messages.monero.MoneroKeyImageExportInitAck)
}

void MoneroKeyImageExportInitAck::SharedCtor() {
}

MoneroKeyImageExportInitAck::~MoneroKeyImageExportInitAck() {
  // @@protoc_insertion_point(destructor:hw.trezor.messages.monero.MoneroKeyImageExportInitAck)
  SharedDtor();
}

void MoneroKeyImageExportInitAck::SharedDtor() {
}

void MoneroKeyImageExportInitAck::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MoneroKeyImageExportInitAck& MoneroKeyImageExportInitAck::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MoneroKeyImageExportInitAck_messages_2dmonero_2eproto.base);
  return *internal_default_instance();
}


void MoneroKeyImageExportInitAck::Clear() {
// @@protoc_insertion_point(message_clear_start:hw.trezor.messages.monero.MoneroKeyImageExportInitAck)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MoneroKeyImageExportInitAck::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MoneroKeyImageExportInitAck::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hw.trezor.messages.monero.MoneroKeyImageExportInitAck)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hw.trezor.messages.monero.MoneroKeyImageExportInitAck)
  return target;
}

size_t MoneroKeyImageExportInitAck::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hw.trezor.messages.monero.MoneroKeyImageExportInitAck)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MoneroKeyImageExportInitAck::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hw.trezor.messages.monero.MoneroKeyImageExportInitAck)
  GOOGLE_DCHECK_NE(&from, this);
  const MoneroKeyImageExportInitAck* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MoneroKeyImageExportInitAck>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hw.trezor.messages.monero.MoneroKeyImageExportInitAck)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hw.trezor.messages.monero.MoneroKeyImageExportInitAck)
    MergeFrom(*source);
  }
}

void MoneroKeyImageExportInitAck::MergeFrom(const MoneroKeyImageExportInitAck& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hw.trezor.messages.monero.MoneroKeyImageExportInitAck)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void MoneroKeyImageExportInitAck::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hw.trezor.messages.monero.MoneroKeyImageExportInitAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MoneroKeyImageExportInitAck::CopyFrom(const MoneroKeyImageExportInitAck& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hw.trezor.messages.monero.MoneroKeyImageExportInitAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MoneroKeyImageExportInitAck::IsInitialized() const {
  return true;
}

void MoneroKeyImageExportInitAck::InternalSwap(MoneroKeyImageExportInitAck* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata MoneroKeyImageExportInitAck::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MoneroKeyImageSyncStepRequest_MoneroTransferDetails::InitAsDefaultInstance() {
}
class MoneroKeyImageSyncStepRequest_MoneroTransferDetails::_Internal {
 public:
  using HasBits = decltype(std::declval<MoneroKeyImageSyncStepRequest_MoneroTransferDetails>()._has_bits_);
  static void set_has_out_key(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_tx_pub_key(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_internal_output_index(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_sub_addr_major(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_sub_addr_minor(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

MoneroKeyImageSyncStepRequest_MoneroTransferDetails::MoneroKeyImageSyncStepRequest_MoneroTransferDetails()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hw.trezor.messages.monero.MoneroKeyImageSyncStepRequest.MoneroTransferDetails)
}
MoneroKeyImageSyncStepRequest_MoneroTransferDetails::MoneroKeyImageSyncStepRequest_MoneroTransferDetails(const MoneroKeyImageSyncStepRequest_MoneroTransferDetails& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      additional_tx_pub_keys_(from.additional_tx_pub_keys_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  out_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_out_key()) {
    out_key_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.out_key_);
  }
  tx_pub_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_tx_pub_key()) {
    tx_pub_key_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.tx_pub_key_);
  }
  ::memcpy(&internal_output_index_, &from.internal_output_index_,
    static_cast<size_t>(reinterpret_cast<char*>(&sub_addr_minor_) -
    reinterpret_cast<char*>(&internal_output_index_)) + sizeof(sub_addr_minor_));
  // @@protoc_insertion_point(copy_constructor:hw.trezor.messages.monero.MoneroKeyImageSyncStepRequest.MoneroTransferDetails)
}

void MoneroKeyImageSyncStepRequest_MoneroTransferDetails::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MoneroKeyImageSyncStepRequest_MoneroTransferDetails_messages_2dmonero_2eproto.base);
  out_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  tx_pub_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&internal_output_index_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sub_addr_minor_) -
      reinterpret_cast<char*>(&internal_output_index_)) + sizeof(sub_addr_minor_));
}

MoneroKeyImageSyncStepRequest_MoneroTransferDetails::~MoneroKeyImageSyncStepRequest_MoneroTransferDetails() {
  // @@protoc_insertion_point(destructor:hw.trezor.messages.monero.MoneroKeyImageSyncStepRequest.MoneroTransferDetails)
  SharedDtor();
}

void MoneroKeyImageSyncStepRequest_MoneroTransferDetails::SharedDtor() {
  out_key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  tx_pub_key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MoneroKeyImageSyncStepRequest_MoneroTransferDetails::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MoneroKeyImageSyncStepRequest_MoneroTransferDetails& MoneroKeyImageSyncStepRequest_MoneroTransferDetails::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MoneroKeyImageSyncStepRequest_MoneroTransferDetails_messages_2dmonero_2eproto.base);
  return *internal_default_instance();
}


void MoneroKeyImageSyncStepRequest_MoneroTransferDetails::Clear() {
// @@protoc_insertion_point(message_clear_start:hw.trezor.messages.monero.MoneroKeyImageSyncStepRequest.MoneroTransferDetails)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  additional_tx_pub_keys_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      out_key_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      tx_pub_key_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 0x0000001cu) {
    ::memset(&internal_output_index_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&sub_addr_minor_) -
        reinterpret_cast<char*>(&internal_output_index_)) + sizeof(sub_addr_minor_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MoneroKeyImageSyncStepRequest_MoneroTransferDetails::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bytes out_key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_out_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes tx_pub_key = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_tx_pub_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated bytes additional_tx_pub_keys = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_additional_tx_pub_keys();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // optional uint64 internal_output_index = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_internal_output_index(&has_bits);
          internal_output_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 sub_addr_major = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_sub_addr_major(&has_bits);
          sub_addr_major_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 sub_addr_minor = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_sub_addr_minor(&has_bits);
          sub_addr_minor_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MoneroKeyImageSyncStepRequest_MoneroTransferDetails::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hw.trezor.messages.monero.MoneroKeyImageSyncStepRequest.MoneroTransferDetails)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes out_key = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_out_key(), target);
  }

  // optional bytes tx_pub_key = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_tx_pub_key(), target);
  }

  // repeated bytes additional_tx_pub_keys = 3;
  for (int i = 0, n = this->_internal_additional_tx_pub_keys_size(); i < n; i++) {
    const auto& s = this->_internal_additional_tx_pub_keys(i);
    target = stream->WriteBytes(3, s, target);
  }

  // optional uint64 internal_output_index = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_internal_output_index(), target);
  }

  // optional uint32 sub_addr_major = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_sub_addr_major(), target);
  }

  // optional uint32 sub_addr_minor = 6;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_sub_addr_minor(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hw.trezor.messages.monero.MoneroKeyImageSyncStepRequest.MoneroTransferDetails)
  return target;
}

size_t MoneroKeyImageSyncStepRequest_MoneroTransferDetails::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hw.trezor.messages.monero.MoneroKeyImageSyncStepRequest.MoneroTransferDetails)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated bytes additional_tx_pub_keys = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(additional_tx_pub_keys_.size());
  for (int i = 0, n = additional_tx_pub_keys_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
      additional_tx_pub_keys_.Get(i));
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional bytes out_key = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_out_key());
    }

    // optional bytes tx_pub_key = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_tx_pub_key());
    }

    // optional uint64 internal_output_index = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_internal_output_index());
    }

    // optional uint32 sub_addr_major = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_sub_addr_major());
    }

    // optional uint32 sub_addr_minor = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_sub_addr_minor());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MoneroKeyImageSyncStepRequest_MoneroTransferDetails::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hw.trezor.messages.monero.MoneroKeyImageSyncStepRequest.MoneroTransferDetails)
  GOOGLE_DCHECK_NE(&from, this);
  const MoneroKeyImageSyncStepRequest_MoneroTransferDetails* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MoneroKeyImageSyncStepRequest_MoneroTransferDetails>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hw.trezor.messages.monero.MoneroKeyImageSyncStepRequest.MoneroTransferDetails)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hw.trezor.messages.monero.MoneroKeyImageSyncStepRequest.MoneroTransferDetails)
    MergeFrom(*source);
  }
}

void MoneroKeyImageSyncStepRequest_MoneroTransferDetails::MergeFrom(const MoneroKeyImageSyncStepRequest_MoneroTransferDetails& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hw.trezor.messages.monero.MoneroKeyImageSyncStepRequest.MoneroTransferDetails)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  additional_tx_pub_keys_.MergeFrom(from.additional_tx_pub_keys_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      out_key_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.out_key_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      tx_pub_key_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.tx_pub_key_);
    }
    if (cached_has_bits & 0x00000004u) {
      internal_output_index_ = from.internal_output_index_;
    }
    if (cached_has_bits & 0x00000008u) {
      sub_addr_major_ = from.sub_addr_major_;
    }
    if (cached_has_bits & 0x00000010u) {
      sub_addr_minor_ = from.sub_addr_minor_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MoneroKeyImageSyncStepRequest_MoneroTransferDetails::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hw.trezor.messages.monero.MoneroKeyImageSyncStepRequest.MoneroTransferDetails)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MoneroKeyImageSyncStepRequest_MoneroTransferDetails::CopyFrom(const MoneroKeyImageSyncStepRequest_MoneroTransferDetails& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hw.trezor.messages.monero.MoneroKeyImageSyncStepRequest.MoneroTransferDetails)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MoneroKeyImageSyncStepRequest_MoneroTransferDetails::IsInitialized() const {
  return true;
}

void MoneroKeyImageSyncStepRequest_MoneroTransferDetails::InternalSwap(MoneroKeyImageSyncStepRequest_MoneroTransferDetails* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  additional_tx_pub_keys_.InternalSwap(&other->additional_tx_pub_keys_);
  out_key_.Swap(&other->out_key_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  tx_pub_key_.Swap(&other->tx_pub_key_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(internal_output_index_, other->internal_output_index_);
  swap(sub_addr_major_, other->sub_addr_major_);
  swap(sub_addr_minor_, other->sub_addr_minor_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MoneroKeyImageSyncStepRequest_MoneroTransferDetails::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MoneroKeyImageSyncStepRequest::InitAsDefaultInstance() {
}
class MoneroKeyImageSyncStepRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<MoneroKeyImageSyncStepRequest>()._has_bits_);
};

MoneroKeyImageSyncStepRequest::MoneroKeyImageSyncStepRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hw.trezor.messages.monero.MoneroKeyImageSyncStepRequest)
}
MoneroKeyImageSyncStepRequest::MoneroKeyImageSyncStepRequest(const MoneroKeyImageSyncStepRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      tdis_(from.tdis_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:hw.trezor.messages.monero.MoneroKeyImageSyncStepRequest)
}

void MoneroKeyImageSyncStepRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MoneroKeyImageSyncStepRequest_messages_2dmonero_2eproto.base);
}

MoneroKeyImageSyncStepRequest::~MoneroKeyImageSyncStepRequest() {
  // @@protoc_insertion_point(destructor:hw.trezor.messages.monero.MoneroKeyImageSyncStepRequest)
  SharedDtor();
}

void MoneroKeyImageSyncStepRequest::SharedDtor() {
}

void MoneroKeyImageSyncStepRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MoneroKeyImageSyncStepRequest& MoneroKeyImageSyncStepRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MoneroKeyImageSyncStepRequest_messages_2dmonero_2eproto.base);
  return *internal_default_instance();
}


void MoneroKeyImageSyncStepRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:hw.trezor.messages.monero.MoneroKeyImageSyncStepRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tdis_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MoneroKeyImageSyncStepRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .hw.trezor.messages.monero.MoneroKeyImageSyncStepRequest.MoneroTransferDetails tdis = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_tdis(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MoneroKeyImageSyncStepRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hw.trezor.messages.monero.MoneroKeyImageSyncStepRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .hw.trezor.messages.monero.MoneroKeyImageSyncStepRequest.MoneroTransferDetails tdis = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_tdis_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_tdis(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hw.trezor.messages.monero.MoneroKeyImageSyncStepRequest)
  return target;
}

size_t MoneroKeyImageSyncStepRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hw.trezor.messages.monero.MoneroKeyImageSyncStepRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .hw.trezor.messages.monero.MoneroKeyImageSyncStepRequest.MoneroTransferDetails tdis = 1;
  total_size += 1UL * this->_internal_tdis_size();
  for (const auto& msg : this->tdis_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MoneroKeyImageSyncStepRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hw.trezor.messages.monero.MoneroKeyImageSyncStepRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const MoneroKeyImageSyncStepRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MoneroKeyImageSyncStepRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hw.trezor.messages.monero.MoneroKeyImageSyncStepRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hw.trezor.messages.monero.MoneroKeyImageSyncStepRequest)
    MergeFrom(*source);
  }
}

void MoneroKeyImageSyncStepRequest::MergeFrom(const MoneroKeyImageSyncStepRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hw.trezor.messages.monero.MoneroKeyImageSyncStepRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  tdis_.MergeFrom(from.tdis_);
}

void MoneroKeyImageSyncStepRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hw.trezor.messages.monero.MoneroKeyImageSyncStepRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MoneroKeyImageSyncStepRequest::CopyFrom(const MoneroKeyImageSyncStepRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hw.trezor.messages.monero.MoneroKeyImageSyncStepRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MoneroKeyImageSyncStepRequest::IsInitialized() const {
  return true;
}

void MoneroKeyImageSyncStepRequest::InternalSwap(MoneroKeyImageSyncStepRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  tdis_.InternalSwap(&other->tdis_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MoneroKeyImageSyncStepRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MoneroKeyImageSyncStepAck_MoneroExportedKeyImage::InitAsDefaultInstance() {
}
class MoneroKeyImageSyncStepAck_MoneroExportedKeyImage::_Internal {
 public:
  using HasBits = decltype(std::declval<MoneroKeyImageSyncStepAck_MoneroExportedKeyImage>()._has_bits_);
  static void set_has_iv(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_blob(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

MoneroKeyImageSyncStepAck_MoneroExportedKeyImage::MoneroKeyImageSyncStepAck_MoneroExportedKeyImage()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hw.trezor.messages.monero.MoneroKeyImageSyncStepAck.MoneroExportedKeyImage)
}
MoneroKeyImageSyncStepAck_MoneroExportedKeyImage::MoneroKeyImageSyncStepAck_MoneroExportedKeyImage(const MoneroKeyImageSyncStepAck_MoneroExportedKeyImage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  iv_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_iv()) {
    iv_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.iv_);
  }
  blob_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_blob()) {
    blob_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.blob_);
  }
  // @@protoc_insertion_point(copy_constructor:hw.trezor.messages.monero.MoneroKeyImageSyncStepAck.MoneroExportedKeyImage)
}

void MoneroKeyImageSyncStepAck_MoneroExportedKeyImage::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MoneroKeyImageSyncStepAck_MoneroExportedKeyImage_messages_2dmonero_2eproto.base);
  iv_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  blob_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

MoneroKeyImageSyncStepAck_MoneroExportedKeyImage::~MoneroKeyImageSyncStepAck_MoneroExportedKeyImage() {
  // @@protoc_insertion_point(destructor:hw.trezor.messages.monero.MoneroKeyImageSyncStepAck.MoneroExportedKeyImage)
  SharedDtor();
}

void MoneroKeyImageSyncStepAck_MoneroExportedKeyImage::SharedDtor() {
  iv_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  blob_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MoneroKeyImageSyncStepAck_MoneroExportedKeyImage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MoneroKeyImageSyncStepAck_MoneroExportedKeyImage& MoneroKeyImageSyncStepAck_MoneroExportedKeyImage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MoneroKeyImageSyncStepAck_MoneroExportedKeyImage_messages_2dmonero_2eproto.base);
  return *internal_default_instance();
}


void MoneroKeyImageSyncStepAck_MoneroExportedKeyImage::Clear() {
// @@protoc_insertion_point(message_clear_start:hw.trezor.messages.monero.MoneroKeyImageSyncStepAck.MoneroExportedKeyImage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      iv_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      blob_.ClearNonDefaultToEmptyNoArena();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MoneroKeyImageSyncStepAck_MoneroExportedKeyImage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bytes iv = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_iv();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes blob = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_blob();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MoneroKeyImageSyncStepAck_MoneroExportedKeyImage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hw.trezor.messages.monero.MoneroKeyImageSyncStepAck.MoneroExportedKeyImage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes iv = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_iv(), target);
  }

  // optional bytes blob = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_blob(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hw.trezor.messages.monero.MoneroKeyImageSyncStepAck.MoneroExportedKeyImage)
  return target;
}

size_t MoneroKeyImageSyncStepAck_MoneroExportedKeyImage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hw.trezor.messages.monero.MoneroKeyImageSyncStepAck.MoneroExportedKeyImage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional bytes iv = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_iv());
    }

    // optional bytes blob = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_blob());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MoneroKeyImageSyncStepAck_MoneroExportedKeyImage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hw.trezor.messages.monero.MoneroKeyImageSyncStepAck.MoneroExportedKeyImage)
  GOOGLE_DCHECK_NE(&from, this);
  const MoneroKeyImageSyncStepAck_MoneroExportedKeyImage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MoneroKeyImageSyncStepAck_MoneroExportedKeyImage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hw.trezor.messages.monero.MoneroKeyImageSyncStepAck.MoneroExportedKeyImage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hw.trezor.messages.monero.MoneroKeyImageSyncStepAck.MoneroExportedKeyImage)
    MergeFrom(*source);
  }
}

void MoneroKeyImageSyncStepAck_MoneroExportedKeyImage::MergeFrom(const MoneroKeyImageSyncStepAck_MoneroExportedKeyImage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hw.trezor.messages.monero.MoneroKeyImageSyncStepAck.MoneroExportedKeyImage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      iv_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.iv_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      blob_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.blob_);
    }
  }
}

void MoneroKeyImageSyncStepAck_MoneroExportedKeyImage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hw.trezor.messages.monero.MoneroKeyImageSyncStepAck.MoneroExportedKeyImage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MoneroKeyImageSyncStepAck_MoneroExportedKeyImage::CopyFrom(const MoneroKeyImageSyncStepAck_MoneroExportedKeyImage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hw.trezor.messages.monero.MoneroKeyImageSyncStepAck.MoneroExportedKeyImage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MoneroKeyImageSyncStepAck_MoneroExportedKeyImage::IsInitialized() const {
  return true;
}

void MoneroKeyImageSyncStepAck_MoneroExportedKeyImage::InternalSwap(MoneroKeyImageSyncStepAck_MoneroExportedKeyImage* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  iv_.Swap(&other->iv_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  blob_.Swap(&other->blob_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata MoneroKeyImageSyncStepAck_MoneroExportedKeyImage::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MoneroKeyImageSyncStepAck::InitAsDefaultInstance() {
}
class MoneroKeyImageSyncStepAck::_Internal {
 public:
  using HasBits = decltype(std::declval<MoneroKeyImageSyncStepAck>()._has_bits_);
};

MoneroKeyImageSyncStepAck::MoneroKeyImageSyncStepAck()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hw.trezor.messages.monero.MoneroKeyImageSyncStepAck)
}
MoneroKeyImageSyncStepAck::MoneroKeyImageSyncStepAck(const MoneroKeyImageSyncStepAck& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      kis_(from.kis_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:hw.trezor.messages.monero.MoneroKeyImageSyncStepAck)
}

void MoneroKeyImageSyncStepAck::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MoneroKeyImageSyncStepAck_messages_2dmonero_2eproto.base);
}

MoneroKeyImageSyncStepAck::~MoneroKeyImageSyncStepAck() {
  // @@protoc_insertion_point(destructor:hw.trezor.messages.monero.MoneroKeyImageSyncStepAck)
  SharedDtor();
}

void MoneroKeyImageSyncStepAck::SharedDtor() {
}

void MoneroKeyImageSyncStepAck::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MoneroKeyImageSyncStepAck& MoneroKeyImageSyncStepAck::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MoneroKeyImageSyncStepAck_messages_2dmonero_2eproto.base);
  return *internal_default_instance();
}


void MoneroKeyImageSyncStepAck::Clear() {
// @@protoc_insertion_point(message_clear_start:hw.trezor.messages.monero.MoneroKeyImageSyncStepAck)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  kis_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MoneroKeyImageSyncStepAck::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .hw.trezor.messages.monero.MoneroKeyImageSyncStepAck.MoneroExportedKeyImage kis = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_kis(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MoneroKeyImageSyncStepAck::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hw.trezor.messages.monero.MoneroKeyImageSyncStepAck)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .hw.trezor.messages.monero.MoneroKeyImageSyncStepAck.MoneroExportedKeyImage kis = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_kis_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_kis(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hw.trezor.messages.monero.MoneroKeyImageSyncStepAck)
  return target;
}

size_t MoneroKeyImageSyncStepAck::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hw.trezor.messages.monero.MoneroKeyImageSyncStepAck)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .hw.trezor.messages.monero.MoneroKeyImageSyncStepAck.MoneroExportedKeyImage kis = 1;
  total_size += 1UL * this->_internal_kis_size();
  for (const auto& msg : this->kis_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MoneroKeyImageSyncStepAck::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hw.trezor.messages.monero.MoneroKeyImageSyncStepAck)
  GOOGLE_DCHECK_NE(&from, this);
  const MoneroKeyImageSyncStepAck* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MoneroKeyImageSyncStepAck>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hw.trezor.messages.monero.MoneroKeyImageSyncStepAck)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hw.trezor.messages.monero.MoneroKeyImageSyncStepAck)
    MergeFrom(*source);
  }
}

void MoneroKeyImageSyncStepAck::MergeFrom(const MoneroKeyImageSyncStepAck& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hw.trezor.messages.monero.MoneroKeyImageSyncStepAck)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  kis_.MergeFrom(from.kis_);
}

void MoneroKeyImageSyncStepAck::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hw.trezor.messages.monero.MoneroKeyImageSyncStepAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MoneroKeyImageSyncStepAck::CopyFrom(const MoneroKeyImageSyncStepAck& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hw.trezor.messages.monero.MoneroKeyImageSyncStepAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MoneroKeyImageSyncStepAck::IsInitialized() const {
  return true;
}

void MoneroKeyImageSyncStepAck::InternalSwap(MoneroKeyImageSyncStepAck* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  kis_.InternalSwap(&other->kis_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MoneroKeyImageSyncStepAck::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MoneroKeyImageSyncFinalRequest::InitAsDefaultInstance() {
}
class MoneroKeyImageSyncFinalRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<MoneroKeyImageSyncFinalRequest>()._has_bits_);
};

MoneroKeyImageSyncFinalRequest::MoneroKeyImageSyncFinalRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hw.trezor.messages.monero.MoneroKeyImageSyncFinalRequest)
}
MoneroKeyImageSyncFinalRequest::MoneroKeyImageSyncFinalRequest(const MoneroKeyImageSyncFinalRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:hw.trezor.messages.monero.MoneroKeyImageSyncFinalRequest)
}

void MoneroKeyImageSyncFinalRequest::SharedCtor() {
}

MoneroKeyImageSyncFinalRequest::~MoneroKeyImageSyncFinalRequest() {
  // @@protoc_insertion_point(destructor:hw.trezor.messages.monero.MoneroKeyImageSyncFinalRequest)
  SharedDtor();
}

void MoneroKeyImageSyncFinalRequest::SharedDtor() {
}

void MoneroKeyImageSyncFinalRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MoneroKeyImageSyncFinalRequest& MoneroKeyImageSyncFinalRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MoneroKeyImageSyncFinalRequest_messages_2dmonero_2eproto.base);
  return *internal_default_instance();
}


void MoneroKeyImageSyncFinalRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:hw.trezor.messages.monero.MoneroKeyImageSyncFinalRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MoneroKeyImageSyncFinalRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MoneroKeyImageSyncFinalRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hw.trezor.messages.monero.MoneroKeyImageSyncFinalRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hw.trezor.messages.monero.MoneroKeyImageSyncFinalRequest)
  return target;
}

size_t MoneroKeyImageSyncFinalRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hw.trezor.messages.monero.MoneroKeyImageSyncFinalRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MoneroKeyImageSyncFinalRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hw.trezor.messages.monero.MoneroKeyImageSyncFinalRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const MoneroKeyImageSyncFinalRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MoneroKeyImageSyncFinalRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hw.trezor.messages.monero.MoneroKeyImageSyncFinalRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hw.trezor.messages.monero.MoneroKeyImageSyncFinalRequest)
    MergeFrom(*source);
  }
}

void MoneroKeyImageSyncFinalRequest::MergeFrom(const MoneroKeyImageSyncFinalRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hw.trezor.messages.monero.MoneroKeyImageSyncFinalRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void MoneroKeyImageSyncFinalRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hw.trezor.messages.monero.MoneroKeyImageSyncFinalRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MoneroKeyImageSyncFinalRequest::CopyFrom(const MoneroKeyImageSyncFinalRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hw.trezor.messages.monero.MoneroKeyImageSyncFinalRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MoneroKeyImageSyncFinalRequest::IsInitialized() const {
  return true;
}

void MoneroKeyImageSyncFinalRequest::InternalSwap(MoneroKeyImageSyncFinalRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata MoneroKeyImageSyncFinalRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MoneroKeyImageSyncFinalAck::InitAsDefaultInstance() {
}
class MoneroKeyImageSyncFinalAck::_Internal {
 public:
  using HasBits = decltype(std::declval<MoneroKeyImageSyncFinalAck>()._has_bits_);
  static void set_has_enc_key(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

MoneroKeyImageSyncFinalAck::MoneroKeyImageSyncFinalAck()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hw.trezor.messages.monero.MoneroKeyImageSyncFinalAck)
}
MoneroKeyImageSyncFinalAck::MoneroKeyImageSyncFinalAck(const MoneroKeyImageSyncFinalAck& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  enc_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_enc_key()) {
    enc_key_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.enc_key_);
  }
  // @@protoc_insertion_point(copy_constructor:hw.trezor.messages.monero.MoneroKeyImageSyncFinalAck)
}

void MoneroKeyImageSyncFinalAck::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MoneroKeyImageSyncFinalAck_messages_2dmonero_2eproto.base);
  enc_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

MoneroKeyImageSyncFinalAck::~MoneroKeyImageSyncFinalAck() {
  // @@protoc_insertion_point(destructor:hw.trezor.messages.monero.MoneroKeyImageSyncFinalAck)
  SharedDtor();
}

void MoneroKeyImageSyncFinalAck::SharedDtor() {
  enc_key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MoneroKeyImageSyncFinalAck::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MoneroKeyImageSyncFinalAck& MoneroKeyImageSyncFinalAck::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MoneroKeyImageSyncFinalAck_messages_2dmonero_2eproto.base);
  return *internal_default_instance();
}


void MoneroKeyImageSyncFinalAck::Clear() {
// @@protoc_insertion_point(message_clear_start:hw.trezor.messages.monero.MoneroKeyImageSyncFinalAck)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    enc_key_.ClearNonDefaultToEmptyNoArena();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MoneroKeyImageSyncFinalAck::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bytes enc_key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_enc_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MoneroKeyImageSyncFinalAck::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hw.trezor.messages.monero.MoneroKeyImageSyncFinalAck)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes enc_key = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_enc_key(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hw.trezor.messages.monero.MoneroKeyImageSyncFinalAck)
  return target;
}

size_t MoneroKeyImageSyncFinalAck::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hw.trezor.messages.monero.MoneroKeyImageSyncFinalAck)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bytes enc_key = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_enc_key());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MoneroKeyImageSyncFinalAck::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hw.trezor.messages.monero.MoneroKeyImageSyncFinalAck)
  GOOGLE_DCHECK_NE(&from, this);
  const MoneroKeyImageSyncFinalAck* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MoneroKeyImageSyncFinalAck>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hw.trezor.messages.monero.MoneroKeyImageSyncFinalAck)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hw.trezor.messages.monero.MoneroKeyImageSyncFinalAck)
    MergeFrom(*source);
  }
}

void MoneroKeyImageSyncFinalAck::MergeFrom(const MoneroKeyImageSyncFinalAck& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hw.trezor.messages.monero.MoneroKeyImageSyncFinalAck)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_enc_key()) {
    _has_bits_[0] |= 0x00000001u;
    enc_key_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.enc_key_);
  }
}

void MoneroKeyImageSyncFinalAck::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hw.trezor.messages.monero.MoneroKeyImageSyncFinalAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MoneroKeyImageSyncFinalAck::CopyFrom(const MoneroKeyImageSyncFinalAck& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hw.trezor.messages.monero.MoneroKeyImageSyncFinalAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MoneroKeyImageSyncFinalAck::IsInitialized() const {
  return true;
}

void MoneroKeyImageSyncFinalAck::InternalSwap(MoneroKeyImageSyncFinalAck* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  enc_key_.Swap(&other->enc_key_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata MoneroKeyImageSyncFinalAck::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MoneroGetTxKeyRequest::InitAsDefaultInstance() {
}
class MoneroGetTxKeyRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<MoneroGetTxKeyRequest>()._has_bits_);
  static void set_has_network_type(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_salt1(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_salt2(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_tx_enc_keys(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_tx_prefix_hash(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_reason(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_view_public_key(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

MoneroGetTxKeyRequest::MoneroGetTxKeyRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hw.trezor.messages.monero.MoneroGetTxKeyRequest)
}
MoneroGetTxKeyRequest::MoneroGetTxKeyRequest(const MoneroGetTxKeyRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      address_n_(from.address_n_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  salt1_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_salt1()) {
    salt1_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.salt1_);
  }
  salt2_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_salt2()) {
    salt2_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.salt2_);
  }
  tx_enc_keys_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_tx_enc_keys()) {
    tx_enc_keys_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.tx_enc_keys_);
  }
  tx_prefix_hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_tx_prefix_hash()) {
    tx_prefix_hash_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.tx_prefix_hash_);
  }
  view_public_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_view_public_key()) {
    view_public_key_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.view_public_key_);
  }
  ::memcpy(&network_type_, &from.network_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&reason_) -
    reinterpret_cast<char*>(&network_type_)) + sizeof(reason_));
  // @@protoc_insertion_point(copy_constructor:hw.trezor.messages.monero.MoneroGetTxKeyRequest)
}

void MoneroGetTxKeyRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MoneroGetTxKeyRequest_messages_2dmonero_2eproto.base);
  salt1_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  salt2_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  tx_enc_keys_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  tx_prefix_hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  view_public_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&network_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&reason_) -
      reinterpret_cast<char*>(&network_type_)) + sizeof(reason_));
}

MoneroGetTxKeyRequest::~MoneroGetTxKeyRequest() {
  // @@protoc_insertion_point(destructor:hw.trezor.messages.monero.MoneroGetTxKeyRequest)
  SharedDtor();
}

void MoneroGetTxKeyRequest::SharedDtor() {
  salt1_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  salt2_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  tx_enc_keys_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  tx_prefix_hash_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  view_public_key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MoneroGetTxKeyRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MoneroGetTxKeyRequest& MoneroGetTxKeyRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MoneroGetTxKeyRequest_messages_2dmonero_2eproto.base);
  return *internal_default_instance();
}


void MoneroGetTxKeyRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:hw.trezor.messages.monero.MoneroGetTxKeyRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  address_n_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      salt1_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      salt2_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      tx_enc_keys_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000008u) {
      tx_prefix_hash_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000010u) {
      view_public_key_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 0x00000060u) {
    ::memset(&network_type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&reason_) -
        reinterpret_cast<char*>(&network_type_)) + sizeof(reason_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MoneroGetTxKeyRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated uint32 address_n = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_address_n(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<8>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_address_n(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 network_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_network_type(&has_bits);
          network_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes salt1 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_salt1();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes salt2 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_salt2();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes tx_enc_keys = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_tx_enc_keys();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes tx_prefix_hash = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_tx_prefix_hash();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 reason = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_reason(&has_bits);
          reason_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes view_public_key = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_view_public_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MoneroGetTxKeyRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hw.trezor.messages.monero.MoneroGetTxKeyRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 address_n = 1;
  for (int i = 0, n = this->_internal_address_n_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_address_n(i), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional uint32 network_type = 2;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_network_type(), target);
  }

  // optional bytes salt1 = 3;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_salt1(), target);
  }

  // optional bytes salt2 = 4;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_salt2(), target);
  }

  // optional bytes tx_enc_keys = 5;
  if (cached_has_bits & 0x00000004u) {
    target = stream->WriteBytesMaybeAliased(
        5, this->_internal_tx_enc_keys(), target);
  }

  // optional bytes tx_prefix_hash = 6;
  if (cached_has_bits & 0x00000008u) {
    target = stream->WriteBytesMaybeAliased(
        6, this->_internal_tx_prefix_hash(), target);
  }

  // optional uint32 reason = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_reason(), target);
  }

  // optional bytes view_public_key = 8;
  if (cached_has_bits & 0x00000010u) {
    target = stream->WriteBytesMaybeAliased(
        8, this->_internal_view_public_key(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hw.trezor.messages.monero.MoneroGetTxKeyRequest)
  return target;
}

size_t MoneroGetTxKeyRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hw.trezor.messages.monero.MoneroGetTxKeyRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 address_n = 1;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->address_n_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_address_n_size());
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional bytes salt1 = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_salt1());
    }

    // optional bytes salt2 = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_salt2());
    }

    // optional bytes tx_enc_keys = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_tx_enc_keys());
    }

    // optional bytes tx_prefix_hash = 6;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_tx_prefix_hash());
    }

    // optional bytes view_public_key = 8;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_view_public_key());
    }

    // optional uint32 network_type = 2;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_network_type());
    }

    // optional uint32 reason = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_reason());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MoneroGetTxKeyRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hw.trezor.messages.monero.MoneroGetTxKeyRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const MoneroGetTxKeyRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MoneroGetTxKeyRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hw.trezor.messages.monero.MoneroGetTxKeyRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hw.trezor.messages.monero.MoneroGetTxKeyRequest)
    MergeFrom(*source);
  }
}

void MoneroGetTxKeyRequest::MergeFrom(const MoneroGetTxKeyRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hw.trezor.messages.monero.MoneroGetTxKeyRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  address_n_.MergeFrom(from.address_n_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      salt1_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.salt1_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      salt2_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.salt2_);
    }
    if (cached_has_bits & 0x00000004u) {
      _has_bits_[0] |= 0x00000004u;
      tx_enc_keys_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.tx_enc_keys_);
    }
    if (cached_has_bits & 0x00000008u) {
      _has_bits_[0] |= 0x00000008u;
      tx_prefix_hash_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.tx_prefix_hash_);
    }
    if (cached_has_bits & 0x00000010u) {
      _has_bits_[0] |= 0x00000010u;
      view_public_key_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.view_public_key_);
    }
    if (cached_has_bits & 0x00000020u) {
      network_type_ = from.network_type_;
    }
    if (cached_has_bits & 0x00000040u) {
      reason_ = from.reason_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MoneroGetTxKeyRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hw.trezor.messages.monero.MoneroGetTxKeyRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MoneroGetTxKeyRequest::CopyFrom(const MoneroGetTxKeyRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hw.trezor.messages.monero.MoneroGetTxKeyRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MoneroGetTxKeyRequest::IsInitialized() const {
  return true;
}

void MoneroGetTxKeyRequest::InternalSwap(MoneroGetTxKeyRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  address_n_.InternalSwap(&other->address_n_);
  salt1_.Swap(&other->salt1_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  salt2_.Swap(&other->salt2_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  tx_enc_keys_.Swap(&other->tx_enc_keys_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  tx_prefix_hash_.Swap(&other->tx_prefix_hash_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  view_public_key_.Swap(&other->view_public_key_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(network_type_, other->network_type_);
  swap(reason_, other->reason_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MoneroGetTxKeyRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MoneroGetTxKeyAck::InitAsDefaultInstance() {
}
class MoneroGetTxKeyAck::_Internal {
 public:
  using HasBits = decltype(std::declval<MoneroGetTxKeyAck>()._has_bits_);
  static void set_has_salt(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_tx_keys(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_tx_derivations(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

MoneroGetTxKeyAck::MoneroGetTxKeyAck()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hw.trezor.messages.monero.MoneroGetTxKeyAck)
}
MoneroGetTxKeyAck::MoneroGetTxKeyAck(const MoneroGetTxKeyAck& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  salt_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_salt()) {
    salt_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.salt_);
  }
  tx_keys_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_tx_keys()) {
    tx_keys_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.tx_keys_);
  }
  tx_derivations_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_tx_derivations()) {
    tx_derivations_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.tx_derivations_);
  }
  // @@protoc_insertion_point(copy_constructor:hw.trezor.messages.monero.MoneroGetTxKeyAck)
}

void MoneroGetTxKeyAck::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MoneroGetTxKeyAck_messages_2dmonero_2eproto.base);
  salt_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  tx_keys_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  tx_derivations_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

MoneroGetTxKeyAck::~MoneroGetTxKeyAck() {
  // @@protoc_insertion_point(destructor:hw.trezor.messages.monero.MoneroGetTxKeyAck)
  SharedDtor();
}

void MoneroGetTxKeyAck::SharedDtor() {
  salt_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  tx_keys_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  tx_derivations_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MoneroGetTxKeyAck::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MoneroGetTxKeyAck& MoneroGetTxKeyAck::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MoneroGetTxKeyAck_messages_2dmonero_2eproto.base);
  return *internal_default_instance();
}


void MoneroGetTxKeyAck::Clear() {
// @@protoc_insertion_point(message_clear_start:hw.trezor.messages.monero.MoneroGetTxKeyAck)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      salt_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      tx_keys_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      tx_derivations_.ClearNonDefaultToEmptyNoArena();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MoneroGetTxKeyAck::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bytes salt = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_salt();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes tx_keys = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_tx_keys();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes tx_derivations = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_tx_derivations();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MoneroGetTxKeyAck::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hw.trezor.messages.monero.MoneroGetTxKeyAck)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes salt = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_salt(), target);
  }

  // optional bytes tx_keys = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_tx_keys(), target);
  }

  // optional bytes tx_derivations = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_tx_derivations(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hw.trezor.messages.monero.MoneroGetTxKeyAck)
  return target;
}

size_t MoneroGetTxKeyAck::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hw.trezor.messages.monero.MoneroGetTxKeyAck)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional bytes salt = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_salt());
    }

    // optional bytes tx_keys = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_tx_keys());
    }

    // optional bytes tx_derivations = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_tx_derivations());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MoneroGetTxKeyAck::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hw.trezor.messages.monero.MoneroGetTxKeyAck)
  GOOGLE_DCHECK_NE(&from, this);
  const MoneroGetTxKeyAck* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MoneroGetTxKeyAck>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hw.trezor.messages.monero.MoneroGetTxKeyAck)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hw.trezor.messages.monero.MoneroGetTxKeyAck)
    MergeFrom(*source);
  }
}

void MoneroGetTxKeyAck::MergeFrom(const MoneroGetTxKeyAck& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hw.trezor.messages.monero.MoneroGetTxKeyAck)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      salt_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.salt_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      tx_keys_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.tx_keys_);
    }
    if (cached_has_bits & 0x00000004u) {
      _has_bits_[0] |= 0x00000004u;
      tx_derivations_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.tx_derivations_);
    }
  }
}

void MoneroGetTxKeyAck::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hw.trezor.messages.monero.MoneroGetTxKeyAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MoneroGetTxKeyAck::CopyFrom(const MoneroGetTxKeyAck& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hw.trezor.messages.monero.MoneroGetTxKeyAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MoneroGetTxKeyAck::IsInitialized() const {
  return true;
}

void MoneroGetTxKeyAck::InternalSwap(MoneroGetTxKeyAck* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  salt_.Swap(&other->salt_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  tx_keys_.Swap(&other->tx_keys_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  tx_derivations_.Swap(&other->tx_derivations_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata MoneroGetTxKeyAck::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MoneroLiveRefreshStartRequest::InitAsDefaultInstance() {
}
class MoneroLiveRefreshStartRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<MoneroLiveRefreshStartRequest>()._has_bits_);
  static void set_has_network_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

MoneroLiveRefreshStartRequest::MoneroLiveRefreshStartRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hw.trezor.messages.monero.MoneroLiveRefreshStartRequest)
}
MoneroLiveRefreshStartRequest::MoneroLiveRefreshStartRequest(const MoneroLiveRefreshStartRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      address_n_(from.address_n_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  network_type_ = from.network_type_;
  // @@protoc_insertion_point(copy_constructor:hw.trezor.messages.monero.MoneroLiveRefreshStartRequest)
}

void MoneroLiveRefreshStartRequest::SharedCtor() {
  network_type_ = 0u;
}

MoneroLiveRefreshStartRequest::~MoneroLiveRefreshStartRequest() {
  // @@protoc_insertion_point(destructor:hw.trezor.messages.monero.MoneroLiveRefreshStartRequest)
  SharedDtor();
}

void MoneroLiveRefreshStartRequest::SharedDtor() {
}

void MoneroLiveRefreshStartRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MoneroLiveRefreshStartRequest& MoneroLiveRefreshStartRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MoneroLiveRefreshStartRequest_messages_2dmonero_2eproto.base);
  return *internal_default_instance();
}


void MoneroLiveRefreshStartRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:hw.trezor.messages.monero.MoneroLiveRefreshStartRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  address_n_.Clear();
  network_type_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MoneroLiveRefreshStartRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated uint32 address_n = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_address_n(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<8>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_address_n(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 network_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_network_type(&has_bits);
          network_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MoneroLiveRefreshStartRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hw.trezor.messages.monero.MoneroLiveRefreshStartRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 address_n = 1;
  for (int i = 0, n = this->_internal_address_n_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_address_n(i), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional uint32 network_type = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_network_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hw.trezor.messages.monero.MoneroLiveRefreshStartRequest)
  return target;
}

size_t MoneroLiveRefreshStartRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hw.trezor.messages.monero.MoneroLiveRefreshStartRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 address_n = 1;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->address_n_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_address_n_size());
    total_size += data_size;
  }

  // optional uint32 network_type = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_network_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MoneroLiveRefreshStartRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hw.trezor.messages.monero.MoneroLiveRefreshStartRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const MoneroLiveRefreshStartRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MoneroLiveRefreshStartRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hw.trezor.messages.monero.MoneroLiveRefreshStartRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hw.trezor.messages.monero.MoneroLiveRefreshStartRequest)
    MergeFrom(*source);
  }
}

void MoneroLiveRefreshStartRequest::MergeFrom(const MoneroLiveRefreshStartRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hw.trezor.messages.monero.MoneroLiveRefreshStartRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  address_n_.MergeFrom(from.address_n_);
  if (from._internal_has_network_type()) {
    _internal_set_network_type(from._internal_network_type());
  }
}

void MoneroLiveRefreshStartRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hw.trezor.messages.monero.MoneroLiveRefreshStartRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MoneroLiveRefreshStartRequest::CopyFrom(const MoneroLiveRefreshStartRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hw.trezor.messages.monero.MoneroLiveRefreshStartRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MoneroLiveRefreshStartRequest::IsInitialized() const {
  return true;
}

void MoneroLiveRefreshStartRequest::InternalSwap(MoneroLiveRefreshStartRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  address_n_.InternalSwap(&other->address_n_);
  swap(network_type_, other->network_type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MoneroLiveRefreshStartRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MoneroLiveRefreshStartAck::InitAsDefaultInstance() {
}
class MoneroLiveRefreshStartAck::_Internal {
 public:
  using HasBits = decltype(std::declval<MoneroLiveRefreshStartAck>()._has_bits_);
};

MoneroLiveRefreshStartAck::MoneroLiveRefreshStartAck()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hw.trezor.messages.monero.MoneroLiveRefreshStartAck)
}
MoneroLiveRefreshStartAck::MoneroLiveRefreshStartAck(const MoneroLiveRefreshStartAck& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:hw.trezor.messages.monero.MoneroLiveRefreshStartAck)
}

void MoneroLiveRefreshStartAck::SharedCtor() {
}

MoneroLiveRefreshStartAck::~MoneroLiveRefreshStartAck() {
  // @@protoc_insertion_point(destructor:hw.trezor.messages.monero.MoneroLiveRefreshStartAck)
  SharedDtor();
}

void MoneroLiveRefreshStartAck::SharedDtor() {
}

void MoneroLiveRefreshStartAck::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MoneroLiveRefreshStartAck& MoneroLiveRefreshStartAck::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MoneroLiveRefreshStartAck_messages_2dmonero_2eproto.base);
  return *internal_default_instance();
}


void MoneroLiveRefreshStartAck::Clear() {
// @@protoc_insertion_point(message_clear_start:hw.trezor.messages.monero.MoneroLiveRefreshStartAck)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MoneroLiveRefreshStartAck::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MoneroLiveRefreshStartAck::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hw.trezor.messages.monero.MoneroLiveRefreshStartAck)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hw.trezor.messages.monero.MoneroLiveRefreshStartAck)
  return target;
}

size_t MoneroLiveRefreshStartAck::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hw.trezor.messages.monero.MoneroLiveRefreshStartAck)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MoneroLiveRefreshStartAck::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hw.trezor.messages.monero.MoneroLiveRefreshStartAck)
  GOOGLE_DCHECK_NE(&from, this);
  const MoneroLiveRefreshStartAck* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MoneroLiveRefreshStartAck>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hw.trezor.messages.monero.MoneroLiveRefreshStartAck)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hw.trezor.messages.monero.MoneroLiveRefreshStartAck)
    MergeFrom(*source);
  }
}

void MoneroLiveRefreshStartAck::MergeFrom(const MoneroLiveRefreshStartAck& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hw.trezor.messages.monero.MoneroLiveRefreshStartAck)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void MoneroLiveRefreshStartAck::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hw.trezor.messages.monero.MoneroLiveRefreshStartAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MoneroLiveRefreshStartAck::CopyFrom(const MoneroLiveRefreshStartAck& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hw.trezor.messages.monero.MoneroLiveRefreshStartAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MoneroLiveRefreshStartAck::IsInitialized() const {
  return true;
}

void MoneroLiveRefreshStartAck::InternalSwap(MoneroLiveRefreshStartAck* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata MoneroLiveRefreshStartAck::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MoneroLiveRefreshStepRequest::InitAsDefaultInstance() {
}
class MoneroLiveRefreshStepRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<MoneroLiveRefreshStepRequest>()._has_bits_);
  static void set_has_out_key(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_recv_deriv(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_real_out_idx(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_sub_addr_major(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_sub_addr_minor(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

MoneroLiveRefreshStepRequest::MoneroLiveRefreshStepRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hw.trezor.messages.monero.MoneroLiveRefreshStepRequest)
}
MoneroLiveRefreshStepRequest::MoneroLiveRefreshStepRequest(const MoneroLiveRefreshStepRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  out_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_out_key()) {
    out_key_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.out_key_);
  }
  recv_deriv_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_recv_deriv()) {
    recv_deriv_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.recv_deriv_);
  }
  ::memcpy(&real_out_idx_, &from.real_out_idx_,
    static_cast<size_t>(reinterpret_cast<char*>(&sub_addr_minor_) -
    reinterpret_cast<char*>(&real_out_idx_)) + sizeof(sub_addr_minor_));
  // @@protoc_insertion_point(copy_constructor:hw.trezor.messages.monero.MoneroLiveRefreshStepRequest)
}

void MoneroLiveRefreshStepRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MoneroLiveRefreshStepRequest_messages_2dmonero_2eproto.base);
  out_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  recv_deriv_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&real_out_idx_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sub_addr_minor_) -
      reinterpret_cast<char*>(&real_out_idx_)) + sizeof(sub_addr_minor_));
}

MoneroLiveRefreshStepRequest::~MoneroLiveRefreshStepRequest() {
  // @@protoc_insertion_point(destructor:hw.trezor.messages.monero.MoneroLiveRefreshStepRequest)
  SharedDtor();
}

void MoneroLiveRefreshStepRequest::SharedDtor() {
  out_key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  recv_deriv_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MoneroLiveRefreshStepRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MoneroLiveRefreshStepRequest& MoneroLiveRefreshStepRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MoneroLiveRefreshStepRequest_messages_2dmonero_2eproto.base);
  return *internal_default_instance();
}


void MoneroLiveRefreshStepRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:hw.trezor.messages.monero.MoneroLiveRefreshStepRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      out_key_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      recv_deriv_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 0x0000001cu) {
    ::memset(&real_out_idx_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&sub_addr_minor_) -
        reinterpret_cast<char*>(&real_out_idx_)) + sizeof(sub_addr_minor_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MoneroLiveRefreshStepRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bytes out_key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_out_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes recv_deriv = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_recv_deriv();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 real_out_idx = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_real_out_idx(&has_bits);
          real_out_idx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 sub_addr_major = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_sub_addr_major(&has_bits);
          sub_addr_major_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 sub_addr_minor = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_sub_addr_minor(&has_bits);
          sub_addr_minor_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MoneroLiveRefreshStepRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hw.trezor.messages.monero.MoneroLiveRefreshStepRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes out_key = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_out_key(), target);
  }

  // optional bytes recv_deriv = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_recv_deriv(), target);
  }

  // optional uint64 real_out_idx = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_real_out_idx(), target);
  }

  // optional uint32 sub_addr_major = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_sub_addr_major(), target);
  }

  // optional uint32 sub_addr_minor = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_sub_addr_minor(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hw.trezor.messages.monero.MoneroLiveRefreshStepRequest)
  return target;
}

size_t MoneroLiveRefreshStepRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hw.trezor.messages.monero.MoneroLiveRefreshStepRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional bytes out_key = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_out_key());
    }

    // optional bytes recv_deriv = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_recv_deriv());
    }

    // optional uint64 real_out_idx = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_real_out_idx());
    }

    // optional uint32 sub_addr_major = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_sub_addr_major());
    }

    // optional uint32 sub_addr_minor = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_sub_addr_minor());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MoneroLiveRefreshStepRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hw.trezor.messages.monero.MoneroLiveRefreshStepRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const MoneroLiveRefreshStepRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MoneroLiveRefreshStepRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hw.trezor.messages.monero.MoneroLiveRefreshStepRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hw.trezor.messages.monero.MoneroLiveRefreshStepRequest)
    MergeFrom(*source);
  }
}

void MoneroLiveRefreshStepRequest::MergeFrom(const MoneroLiveRefreshStepRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hw.trezor.messages.monero.MoneroLiveRefreshStepRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      out_key_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.out_key_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      recv_deriv_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.recv_deriv_);
    }
    if (cached_has_bits & 0x00000004u) {
      real_out_idx_ = from.real_out_idx_;
    }
    if (cached_has_bits & 0x00000008u) {
      sub_addr_major_ = from.sub_addr_major_;
    }
    if (cached_has_bits & 0x00000010u) {
      sub_addr_minor_ = from.sub_addr_minor_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MoneroLiveRefreshStepRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hw.trezor.messages.monero.MoneroLiveRefreshStepRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MoneroLiveRefreshStepRequest::CopyFrom(const MoneroLiveRefreshStepRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hw.trezor.messages.monero.MoneroLiveRefreshStepRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MoneroLiveRefreshStepRequest::IsInitialized() const {
  return true;
}

void MoneroLiveRefreshStepRequest::InternalSwap(MoneroLiveRefreshStepRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  out_key_.Swap(&other->out_key_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  recv_deriv_.Swap(&other->recv_deriv_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(real_out_idx_, other->real_out_idx_);
  swap(sub_addr_major_, other->sub_addr_major_);
  swap(sub_addr_minor_, other->sub_addr_minor_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MoneroLiveRefreshStepRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MoneroLiveRefreshStepAck::InitAsDefaultInstance() {
}
class MoneroLiveRefreshStepAck::_Internal {
 public:
  using HasBits = decltype(std::declval<MoneroLiveRefreshStepAck>()._has_bits_);
  static void set_has_salt(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_key_image(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

MoneroLiveRefreshStepAck::MoneroLiveRefreshStepAck()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hw.trezor.messages.monero.MoneroLiveRefreshStepAck)
}
MoneroLiveRefreshStepAck::MoneroLiveRefreshStepAck(const MoneroLiveRefreshStepAck& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  salt_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_salt()) {
    salt_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.salt_);
  }
  key_image_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_key_image()) {
    key_image_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.key_image_);
  }
  // @@protoc_insertion_point(copy_constructor:hw.trezor.messages.monero.MoneroLiveRefreshStepAck)
}

void MoneroLiveRefreshStepAck::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MoneroLiveRefreshStepAck_messages_2dmonero_2eproto.base);
  salt_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  key_image_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

MoneroLiveRefreshStepAck::~MoneroLiveRefreshStepAck() {
  // @@protoc_insertion_point(destructor:hw.trezor.messages.monero.MoneroLiveRefreshStepAck)
  SharedDtor();
}

void MoneroLiveRefreshStepAck::SharedDtor() {
  salt_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  key_image_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MoneroLiveRefreshStepAck::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MoneroLiveRefreshStepAck& MoneroLiveRefreshStepAck::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MoneroLiveRefreshStepAck_messages_2dmonero_2eproto.base);
  return *internal_default_instance();
}


void MoneroLiveRefreshStepAck::Clear() {
// @@protoc_insertion_point(message_clear_start:hw.trezor.messages.monero.MoneroLiveRefreshStepAck)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      salt_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      key_image_.ClearNonDefaultToEmptyNoArena();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MoneroLiveRefreshStepAck::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bytes salt = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_salt();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes key_image = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_key_image();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MoneroLiveRefreshStepAck::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hw.trezor.messages.monero.MoneroLiveRefreshStepAck)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes salt = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_salt(), target);
  }

  // optional bytes key_image = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_key_image(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hw.trezor.messages.monero.MoneroLiveRefreshStepAck)
  return target;
}

size_t MoneroLiveRefreshStepAck::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hw.trezor.messages.monero.MoneroLiveRefreshStepAck)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional bytes salt = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_salt());
    }

    // optional bytes key_image = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_key_image());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MoneroLiveRefreshStepAck::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hw.trezor.messages.monero.MoneroLiveRefreshStepAck)
  GOOGLE_DCHECK_NE(&from, this);
  const MoneroLiveRefreshStepAck* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MoneroLiveRefreshStepAck>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hw.trezor.messages.monero.MoneroLiveRefreshStepAck)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hw.trezor.messages.monero.MoneroLiveRefreshStepAck)
    MergeFrom(*source);
  }
}

void MoneroLiveRefreshStepAck::MergeFrom(const MoneroLiveRefreshStepAck& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hw.trezor.messages.monero.MoneroLiveRefreshStepAck)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      salt_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.salt_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      key_image_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.key_image_);
    }
  }
}

void MoneroLiveRefreshStepAck::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hw.trezor.messages.monero.MoneroLiveRefreshStepAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MoneroLiveRefreshStepAck::CopyFrom(const MoneroLiveRefreshStepAck& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hw.trezor.messages.monero.MoneroLiveRefreshStepAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MoneroLiveRefreshStepAck::IsInitialized() const {
  return true;
}

void MoneroLiveRefreshStepAck::InternalSwap(MoneroLiveRefreshStepAck* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  salt_.Swap(&other->salt_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  key_image_.Swap(&other->key_image_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata MoneroLiveRefreshStepAck::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MoneroLiveRefreshFinalRequest::InitAsDefaultInstance() {
}
class MoneroLiveRefreshFinalRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<MoneroLiveRefreshFinalRequest>()._has_bits_);
};

MoneroLiveRefreshFinalRequest::MoneroLiveRefreshFinalRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hw.trezor.messages.monero.MoneroLiveRefreshFinalRequest)
}
MoneroLiveRefreshFinalRequest::MoneroLiveRefreshFinalRequest(const MoneroLiveRefreshFinalRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:hw.trezor.messages.monero.MoneroLiveRefreshFinalRequest)
}

void MoneroLiveRefreshFinalRequest::SharedCtor() {
}

MoneroLiveRefreshFinalRequest::~MoneroLiveRefreshFinalRequest() {
  // @@protoc_insertion_point(destructor:hw.trezor.messages.monero.MoneroLiveRefreshFinalRequest)
  SharedDtor();
}

void MoneroLiveRefreshFinalRequest::SharedDtor() {
}

void MoneroLiveRefreshFinalRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MoneroLiveRefreshFinalRequest& MoneroLiveRefreshFinalRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MoneroLiveRefreshFinalRequest_messages_2dmonero_2eproto.base);
  return *internal_default_instance();
}


void MoneroLiveRefreshFinalRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:hw.trezor.messages.monero.MoneroLiveRefreshFinalRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MoneroLiveRefreshFinalRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MoneroLiveRefreshFinalRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hw.trezor.messages.monero.MoneroLiveRefreshFinalRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hw.trezor.messages.monero.MoneroLiveRefreshFinalRequest)
  return target;
}

size_t MoneroLiveRefreshFinalRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hw.trezor.messages.monero.MoneroLiveRefreshFinalRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MoneroLiveRefreshFinalRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hw.trezor.messages.monero.MoneroLiveRefreshFinalRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const MoneroLiveRefreshFinalRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MoneroLiveRefreshFinalRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hw.trezor.messages.monero.MoneroLiveRefreshFinalRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hw.trezor.messages.monero.MoneroLiveRefreshFinalRequest)
    MergeFrom(*source);
  }
}

void MoneroLiveRefreshFinalRequest::MergeFrom(const MoneroLiveRefreshFinalRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hw.trezor.messages.monero.MoneroLiveRefreshFinalRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void MoneroLiveRefreshFinalRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hw.trezor.messages.monero.MoneroLiveRefreshFinalRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MoneroLiveRefreshFinalRequest::CopyFrom(const MoneroLiveRefreshFinalRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hw.trezor.messages.monero.MoneroLiveRefreshFinalRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MoneroLiveRefreshFinalRequest::IsInitialized() const {
  return true;
}

void MoneroLiveRefreshFinalRequest::InternalSwap(MoneroLiveRefreshFinalRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata MoneroLiveRefreshFinalRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MoneroLiveRefreshFinalAck::InitAsDefaultInstance() {
}
class MoneroLiveRefreshFinalAck::_Internal {
 public:
  using HasBits = decltype(std::declval<MoneroLiveRefreshFinalAck>()._has_bits_);
};

MoneroLiveRefreshFinalAck::MoneroLiveRefreshFinalAck()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hw.trezor.messages.monero.MoneroLiveRefreshFinalAck)
}
MoneroLiveRefreshFinalAck::MoneroLiveRefreshFinalAck(const MoneroLiveRefreshFinalAck& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:hw.trezor.messages.monero.MoneroLiveRefreshFinalAck)
}

void MoneroLiveRefreshFinalAck::SharedCtor() {
}

MoneroLiveRefreshFinalAck::~MoneroLiveRefreshFinalAck() {
  // @@protoc_insertion_point(destructor:hw.trezor.messages.monero.MoneroLiveRefreshFinalAck)
  SharedDtor();
}

void MoneroLiveRefreshFinalAck::SharedDtor() {
}

void MoneroLiveRefreshFinalAck::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MoneroLiveRefreshFinalAck& MoneroLiveRefreshFinalAck::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MoneroLiveRefreshFinalAck_messages_2dmonero_2eproto.base);
  return *internal_default_instance();
}


void MoneroLiveRefreshFinalAck::Clear() {
// @@protoc_insertion_point(message_clear_start:hw.trezor.messages.monero.MoneroLiveRefreshFinalAck)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MoneroLiveRefreshFinalAck::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MoneroLiveRefreshFinalAck::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hw.trezor.messages.monero.MoneroLiveRefreshFinalAck)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hw.trezor.messages.monero.MoneroLiveRefreshFinalAck)
  return target;
}

size_t MoneroLiveRefreshFinalAck::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hw.trezor.messages.monero.MoneroLiveRefreshFinalAck)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MoneroLiveRefreshFinalAck::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hw.trezor.messages.monero.MoneroLiveRefreshFinalAck)
  GOOGLE_DCHECK_NE(&from, this);
  const MoneroLiveRefreshFinalAck* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MoneroLiveRefreshFinalAck>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hw.trezor.messages.monero.MoneroLiveRefreshFinalAck)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hw.trezor.messages.monero.MoneroLiveRefreshFinalAck)
    MergeFrom(*source);
  }
}

void MoneroLiveRefreshFinalAck::MergeFrom(const MoneroLiveRefreshFinalAck& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hw.trezor.messages.monero.MoneroLiveRefreshFinalAck)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void MoneroLiveRefreshFinalAck::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hw.trezor.messages.monero.MoneroLiveRefreshFinalAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MoneroLiveRefreshFinalAck::CopyFrom(const MoneroLiveRefreshFinalAck& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hw.trezor.messages.monero.MoneroLiveRefreshFinalAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MoneroLiveRefreshFinalAck::IsInitialized() const {
  return true;
}

void MoneroLiveRefreshFinalAck::InternalSwap(MoneroLiveRefreshFinalAck* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata MoneroLiveRefreshFinalAck::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DebugMoneroDiagRequest::InitAsDefaultInstance() {
}
class DebugMoneroDiagRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<DebugMoneroDiagRequest>()._has_bits_);
  static void set_has_ins(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_p1(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_p2(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_data1(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_data2(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

DebugMoneroDiagRequest::DebugMoneroDiagRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hw.trezor.messages.monero.DebugMoneroDiagRequest)
}
DebugMoneroDiagRequest::DebugMoneroDiagRequest(const DebugMoneroDiagRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      pd_(from.pd_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  data1_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_data1()) {
    data1_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.data1_);
  }
  data2_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_data2()) {
    data2_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.data2_);
  }
  ::memcpy(&ins_, &from.ins_,
    static_cast<size_t>(reinterpret_cast<char*>(&p2_) -
    reinterpret_cast<char*>(&ins_)) + sizeof(p2_));
  // @@protoc_insertion_point(copy_constructor:hw.trezor.messages.monero.DebugMoneroDiagRequest)
}

void DebugMoneroDiagRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DebugMoneroDiagRequest_messages_2dmonero_2eproto.base);
  data1_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  data2_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&ins_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&p2_) -
      reinterpret_cast<char*>(&ins_)) + sizeof(p2_));
}

DebugMoneroDiagRequest::~DebugMoneroDiagRequest() {
  // @@protoc_insertion_point(destructor:hw.trezor.messages.monero.DebugMoneroDiagRequest)
  SharedDtor();
}

void DebugMoneroDiagRequest::SharedDtor() {
  data1_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  data2_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DebugMoneroDiagRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DebugMoneroDiagRequest& DebugMoneroDiagRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DebugMoneroDiagRequest_messages_2dmonero_2eproto.base);
  return *internal_default_instance();
}


void DebugMoneroDiagRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:hw.trezor.messages.monero.DebugMoneroDiagRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  pd_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      data1_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      data2_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 0x0000001cu) {
    ::memset(&ins_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&p2_) -
        reinterpret_cast<char*>(&ins_)) + sizeof(p2_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* DebugMoneroDiagRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint64 ins = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_ins(&has_bits);
          ins_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 p1 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_p1(&has_bits);
          p1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 p2 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_p2(&has_bits);
          p2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint64 pd = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_pd(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<32>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(_internal_mutable_pd(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes data1 = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_data1();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes data2 = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_data2();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DebugMoneroDiagRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hw.trezor.messages.monero.DebugMoneroDiagRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 ins = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_ins(), target);
  }

  // optional uint64 p1 = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_p1(), target);
  }

  // optional uint64 p2 = 3;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_p2(), target);
  }

  // repeated uint64 pd = 4;
  for (int i = 0, n = this->_internal_pd_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_pd(i), target);
  }

  // optional bytes data1 = 5;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        5, this->_internal_data1(), target);
  }

  // optional bytes data2 = 6;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteBytesMaybeAliased(
        6, this->_internal_data2(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hw.trezor.messages.monero.DebugMoneroDiagRequest)
  return target;
}

size_t DebugMoneroDiagRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hw.trezor.messages.monero.DebugMoneroDiagRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint64 pd = 4;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt64Size(this->pd_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_pd_size());
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional bytes data1 = 5;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_data1());
    }

    // optional bytes data2 = 6;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_data2());
    }

    // optional uint64 ins = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_ins());
    }

    // optional uint64 p1 = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_p1());
    }

    // optional uint64 p2 = 3;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_p2());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DebugMoneroDiagRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hw.trezor.messages.monero.DebugMoneroDiagRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const DebugMoneroDiagRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DebugMoneroDiagRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hw.trezor.messages.monero.DebugMoneroDiagRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hw.trezor.messages.monero.DebugMoneroDiagRequest)
    MergeFrom(*source);
  }
}

void DebugMoneroDiagRequest::MergeFrom(const DebugMoneroDiagRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hw.trezor.messages.monero.DebugMoneroDiagRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  pd_.MergeFrom(from.pd_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      data1_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.data1_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      data2_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.data2_);
    }
    if (cached_has_bits & 0x00000004u) {
      ins_ = from.ins_;
    }
    if (cached_has_bits & 0x00000008u) {
      p1_ = from.p1_;
    }
    if (cached_has_bits & 0x00000010u) {
      p2_ = from.p2_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void DebugMoneroDiagRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hw.trezor.messages.monero.DebugMoneroDiagRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DebugMoneroDiagRequest::CopyFrom(const DebugMoneroDiagRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hw.trezor.messages.monero.DebugMoneroDiagRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DebugMoneroDiagRequest::IsInitialized() const {
  return true;
}

void DebugMoneroDiagRequest::InternalSwap(DebugMoneroDiagRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  pd_.InternalSwap(&other->pd_);
  data1_.Swap(&other->data1_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  data2_.Swap(&other->data2_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(ins_, other->ins_);
  swap(p1_, other->p1_);
  swap(p2_, other->p2_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DebugMoneroDiagRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DebugMoneroDiagAck::InitAsDefaultInstance() {
}
class DebugMoneroDiagAck::_Internal {
 public:
  using HasBits = decltype(std::declval<DebugMoneroDiagAck>()._has_bits_);
  static void set_has_ins(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_p1(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_p2(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_data1(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_data2(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

DebugMoneroDiagAck::DebugMoneroDiagAck()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hw.trezor.messages.monero.DebugMoneroDiagAck)
}
DebugMoneroDiagAck::DebugMoneroDiagAck(const DebugMoneroDiagAck& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      pd_(from.pd_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  data1_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_data1()) {
    data1_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.data1_);
  }
  data2_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_data2()) {
    data2_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.data2_);
  }
  ::memcpy(&ins_, &from.ins_,
    static_cast<size_t>(reinterpret_cast<char*>(&p2_) -
    reinterpret_cast<char*>(&ins_)) + sizeof(p2_));
  // @@protoc_insertion_point(copy_constructor:hw.trezor.messages.monero.DebugMoneroDiagAck)
}

void DebugMoneroDiagAck::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DebugMoneroDiagAck_messages_2dmonero_2eproto.base);
  data1_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  data2_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&ins_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&p2_) -
      reinterpret_cast<char*>(&ins_)) + sizeof(p2_));
}

DebugMoneroDiagAck::~DebugMoneroDiagAck() {
  // @@protoc_insertion_point(destructor:hw.trezor.messages.monero.DebugMoneroDiagAck)
  SharedDtor();
}

void DebugMoneroDiagAck::SharedDtor() {
  data1_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  data2_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DebugMoneroDiagAck::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DebugMoneroDiagAck& DebugMoneroDiagAck::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DebugMoneroDiagAck_messages_2dmonero_2eproto.base);
  return *internal_default_instance();
}


void DebugMoneroDiagAck::Clear() {
// @@protoc_insertion_point(message_clear_start:hw.trezor.messages.monero.DebugMoneroDiagAck)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  pd_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      data1_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      data2_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 0x0000001cu) {
    ::memset(&ins_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&p2_) -
        reinterpret_cast<char*>(&ins_)) + sizeof(p2_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* DebugMoneroDiagAck::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint64 ins = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_ins(&has_bits);
          ins_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 p1 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_p1(&has_bits);
          p1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 p2 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_p2(&has_bits);
          p2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint64 pd = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_pd(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<32>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(_internal_mutable_pd(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes data1 = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_data1();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes data2 = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_data2();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DebugMoneroDiagAck::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hw.trezor.messages.monero.DebugMoneroDiagAck)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 ins = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_ins(), target);
  }

  // optional uint64 p1 = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_p1(), target);
  }

  // optional uint64 p2 = 3;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_p2(), target);
  }

  // repeated uint64 pd = 4;
  for (int i = 0, n = this->_internal_pd_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_pd(i), target);
  }

  // optional bytes data1 = 5;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        5, this->_internal_data1(), target);
  }

  // optional bytes data2 = 6;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteBytesMaybeAliased(
        6, this->_internal_data2(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hw.trezor.messages.monero.DebugMoneroDiagAck)
  return target;
}

size_t DebugMoneroDiagAck::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hw.trezor.messages.monero.DebugMoneroDiagAck)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint64 pd = 4;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt64Size(this->pd_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_pd_size());
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional bytes data1 = 5;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_data1());
    }

    // optional bytes data2 = 6;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_data2());
    }

    // optional uint64 ins = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_ins());
    }

    // optional uint64 p1 = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_p1());
    }

    // optional uint64 p2 = 3;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_p2());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DebugMoneroDiagAck::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hw.trezor.messages.monero.DebugMoneroDiagAck)
  GOOGLE_DCHECK_NE(&from, this);
  const DebugMoneroDiagAck* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DebugMoneroDiagAck>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hw.trezor.messages.monero.DebugMoneroDiagAck)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hw.trezor.messages.monero.DebugMoneroDiagAck)
    MergeFrom(*source);
  }
}

void DebugMoneroDiagAck::MergeFrom(const DebugMoneroDiagAck& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hw.trezor.messages.monero.DebugMoneroDiagAck)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  pd_.MergeFrom(from.pd_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      data1_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.data1_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      data2_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.data2_);
    }
    if (cached_has_bits & 0x00000004u) {
      ins_ = from.ins_;
    }
    if (cached_has_bits & 0x00000008u) {
      p1_ = from.p1_;
    }
    if (cached_has_bits & 0x00000010u) {
      p2_ = from.p2_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void DebugMoneroDiagAck::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hw.trezor.messages.monero.DebugMoneroDiagAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DebugMoneroDiagAck::CopyFrom(const DebugMoneroDiagAck& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hw.trezor.messages.monero.DebugMoneroDiagAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DebugMoneroDiagAck::IsInitialized() const {
  return true;
}

void DebugMoneroDiagAck::InternalSwap(DebugMoneroDiagAck* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  pd_.InternalSwap(&other->pd_);
  data1_.Swap(&other->data1_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  data2_.Swap(&other->data2_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(ins_, other->ins_);
  swap(p1_, other->p1_);
  swap(p2_, other->p2_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DebugMoneroDiagAck::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace monero
}  // namespace messages
}  // namespace trezor
}  // namespace hw
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::hw::trezor::messages::monero::MoneroTransactionSourceEntry_MoneroOutputEntry_MoneroRctKeyPublic* Arena::CreateMaybeMessage< ::hw::trezor::messages::monero::MoneroTransactionSourceEntry_MoneroOutputEntry_MoneroRctKeyPublic >(Arena* arena) {
  return Arena::CreateInternal< ::hw::trezor::messages::monero::MoneroTransactionSourceEntry_MoneroOutputEntry_MoneroRctKeyPublic >(arena);
}
template<> PROTOBUF_NOINLINE ::hw::trezor::messages::monero::MoneroTransactionSourceEntry_MoneroOutputEntry* Arena::CreateMaybeMessage< ::hw::trezor::messages::monero::MoneroTransactionSourceEntry_MoneroOutputEntry >(Arena* arena) {
  return Arena::CreateInternal< ::hw::trezor::messages::monero::MoneroTransactionSourceEntry_MoneroOutputEntry >(arena);
}
template<> PROTOBUF_NOINLINE ::hw::trezor::messages::monero::MoneroTransactionSourceEntry_MoneroMultisigKLRki* Arena::CreateMaybeMessage< ::hw::trezor::messages::monero::MoneroTransactionSourceEntry_MoneroMultisigKLRki >(Arena* arena) {
  return Arena::CreateInternal< ::hw::trezor::messages::monero::MoneroTransactionSourceEntry_MoneroMultisigKLRki >(arena);
}
template<> PROTOBUF_NOINLINE ::hw::trezor::messages::monero::MoneroTransactionSourceEntry* Arena::CreateMaybeMessage< ::hw::trezor::messages::monero::MoneroTransactionSourceEntry >(Arena* arena) {
  return Arena::CreateInternal< ::hw::trezor::messages::monero::MoneroTransactionSourceEntry >(arena);
}
template<> PROTOBUF_NOINLINE ::hw::trezor::messages::monero::MoneroTransactionDestinationEntry_MoneroAccountPublicAddress* Arena::CreateMaybeMessage< ::hw::trezor::messages::monero::MoneroTransactionDestinationEntry_MoneroAccountPublicAddress >(Arena* arena) {
  return Arena::CreateInternal< ::hw::trezor::messages::monero::MoneroTransactionDestinationEntry_MoneroAccountPublicAddress >(arena);
}
template<> PROTOBUF_NOINLINE ::hw::trezor::messages::monero::MoneroTransactionDestinationEntry* Arena::CreateMaybeMessage< ::hw::trezor::messages::monero::MoneroTransactionDestinationEntry >(Arena* arena) {
  return Arena::CreateInternal< ::hw::trezor::messages::monero::MoneroTransactionDestinationEntry >(arena);
}
template<> PROTOBUF_NOINLINE ::hw::trezor::messages::monero::MoneroTransactionRsigData* Arena::CreateMaybeMessage< ::hw::trezor::messages::monero::MoneroTransactionRsigData >(Arena* arena) {
  return Arena::CreateInternal< ::hw::trezor::messages::monero::MoneroTransactionRsigData >(arena);
}
template<> PROTOBUF_NOINLINE ::hw::trezor::messages::monero::MoneroGetAddress* Arena::CreateMaybeMessage< ::hw::trezor::messages::monero::MoneroGetAddress >(Arena* arena) {
  return Arena::CreateInternal< ::hw::trezor::messages::monero::MoneroGetAddress >(arena);
}
template<> PROTOBUF_NOINLINE ::hw::trezor::messages::monero::MoneroAddress* Arena::CreateMaybeMessage< ::hw::trezor::messages::monero::MoneroAddress >(Arena* arena) {
  return Arena::CreateInternal< ::hw::trezor::messages::monero::MoneroAddress >(arena);
}
template<> PROTOBUF_NOINLINE ::hw::trezor::messages::monero::MoneroGetWatchKey* Arena::CreateMaybeMessage< ::hw::trezor::messages::monero::MoneroGetWatchKey >(Arena* arena) {
  return Arena::CreateInternal< ::hw::trezor::messages::monero::MoneroGetWatchKey >(arena);
}
template<> PROTOBUF_NOINLINE ::hw::trezor::messages::monero::MoneroWatchKey* Arena::CreateMaybeMessage< ::hw::trezor::messages::monero::MoneroWatchKey >(Arena* arena) {
  return Arena::CreateInternal< ::hw::trezor::messages::monero::MoneroWatchKey >(arena);
}
template<> PROTOBUF_NOINLINE ::hw::trezor::messages::monero::MoneroTransactionInitRequest_MoneroTransactionData* Arena::CreateMaybeMessage< ::hw::trezor::messages::monero::MoneroTransactionInitRequest_MoneroTransactionData >(Arena* arena) {
  return Arena::CreateInternal< ::hw::trezor::messages::monero::MoneroTransactionInitRequest_MoneroTransactionData >(arena);
}
template<> PROTOBUF_NOINLINE ::hw::trezor::messages::monero::MoneroTransactionInitRequest* Arena::CreateMaybeMessage< ::hw::trezor::messages::monero::MoneroTransactionInitRequest >(Arena* arena) {
  return Arena::CreateInternal< ::hw::trezor::messages::monero::MoneroTransactionInitRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::hw::trezor::messages::monero::MoneroTransactionInitAck* Arena::CreateMaybeMessage< ::hw::trezor::messages::monero::MoneroTransactionInitAck >(Arena* arena) {
  return Arena::CreateInternal< ::hw::trezor::messages::monero::MoneroTransactionInitAck >(arena);
}
template<> PROTOBUF_NOINLINE ::hw::trezor::messages::monero::MoneroTransactionSetInputRequest* Arena::CreateMaybeMessage< ::hw::trezor::messages::monero::MoneroTransactionSetInputRequest >(Arena* arena) {
  return Arena::CreateInternal< ::hw::trezor::messages::monero::MoneroTransactionSetInputRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::hw::trezor::messages::monero::MoneroTransactionSetInputAck* Arena::CreateMaybeMessage< ::hw::trezor::messages::monero::MoneroTransactionSetInputAck >(Arena* arena) {
  return Arena::CreateInternal< ::hw::trezor::messages::monero::MoneroTransactionSetInputAck >(arena);
}
template<> PROTOBUF_NOINLINE ::hw::trezor::messages::monero::MoneroTransactionInputsPermutationRequest* Arena::CreateMaybeMessage< ::hw::trezor::messages::monero::MoneroTransactionInputsPermutationRequest >(Arena* arena) {
  return Arena::CreateInternal< ::hw::trezor::messages::monero::MoneroTransactionInputsPermutationRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::hw::trezor::messages::monero::MoneroTransactionInputsPermutationAck* Arena::CreateMaybeMessage< ::hw::trezor::messages::monero::MoneroTransactionInputsPermutationAck >(Arena* arena) {
  return Arena::CreateInternal< ::hw::trezor::messages::monero::MoneroTransactionInputsPermutationAck >(arena);
}
template<> PROTOBUF_NOINLINE ::hw::trezor::messages::monero::MoneroTransactionInputViniRequest* Arena::CreateMaybeMessage< ::hw::trezor::messages::monero::MoneroTransactionInputViniRequest >(Arena* arena) {
  return Arena::CreateInternal< ::hw::trezor::messages::monero::MoneroTransactionInputViniRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::hw::trezor::messages::monero::MoneroTransactionInputViniAck* Arena::CreateMaybeMessage< ::hw::trezor::messages::monero::MoneroTransactionInputViniAck >(Arena* arena) {
  return Arena::CreateInternal< ::hw::trezor::messages::monero::MoneroTransactionInputViniAck >(arena);
}
template<> PROTOBUF_NOINLINE ::hw::trezor::messages::monero::MoneroTransactionAllInputsSetRequest* Arena::CreateMaybeMessage< ::hw::trezor::messages::monero::MoneroTransactionAllInputsSetRequest >(Arena* arena) {
  return Arena::CreateInternal< ::hw::trezor::messages::monero::MoneroTransactionAllInputsSetRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::hw::trezor::messages::monero::MoneroTransactionAllInputsSetAck* Arena::CreateMaybeMessage< ::hw::trezor::messages::monero::MoneroTransactionAllInputsSetAck >(Arena* arena) {
  return Arena::CreateInternal< ::hw::trezor::messages::monero::MoneroTransactionAllInputsSetAck >(arena);
}
template<> PROTOBUF_NOINLINE ::hw::trezor::messages::monero::MoneroTransactionSetOutputRequest* Arena::CreateMaybeMessage< ::hw::trezor::messages::monero::MoneroTransactionSetOutputRequest >(Arena* arena) {
  return Arena::CreateInternal< ::hw::trezor::messages::monero::MoneroTransactionSetOutputRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::hw::trezor::messages::monero::MoneroTransactionSetOutputAck* Arena::CreateMaybeMessage< ::hw::trezor::messages::monero::MoneroTransactionSetOutputAck >(Arena* arena) {
  return Arena::CreateInternal< ::hw::trezor::messages::monero::MoneroTransactionSetOutputAck >(arena);
}
template<> PROTOBUF_NOINLINE ::hw::trezor::messages::monero::MoneroTransactionAllOutSetRequest* Arena::CreateMaybeMessage< ::hw::trezor::messages::monero::MoneroTransactionAllOutSetRequest >(Arena* arena) {
  return Arena::CreateInternal< ::hw::trezor::messages::monero::MoneroTransactionAllOutSetRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::hw::trezor::messages::monero::MoneroTransactionAllOutSetAck_MoneroRingCtSig* Arena::CreateMaybeMessage< ::hw::trezor::messages::monero::MoneroTransactionAllOutSetAck_MoneroRingCtSig >(Arena* arena) {
  return Arena::CreateInternal< ::hw::trezor::messages::monero::MoneroTransactionAllOutSetAck_MoneroRingCtSig >(arena);
}
template<> PROTOBUF_NOINLINE ::hw::trezor::messages::monero::MoneroTransactionAllOutSetAck* Arena::CreateMaybeMessage< ::hw::trezor::messages::monero::MoneroTransactionAllOutSetAck >(Arena* arena) {
  return Arena::CreateInternal< ::hw::trezor::messages::monero::MoneroTransactionAllOutSetAck >(arena);
}
template<> PROTOBUF_NOINLINE ::hw::trezor::messages::monero::MoneroTransactionSignInputRequest* Arena::CreateMaybeMessage< ::hw::trezor::messages::monero::MoneroTransactionSignInputRequest >(Arena* arena) {
  return Arena::CreateInternal< ::hw::trezor::messages::monero::MoneroTransactionSignInputRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::hw::trezor::messages::monero::MoneroTransactionSignInputAck* Arena::CreateMaybeMessage< ::hw::trezor::messages::monero::MoneroTransactionSignInputAck >(Arena* arena) {
  return Arena::CreateInternal< ::hw::trezor::messages::monero::MoneroTransactionSignInputAck >(arena);
}
template<> PROTOBUF_NOINLINE ::hw::trezor::messages::monero::MoneroTransactionFinalRequest* Arena::CreateMaybeMessage< ::hw::trezor::messages::monero::MoneroTransactionFinalRequest >(Arena* arena) {
  return Arena::CreateInternal< ::hw::trezor::messages::monero::MoneroTransactionFinalRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::hw::trezor::messages::monero::MoneroTransactionFinalAck* Arena::CreateMaybeMessage< ::hw::trezor::messages::monero::MoneroTransactionFinalAck >(Arena* arena) {
  return Arena::CreateInternal< ::hw::trezor::messages::monero::MoneroTransactionFinalAck >(arena);
}
template<> PROTOBUF_NOINLINE ::hw::trezor::messages::monero::MoneroKeyImageExportInitRequest_MoneroSubAddressIndicesList* Arena::CreateMaybeMessage< ::hw::trezor::messages::monero::MoneroKeyImageExportInitRequest_MoneroSubAddressIndicesList >(Arena* arena) {
  return Arena::CreateInternal< ::hw::trezor::messages::monero::MoneroKeyImageExportInitRequest_MoneroSubAddressIndicesList >(arena);
}
template<> PROTOBUF_NOINLINE ::hw::trezor::messages::monero::MoneroKeyImageExportInitRequest* Arena::CreateMaybeMessage< ::hw::trezor::messages::monero::MoneroKeyImageExportInitRequest >(Arena* arena) {
  return Arena::CreateInternal< ::hw::trezor::messages::monero::MoneroKeyImageExportInitRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::hw::trezor::messages::monero::MoneroKeyImageExportInitAck* Arena::CreateMaybeMessage< ::hw::trezor::messages::monero::MoneroKeyImageExportInitAck >(Arena* arena) {
  return Arena::CreateInternal< ::hw::trezor::messages::monero::MoneroKeyImageExportInitAck >(arena);
}
template<> PROTOBUF_NOINLINE ::hw::trezor::messages::monero::MoneroKeyImageSyncStepRequest_MoneroTransferDetails* Arena::CreateMaybeMessage< ::hw::trezor::messages::monero::MoneroKeyImageSyncStepRequest_MoneroTransferDetails >(Arena* arena) {
  return Arena::CreateInternal< ::hw::trezor::messages::monero::MoneroKeyImageSyncStepRequest_MoneroTransferDetails >(arena);
}
template<> PROTOBUF_NOINLINE ::hw::trezor::messages::monero::MoneroKeyImageSyncStepRequest* Arena::CreateMaybeMessage< ::hw::trezor::messages::monero::MoneroKeyImageSyncStepRequest >(Arena* arena) {
  return Arena::CreateInternal< ::hw::trezor::messages::monero::MoneroKeyImageSyncStepRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::hw::trezor::messages::monero::MoneroKeyImageSyncStepAck_MoneroExportedKeyImage* Arena::CreateMaybeMessage< ::hw::trezor::messages::monero::MoneroKeyImageSyncStepAck_MoneroExportedKeyImage >(Arena* arena) {
  return Arena::CreateInternal< ::hw::trezor::messages::monero::MoneroKeyImageSyncStepAck_MoneroExportedKeyImage >(arena);
}
template<> PROTOBUF_NOINLINE ::hw::trezor::messages::monero::MoneroKeyImageSyncStepAck* Arena::CreateMaybeMessage< ::hw::trezor::messages::monero::MoneroKeyImageSyncStepAck >(Arena* arena) {
  return Arena::CreateInternal< ::hw::trezor::messages::monero::MoneroKeyImageSyncStepAck >(arena);
}
template<> PROTOBUF_NOINLINE ::hw::trezor::messages::monero::MoneroKeyImageSyncFinalRequest* Arena::CreateMaybeMessage< ::hw::trezor::messages::monero::MoneroKeyImageSyncFinalRequest >(Arena* arena) {
  return Arena::CreateInternal< ::hw::trezor::messages::monero::MoneroKeyImageSyncFinalRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::hw::trezor::messages::monero::MoneroKeyImageSyncFinalAck* Arena::CreateMaybeMessage< ::hw::trezor::messages::monero::MoneroKeyImageSyncFinalAck >(Arena* arena) {
  return Arena::CreateInternal< ::hw::trezor::messages::monero::MoneroKeyImageSyncFinalAck >(arena);
}
template<> PROTOBUF_NOINLINE ::hw::trezor::messages::monero::MoneroGetTxKeyRequest* Arena::CreateMaybeMessage< ::hw::trezor::messages::monero::MoneroGetTxKeyRequest >(Arena* arena) {
  return Arena::CreateInternal< ::hw::trezor::messages::monero::MoneroGetTxKeyRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::hw::trezor::messages::monero::MoneroGetTxKeyAck* Arena::CreateMaybeMessage< ::hw::trezor::messages::monero::MoneroGetTxKeyAck >(Arena* arena) {
  return Arena::CreateInternal< ::hw::trezor::messages::monero::MoneroGetTxKeyAck >(arena);
}
template<> PROTOBUF_NOINLINE ::hw::trezor::messages::monero::MoneroLiveRefreshStartRequest* Arena::CreateMaybeMessage< ::hw::trezor::messages::monero::MoneroLiveRefreshStartRequest >(Arena* arena) {
  return Arena::CreateInternal< ::hw::trezor::messages::monero::MoneroLiveRefreshStartRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::hw::trezor::messages::monero::MoneroLiveRefreshStartAck* Arena::CreateMaybeMessage< ::hw::trezor::messages::monero::MoneroLiveRefreshStartAck >(Arena* arena) {
  return Arena::CreateInternal< ::hw::trezor::messages::monero::MoneroLiveRefreshStartAck >(arena);
}
template<> PROTOBUF_NOINLINE ::hw::trezor::messages::monero::MoneroLiveRefreshStepRequest* Arena::CreateMaybeMessage< ::hw::trezor::messages::monero::MoneroLiveRefreshStepRequest >(Arena* arena) {
  return Arena::CreateInternal< ::hw::trezor::messages::monero::MoneroLiveRefreshStepRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::hw::trezor::messages::monero::MoneroLiveRefreshStepAck* Arena::CreateMaybeMessage< ::hw::trezor::messages::monero::MoneroLiveRefreshStepAck >(Arena* arena) {
  return Arena::CreateInternal< ::hw::trezor::messages::monero::MoneroLiveRefreshStepAck >(arena);
}
template<> PROTOBUF_NOINLINE ::hw::trezor::messages::monero::MoneroLiveRefreshFinalRequest* Arena::CreateMaybeMessage< ::hw::trezor::messages::monero::MoneroLiveRefreshFinalRequest >(Arena* arena) {
  return Arena::CreateInternal< ::hw::trezor::messages::monero::MoneroLiveRefreshFinalRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::hw::trezor::messages::monero::MoneroLiveRefreshFinalAck* Arena::CreateMaybeMessage< ::hw::trezor::messages::monero::MoneroLiveRefreshFinalAck >(Arena* arena) {
  return Arena::CreateInternal< ::hw::trezor::messages::monero::MoneroLiveRefreshFinalAck >(arena);
}
template<> PROTOBUF_NOINLINE ::hw::trezor::messages::monero::DebugMoneroDiagRequest* Arena::CreateMaybeMessage< ::hw::trezor::messages::monero::DebugMoneroDiagRequest >(Arena* arena) {
  return Arena::CreateInternal< ::hw::trezor::messages::monero::DebugMoneroDiagRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::hw::trezor::messages::monero::DebugMoneroDiagAck* Arena::CreateMaybeMessage< ::hw::trezor::messages::monero::DebugMoneroDiagAck >(Arena* arena) {
  return Arena::CreateInternal< ::hw::trezor::messages::monero::DebugMoneroDiagAck >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
