// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: messages-management.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_messages_2dmanagement_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_messages_2dmanagement_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

#ifdef minor
#undef minor
#endif
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_messages_2dmanagement_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_messages_2dmanagement_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[25]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_messages_2dmanagement_2eproto;
namespace hw {
namespace trezor {
namespace messages {
namespace management {
class ApplyFlags;
class ApplyFlagsDefaultTypeInternal;
extern ApplyFlagsDefaultTypeInternal _ApplyFlags_default_instance_;
class ApplySettings;
class ApplySettingsDefaultTypeInternal;
extern ApplySettingsDefaultTypeInternal _ApplySettings_default_instance_;
class BackupDevice;
class BackupDeviceDefaultTypeInternal;
extern BackupDeviceDefaultTypeInternal _BackupDevice_default_instance_;
class Cancel;
class CancelDefaultTypeInternal;
extern CancelDefaultTypeInternal _Cancel_default_instance_;
class ChangePin;
class ChangePinDefaultTypeInternal;
extern ChangePinDefaultTypeInternal _ChangePin_default_instance_;
class ChangeWipeCode;
class ChangeWipeCodeDefaultTypeInternal;
extern ChangeWipeCodeDefaultTypeInternal _ChangeWipeCode_default_instance_;
class ClearSession;
class ClearSessionDefaultTypeInternal;
extern ClearSessionDefaultTypeInternal _ClearSession_default_instance_;
class Entropy;
class EntropyDefaultTypeInternal;
extern EntropyDefaultTypeInternal _Entropy_default_instance_;
class EntropyAck;
class EntropyAckDefaultTypeInternal;
extern EntropyAckDefaultTypeInternal _EntropyAck_default_instance_;
class EntropyRequest;
class EntropyRequestDefaultTypeInternal;
extern EntropyRequestDefaultTypeInternal _EntropyRequest_default_instance_;
class Features;
class FeaturesDefaultTypeInternal;
extern FeaturesDefaultTypeInternal _Features_default_instance_;
class GetEntropy;
class GetEntropyDefaultTypeInternal;
extern GetEntropyDefaultTypeInternal _GetEntropy_default_instance_;
class GetFeatures;
class GetFeaturesDefaultTypeInternal;
extern GetFeaturesDefaultTypeInternal _GetFeatures_default_instance_;
class GetNextU2FCounter;
class GetNextU2FCounterDefaultTypeInternal;
extern GetNextU2FCounterDefaultTypeInternal _GetNextU2FCounter_default_instance_;
class Initialize;
class InitializeDefaultTypeInternal;
extern InitializeDefaultTypeInternal _Initialize_default_instance_;
class LoadDevice;
class LoadDeviceDefaultTypeInternal;
extern LoadDeviceDefaultTypeInternal _LoadDevice_default_instance_;
class NextU2FCounter;
class NextU2FCounterDefaultTypeInternal;
extern NextU2FCounterDefaultTypeInternal _NextU2FCounter_default_instance_;
class Ping;
class PingDefaultTypeInternal;
extern PingDefaultTypeInternal _Ping_default_instance_;
class RecoveryDevice;
class RecoveryDeviceDefaultTypeInternal;
extern RecoveryDeviceDefaultTypeInternal _RecoveryDevice_default_instance_;
class ResetDevice;
class ResetDeviceDefaultTypeInternal;
extern ResetDeviceDefaultTypeInternal _ResetDevice_default_instance_;
class SdProtect;
class SdProtectDefaultTypeInternal;
extern SdProtectDefaultTypeInternal _SdProtect_default_instance_;
class SetU2FCounter;
class SetU2FCounterDefaultTypeInternal;
extern SetU2FCounterDefaultTypeInternal _SetU2FCounter_default_instance_;
class WipeDevice;
class WipeDeviceDefaultTypeInternal;
extern WipeDeviceDefaultTypeInternal _WipeDevice_default_instance_;
class WordAck;
class WordAckDefaultTypeInternal;
extern WordAckDefaultTypeInternal _WordAck_default_instance_;
class WordRequest;
class WordRequestDefaultTypeInternal;
extern WordRequestDefaultTypeInternal _WordRequest_default_instance_;
}  // namespace management
}  // namespace messages
}  // namespace trezor
}  // namespace hw
PROTOBUF_NAMESPACE_OPEN
template<> ::hw::trezor::messages::management::ApplyFlags* Arena::CreateMaybeMessage<::hw::trezor::messages::management::ApplyFlags>(Arena*);
template<> ::hw::trezor::messages::management::ApplySettings* Arena::CreateMaybeMessage<::hw::trezor::messages::management::ApplySettings>(Arena*);
template<> ::hw::trezor::messages::management::BackupDevice* Arena::CreateMaybeMessage<::hw::trezor::messages::management::BackupDevice>(Arena*);
template<> ::hw::trezor::messages::management::Cancel* Arena::CreateMaybeMessage<::hw::trezor::messages::management::Cancel>(Arena*);
template<> ::hw::trezor::messages::management::ChangePin* Arena::CreateMaybeMessage<::hw::trezor::messages::management::ChangePin>(Arena*);
template<> ::hw::trezor::messages::management::ChangeWipeCode* Arena::CreateMaybeMessage<::hw::trezor::messages::management::ChangeWipeCode>(Arena*);
template<> ::hw::trezor::messages::management::ClearSession* Arena::CreateMaybeMessage<::hw::trezor::messages::management::ClearSession>(Arena*);
template<> ::hw::trezor::messages::management::Entropy* Arena::CreateMaybeMessage<::hw::trezor::messages::management::Entropy>(Arena*);
template<> ::hw::trezor::messages::management::EntropyAck* Arena::CreateMaybeMessage<::hw::trezor::messages::management::EntropyAck>(Arena*);
template<> ::hw::trezor::messages::management::EntropyRequest* Arena::CreateMaybeMessage<::hw::trezor::messages::management::EntropyRequest>(Arena*);
template<> ::hw::trezor::messages::management::Features* Arena::CreateMaybeMessage<::hw::trezor::messages::management::Features>(Arena*);
template<> ::hw::trezor::messages::management::GetEntropy* Arena::CreateMaybeMessage<::hw::trezor::messages::management::GetEntropy>(Arena*);
template<> ::hw::trezor::messages::management::GetFeatures* Arena::CreateMaybeMessage<::hw::trezor::messages::management::GetFeatures>(Arena*);
template<> ::hw::trezor::messages::management::GetNextU2FCounter* Arena::CreateMaybeMessage<::hw::trezor::messages::management::GetNextU2FCounter>(Arena*);
template<> ::hw::trezor::messages::management::Initialize* Arena::CreateMaybeMessage<::hw::trezor::messages::management::Initialize>(Arena*);
template<> ::hw::trezor::messages::management::LoadDevice* Arena::CreateMaybeMessage<::hw::trezor::messages::management::LoadDevice>(Arena*);
template<> ::hw::trezor::messages::management::NextU2FCounter* Arena::CreateMaybeMessage<::hw::trezor::messages::management::NextU2FCounter>(Arena*);
template<> ::hw::trezor::messages::management::Ping* Arena::CreateMaybeMessage<::hw::trezor::messages::management::Ping>(Arena*);
template<> ::hw::trezor::messages::management::RecoveryDevice* Arena::CreateMaybeMessage<::hw::trezor::messages::management::RecoveryDevice>(Arena*);
template<> ::hw::trezor::messages::management::ResetDevice* Arena::CreateMaybeMessage<::hw::trezor::messages::management::ResetDevice>(Arena*);
template<> ::hw::trezor::messages::management::SdProtect* Arena::CreateMaybeMessage<::hw::trezor::messages::management::SdProtect>(Arena*);
template<> ::hw::trezor::messages::management::SetU2FCounter* Arena::CreateMaybeMessage<::hw::trezor::messages::management::SetU2FCounter>(Arena*);
template<> ::hw::trezor::messages::management::WipeDevice* Arena::CreateMaybeMessage<::hw::trezor::messages::management::WipeDevice>(Arena*);
template<> ::hw::trezor::messages::management::WordAck* Arena::CreateMaybeMessage<::hw::trezor::messages::management::WordAck>(Arena*);
template<> ::hw::trezor::messages::management::WordRequest* Arena::CreateMaybeMessage<::hw::trezor::messages::management::WordRequest>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace hw {
namespace trezor {
namespace messages {
namespace management {

enum Features_Capability : int {
  Features_Capability_Capability_Bitcoin = 1,
  Features_Capability_Capability_Bitcoin_like = 2,
  Features_Capability_Capability_Binance = 3,
  Features_Capability_Capability_Cardano = 4,
  Features_Capability_Capability_Crypto = 5,
  Features_Capability_Capability_EOS = 6,
  Features_Capability_Capability_Ethereum = 7,
  Features_Capability_Capability_Lisk = 8,
  Features_Capability_Capability_Monero = 9,
  Features_Capability_Capability_NEM = 10,
  Features_Capability_Capability_Ripple = 11,
  Features_Capability_Capability_Stellar = 12,
  Features_Capability_Capability_Tezos = 13,
  Features_Capability_Capability_U2F = 14,
  Features_Capability_Capability_Shamir = 15,
  Features_Capability_Capability_ShamirGroups = 16,
  Features_Capability_Capability_PassphraseEntry = 17
};
bool Features_Capability_IsValid(int value);
constexpr Features_Capability Features_Capability_Capability_MIN = Features_Capability_Capability_Bitcoin;
constexpr Features_Capability Features_Capability_Capability_MAX = Features_Capability_Capability_PassphraseEntry;
constexpr int Features_Capability_Capability_ARRAYSIZE = Features_Capability_Capability_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Features_Capability_descriptor();
template<typename T>
inline const std::string& Features_Capability_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Features_Capability>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Features_Capability_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Features_Capability_descriptor(), enum_t_value);
}
inline bool Features_Capability_Parse(
    const std::string& name, Features_Capability* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Features_Capability>(
    Features_Capability_descriptor(), name, value);
}
enum SdProtect_SdProtectOperationType : int {
  SdProtect_SdProtectOperationType_DISABLE = 0,
  SdProtect_SdProtectOperationType_ENABLE = 1,
  SdProtect_SdProtectOperationType_REFRESH = 2
};
bool SdProtect_SdProtectOperationType_IsValid(int value);
constexpr SdProtect_SdProtectOperationType SdProtect_SdProtectOperationType_SdProtectOperationType_MIN = SdProtect_SdProtectOperationType_DISABLE;
constexpr SdProtect_SdProtectOperationType SdProtect_SdProtectOperationType_SdProtectOperationType_MAX = SdProtect_SdProtectOperationType_REFRESH;
constexpr int SdProtect_SdProtectOperationType_SdProtectOperationType_ARRAYSIZE = SdProtect_SdProtectOperationType_SdProtectOperationType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SdProtect_SdProtectOperationType_descriptor();
template<typename T>
inline const std::string& SdProtect_SdProtectOperationType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, SdProtect_SdProtectOperationType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function SdProtect_SdProtectOperationType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    SdProtect_SdProtectOperationType_descriptor(), enum_t_value);
}
inline bool SdProtect_SdProtectOperationType_Parse(
    const std::string& name, SdProtect_SdProtectOperationType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<SdProtect_SdProtectOperationType>(
    SdProtect_SdProtectOperationType_descriptor(), name, value);
}
enum RecoveryDevice_RecoveryDeviceType : int {
  RecoveryDevice_RecoveryDeviceType_RecoveryDeviceType_ScrambledWords = 0,
  RecoveryDevice_RecoveryDeviceType_RecoveryDeviceType_Matrix = 1
};
bool RecoveryDevice_RecoveryDeviceType_IsValid(int value);
constexpr RecoveryDevice_RecoveryDeviceType RecoveryDevice_RecoveryDeviceType_RecoveryDeviceType_MIN = RecoveryDevice_RecoveryDeviceType_RecoveryDeviceType_ScrambledWords;
constexpr RecoveryDevice_RecoveryDeviceType RecoveryDevice_RecoveryDeviceType_RecoveryDeviceType_MAX = RecoveryDevice_RecoveryDeviceType_RecoveryDeviceType_Matrix;
constexpr int RecoveryDevice_RecoveryDeviceType_RecoveryDeviceType_ARRAYSIZE = RecoveryDevice_RecoveryDeviceType_RecoveryDeviceType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RecoveryDevice_RecoveryDeviceType_descriptor();
template<typename T>
inline const std::string& RecoveryDevice_RecoveryDeviceType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, RecoveryDevice_RecoveryDeviceType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function RecoveryDevice_RecoveryDeviceType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    RecoveryDevice_RecoveryDeviceType_descriptor(), enum_t_value);
}
inline bool RecoveryDevice_RecoveryDeviceType_Parse(
    const std::string& name, RecoveryDevice_RecoveryDeviceType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<RecoveryDevice_RecoveryDeviceType>(
    RecoveryDevice_RecoveryDeviceType_descriptor(), name, value);
}
enum WordRequest_WordRequestType : int {
  WordRequest_WordRequestType_WordRequestType_Plain = 0,
  WordRequest_WordRequestType_WordRequestType_Matrix9 = 1,
  WordRequest_WordRequestType_WordRequestType_Matrix6 = 2
};
bool WordRequest_WordRequestType_IsValid(int value);
constexpr WordRequest_WordRequestType WordRequest_WordRequestType_WordRequestType_MIN = WordRequest_WordRequestType_WordRequestType_Plain;
constexpr WordRequest_WordRequestType WordRequest_WordRequestType_WordRequestType_MAX = WordRequest_WordRequestType_WordRequestType_Matrix6;
constexpr int WordRequest_WordRequestType_WordRequestType_ARRAYSIZE = WordRequest_WordRequestType_WordRequestType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* WordRequest_WordRequestType_descriptor();
template<typename T>
inline const std::string& WordRequest_WordRequestType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, WordRequest_WordRequestType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function WordRequest_WordRequestType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    WordRequest_WordRequestType_descriptor(), enum_t_value);
}
inline bool WordRequest_WordRequestType_Parse(
    const std::string& name, WordRequest_WordRequestType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<WordRequest_WordRequestType>(
    WordRequest_WordRequestType_descriptor(), name, value);
}
enum BackupType : int {
  Bip39 = 0,
  Slip39_Basic = 1,
  Slip39_Advanced = 2
};
bool BackupType_IsValid(int value);
constexpr BackupType BackupType_MIN = Bip39;
constexpr BackupType BackupType_MAX = Slip39_Advanced;
constexpr int BackupType_ARRAYSIZE = BackupType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* BackupType_descriptor();
template<typename T>
inline const std::string& BackupType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, BackupType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function BackupType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    BackupType_descriptor(), enum_t_value);
}
inline bool BackupType_Parse(
    const std::string& name, BackupType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<BackupType>(
    BackupType_descriptor(), name, value);
}
// ===================================================================

class Initialize :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:hw.trezor.messages.management.Initialize) */ {
 public:
  Initialize();
  virtual ~Initialize();

  Initialize(const Initialize& from);
  Initialize(Initialize&& from) noexcept
    : Initialize() {
    *this = ::std::move(from);
  }

  inline Initialize& operator=(const Initialize& from) {
    CopyFrom(from);
    return *this;
  }
  inline Initialize& operator=(Initialize&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Initialize& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Initialize* internal_default_instance() {
    return reinterpret_cast<const Initialize*>(
               &_Initialize_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Initialize& a, Initialize& b) {
    a.Swap(&b);
  }
  inline void Swap(Initialize* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Initialize* New() const final {
    return CreateMaybeMessage<Initialize>(nullptr);
  }

  Initialize* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Initialize>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Initialize& from);
  void MergeFrom(const Initialize& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Initialize* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "hw.trezor.messages.management.Initialize";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_messages_2dmanagement_2eproto);
    return ::descriptor_table_messages_2dmanagement_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSessionIdFieldNumber = 1,
  };
  // optional bytes session_id = 1;
  bool has_session_id() const;
  private:
  bool _internal_has_session_id() const;
  public:
  void clear_session_id();
  const std::string& session_id() const;
  void set_session_id(const std::string& value);
  void set_session_id(std::string&& value);
  void set_session_id(const char* value);
  void set_session_id(const void* value, size_t size);
  std::string* mutable_session_id();
  std::string* release_session_id();
  void set_allocated_session_id(std::string* session_id);
  private:
  const std::string& _internal_session_id() const;
  void _internal_set_session_id(const std::string& value);
  std::string* _internal_mutable_session_id();
  public:

  // @@protoc_insertion_point(class_scope:hw.trezor.messages.management.Initialize)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr session_id_;
  friend struct ::TableStruct_messages_2dmanagement_2eproto;
};
// -------------------------------------------------------------------

class GetFeatures :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:hw.trezor.messages.management.GetFeatures) */ {
 public:
  GetFeatures();
  virtual ~GetFeatures();

  GetFeatures(const GetFeatures& from);
  GetFeatures(GetFeatures&& from) noexcept
    : GetFeatures() {
    *this = ::std::move(from);
  }

  inline GetFeatures& operator=(const GetFeatures& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetFeatures& operator=(GetFeatures&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetFeatures& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetFeatures* internal_default_instance() {
    return reinterpret_cast<const GetFeatures*>(
               &_GetFeatures_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(GetFeatures& a, GetFeatures& b) {
    a.Swap(&b);
  }
  inline void Swap(GetFeatures* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetFeatures* New() const final {
    return CreateMaybeMessage<GetFeatures>(nullptr);
  }

  GetFeatures* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetFeatures>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetFeatures& from);
  void MergeFrom(const GetFeatures& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetFeatures* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "hw.trezor.messages.management.GetFeatures";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_messages_2dmanagement_2eproto);
    return ::descriptor_table_messages_2dmanagement_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:hw.trezor.messages.management.GetFeatures)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_messages_2dmanagement_2eproto;
};
// -------------------------------------------------------------------

class Features :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:hw.trezor.messages.management.Features) */ {
 public:
  Features();
  virtual ~Features();

  Features(const Features& from);
  Features(Features&& from) noexcept
    : Features() {
    *this = ::std::move(from);
  }

  inline Features& operator=(const Features& from) {
    CopyFrom(from);
    return *this;
  }
  inline Features& operator=(Features&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Features& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Features* internal_default_instance() {
    return reinterpret_cast<const Features*>(
               &_Features_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Features& a, Features& b) {
    a.Swap(&b);
  }
  inline void Swap(Features* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Features* New() const final {
    return CreateMaybeMessage<Features>(nullptr);
  }

  Features* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Features>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Features& from);
  void MergeFrom(const Features& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Features* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "hw.trezor.messages.management.Features";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_messages_2dmanagement_2eproto);
    return ::descriptor_table_messages_2dmanagement_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef Features_Capability Capability;
  static constexpr Capability Capability_Bitcoin =
    Features_Capability_Capability_Bitcoin;
  static constexpr Capability Capability_Bitcoin_like =
    Features_Capability_Capability_Bitcoin_like;
  static constexpr Capability Capability_Binance =
    Features_Capability_Capability_Binance;
  static constexpr Capability Capability_Cardano =
    Features_Capability_Capability_Cardano;
  static constexpr Capability Capability_Crypto =
    Features_Capability_Capability_Crypto;
  static constexpr Capability Capability_EOS =
    Features_Capability_Capability_EOS;
  static constexpr Capability Capability_Ethereum =
    Features_Capability_Capability_Ethereum;
  static constexpr Capability Capability_Lisk =
    Features_Capability_Capability_Lisk;
  static constexpr Capability Capability_Monero =
    Features_Capability_Capability_Monero;
  static constexpr Capability Capability_NEM =
    Features_Capability_Capability_NEM;
  static constexpr Capability Capability_Ripple =
    Features_Capability_Capability_Ripple;
  static constexpr Capability Capability_Stellar =
    Features_Capability_Capability_Stellar;
  static constexpr Capability Capability_Tezos =
    Features_Capability_Capability_Tezos;
  static constexpr Capability Capability_U2F =
    Features_Capability_Capability_U2F;
  static constexpr Capability Capability_Shamir =
    Features_Capability_Capability_Shamir;
  static constexpr Capability Capability_ShamirGroups =
    Features_Capability_Capability_ShamirGroups;
  static constexpr Capability Capability_PassphraseEntry =
    Features_Capability_Capability_PassphraseEntry;
  static inline bool Capability_IsValid(int value) {
    return Features_Capability_IsValid(value);
  }
  static constexpr Capability Capability_MIN =
    Features_Capability_Capability_MIN;
  static constexpr Capability Capability_MAX =
    Features_Capability_Capability_MAX;
  static constexpr int Capability_ARRAYSIZE =
    Features_Capability_Capability_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Capability_descriptor() {
    return Features_Capability_descriptor();
  }
  template<typename T>
  static inline const std::string& Capability_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Capability>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Capability_Name.");
    return Features_Capability_Name(enum_t_value);
  }
  static inline bool Capability_Parse(const std::string& name,
      Capability* value) {
    return Features_Capability_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kCapabilitiesFieldNumber = 30,
    kVendorFieldNumber = 1,
    kDeviceIdFieldNumber = 6,
    kLanguageFieldNumber = 9,
    kLabelFieldNumber = 10,
    kRevisionFieldNumber = 13,
    kBootloaderHashFieldNumber = 14,
    kModelFieldNumber = 21,
    kFwVendorFieldNumber = 25,
    kFwVendorKeysFieldNumber = 26,
    kSessionIdFieldNumber = 35,
    kMajorVersionFieldNumber = 2,
    kMinorVersionFieldNumber = 3,
    kPatchVersionFieldNumber = 4,
    kBootloaderModeFieldNumber = 5,
    kPinProtectionFieldNumber = 7,
    kPassphraseProtectionFieldNumber = 8,
    kInitializedFieldNumber = 12,
    kImportedFieldNumber = 15,
    kPinCachedFieldNumber = 16,
    kFirmwarePresentFieldNumber = 18,
    kNeedsBackupFieldNumber = 19,
    kFlagsFieldNumber = 20,
    kFwMajorFieldNumber = 22,
    kFwMinorFieldNumber = 23,
    kFwPatchFieldNumber = 24,
    kUnfinishedBackupFieldNumber = 27,
    kNoBackupFieldNumber = 28,
    kRecoveryModeFieldNumber = 29,
    kSdCardPresentFieldNumber = 32,
    kBackupTypeFieldNumber = 31,
    kSdProtectionFieldNumber = 33,
    kWipeCodeProtectionFieldNumber = 34,
    kPassphraseAlwaysOnDeviceFieldNumber = 36,
  };
  // repeated .hw.trezor.messages.management.Features.Capability capabilities = 30;
  int capabilities_size() const;
  private:
  int _internal_capabilities_size() const;
  public:
  void clear_capabilities();
  private:
  ::hw::trezor::messages::management::Features_Capability _internal_capabilities(int index) const;
  void _internal_add_capabilities(::hw::trezor::messages::management::Features_Capability value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* _internal_mutable_capabilities();
  public:
  ::hw::trezor::messages::management::Features_Capability capabilities(int index) const;
  void set_capabilities(int index, ::hw::trezor::messages::management::Features_Capability value);
  void add_capabilities(::hw::trezor::messages::management::Features_Capability value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>& capabilities() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* mutable_capabilities();

  // optional string vendor = 1;
  bool has_vendor() const;
  private:
  bool _internal_has_vendor() const;
  public:
  void clear_vendor();
  const std::string& vendor() const;
  void set_vendor(const std::string& value);
  void set_vendor(std::string&& value);
  void set_vendor(const char* value);
  void set_vendor(const char* value, size_t size);
  std::string* mutable_vendor();
  std::string* release_vendor();
  void set_allocated_vendor(std::string* vendor);
  private:
  const std::string& _internal_vendor() const;
  void _internal_set_vendor(const std::string& value);
  std::string* _internal_mutable_vendor();
  public:

  // optional string device_id = 6;
  bool has_device_id() const;
  private:
  bool _internal_has_device_id() const;
  public:
  void clear_device_id();
  const std::string& device_id() const;
  void set_device_id(const std::string& value);
  void set_device_id(std::string&& value);
  void set_device_id(const char* value);
  void set_device_id(const char* value, size_t size);
  std::string* mutable_device_id();
  std::string* release_device_id();
  void set_allocated_device_id(std::string* device_id);
  private:
  const std::string& _internal_device_id() const;
  void _internal_set_device_id(const std::string& value);
  std::string* _internal_mutable_device_id();
  public:

  // optional string language = 9;
  bool has_language() const;
  private:
  bool _internal_has_language() const;
  public:
  void clear_language();
  const std::string& language() const;
  void set_language(const std::string& value);
  void set_language(std::string&& value);
  void set_language(const char* value);
  void set_language(const char* value, size_t size);
  std::string* mutable_language();
  std::string* release_language();
  void set_allocated_language(std::string* language);
  private:
  const std::string& _internal_language() const;
  void _internal_set_language(const std::string& value);
  std::string* _internal_mutable_language();
  public:

  // optional string label = 10;
  bool has_label() const;
  private:
  bool _internal_has_label() const;
  public:
  void clear_label();
  const std::string& label() const;
  void set_label(const std::string& value);
  void set_label(std::string&& value);
  void set_label(const char* value);
  void set_label(const char* value, size_t size);
  std::string* mutable_label();
  std::string* release_label();
  void set_allocated_label(std::string* label);
  private:
  const std::string& _internal_label() const;
  void _internal_set_label(const std::string& value);
  std::string* _internal_mutable_label();
  public:

  // optional bytes revision = 13;
  bool has_revision() const;
  private:
  bool _internal_has_revision() const;
  public:
  void clear_revision();
  const std::string& revision() const;
  void set_revision(const std::string& value);
  void set_revision(std::string&& value);
  void set_revision(const char* value);
  void set_revision(const void* value, size_t size);
  std::string* mutable_revision();
  std::string* release_revision();
  void set_allocated_revision(std::string* revision);
  private:
  const std::string& _internal_revision() const;
  void _internal_set_revision(const std::string& value);
  std::string* _internal_mutable_revision();
  public:

  // optional bytes bootloader_hash = 14;
  bool has_bootloader_hash() const;
  private:
  bool _internal_has_bootloader_hash() const;
  public:
  void clear_bootloader_hash();
  const std::string& bootloader_hash() const;
  void set_bootloader_hash(const std::string& value);
  void set_bootloader_hash(std::string&& value);
  void set_bootloader_hash(const char* value);
  void set_bootloader_hash(const void* value, size_t size);
  std::string* mutable_bootloader_hash();
  std::string* release_bootloader_hash();
  void set_allocated_bootloader_hash(std::string* bootloader_hash);
  private:
  const std::string& _internal_bootloader_hash() const;
  void _internal_set_bootloader_hash(const std::string& value);
  std::string* _internal_mutable_bootloader_hash();
  public:

  // optional string model = 21;
  bool has_model() const;
  private:
  bool _internal_has_model() const;
  public:
  void clear_model();
  const std::string& model() const;
  void set_model(const std::string& value);
  void set_model(std::string&& value);
  void set_model(const char* value);
  void set_model(const char* value, size_t size);
  std::string* mutable_model();
  std::string* release_model();
  void set_allocated_model(std::string* model);
  private:
  const std::string& _internal_model() const;
  void _internal_set_model(const std::string& value);
  std::string* _internal_mutable_model();
  public:

  // optional string fw_vendor = 25;
  bool has_fw_vendor() const;
  private:
  bool _internal_has_fw_vendor() const;
  public:
  void clear_fw_vendor();
  const std::string& fw_vendor() const;
  void set_fw_vendor(const std::string& value);
  void set_fw_vendor(std::string&& value);
  void set_fw_vendor(const char* value);
  void set_fw_vendor(const char* value, size_t size);
  std::string* mutable_fw_vendor();
  std::string* release_fw_vendor();
  void set_allocated_fw_vendor(std::string* fw_vendor);
  private:
  const std::string& _internal_fw_vendor() const;
  void _internal_set_fw_vendor(const std::string& value);
  std::string* _internal_mutable_fw_vendor();
  public:

  // optional bytes fw_vendor_keys = 26;
  bool has_fw_vendor_keys() const;
  private:
  bool _internal_has_fw_vendor_keys() const;
  public:
  void clear_fw_vendor_keys();
  const std::string& fw_vendor_keys() const;
  void set_fw_vendor_keys(const std::string& value);
  void set_fw_vendor_keys(std::string&& value);
  void set_fw_vendor_keys(const char* value);
  void set_fw_vendor_keys(const void* value, size_t size);
  std::string* mutable_fw_vendor_keys();
  std::string* release_fw_vendor_keys();
  void set_allocated_fw_vendor_keys(std::string* fw_vendor_keys);
  private:
  const std::string& _internal_fw_vendor_keys() const;
  void _internal_set_fw_vendor_keys(const std::string& value);
  std::string* _internal_mutable_fw_vendor_keys();
  public:

  // optional bytes session_id = 35;
  bool has_session_id() const;
  private:
  bool _internal_has_session_id() const;
  public:
  void clear_session_id();
  const std::string& session_id() const;
  void set_session_id(const std::string& value);
  void set_session_id(std::string&& value);
  void set_session_id(const char* value);
  void set_session_id(const void* value, size_t size);
  std::string* mutable_session_id();
  std::string* release_session_id();
  void set_allocated_session_id(std::string* session_id);
  private:
  const std::string& _internal_session_id() const;
  void _internal_set_session_id(const std::string& value);
  std::string* _internal_mutable_session_id();
  public:

  // optional uint32 major_version = 2;
  bool has_major_version() const;
  private:
  bool _internal_has_major_version() const;
  public:
  void clear_major_version();
  ::PROTOBUF_NAMESPACE_ID::uint32 major_version() const;
  void set_major_version(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_major_version() const;
  void _internal_set_major_version(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 minor_version = 3;
  bool has_minor_version() const;
  private:
  bool _internal_has_minor_version() const;
  public:
  void clear_minor_version();
  ::PROTOBUF_NAMESPACE_ID::uint32 minor_version() const;
  void set_minor_version(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_minor_version() const;
  void _internal_set_minor_version(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 patch_version = 4;
  bool has_patch_version() const;
  private:
  bool _internal_has_patch_version() const;
  public:
  void clear_patch_version();
  ::PROTOBUF_NAMESPACE_ID::uint32 patch_version() const;
  void set_patch_version(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_patch_version() const;
  void _internal_set_patch_version(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional bool bootloader_mode = 5;
  bool has_bootloader_mode() const;
  private:
  bool _internal_has_bootloader_mode() const;
  public:
  void clear_bootloader_mode();
  bool bootloader_mode() const;
  void set_bootloader_mode(bool value);
  private:
  bool _internal_bootloader_mode() const;
  void _internal_set_bootloader_mode(bool value);
  public:

  // optional bool pin_protection = 7;
  bool has_pin_protection() const;
  private:
  bool _internal_has_pin_protection() const;
  public:
  void clear_pin_protection();
  bool pin_protection() const;
  void set_pin_protection(bool value);
  private:
  bool _internal_pin_protection() const;
  void _internal_set_pin_protection(bool value);
  public:

  // optional bool passphrase_protection = 8;
  bool has_passphrase_protection() const;
  private:
  bool _internal_has_passphrase_protection() const;
  public:
  void clear_passphrase_protection();
  bool passphrase_protection() const;
  void set_passphrase_protection(bool value);
  private:
  bool _internal_passphrase_protection() const;
  void _internal_set_passphrase_protection(bool value);
  public:

  // optional bool initialized = 12;
  bool has_initialized() const;
  private:
  bool _internal_has_initialized() const;
  public:
  void clear_initialized();
  bool initialized() const;
  void set_initialized(bool value);
  private:
  bool _internal_initialized() const;
  void _internal_set_initialized(bool value);
  public:

  // optional bool imported = 15;
  bool has_imported() const;
  private:
  bool _internal_has_imported() const;
  public:
  void clear_imported();
  bool imported() const;
  void set_imported(bool value);
  private:
  bool _internal_imported() const;
  void _internal_set_imported(bool value);
  public:

  // optional bool pin_cached = 16;
  bool has_pin_cached() const;
  private:
  bool _internal_has_pin_cached() const;
  public:
  void clear_pin_cached();
  bool pin_cached() const;
  void set_pin_cached(bool value);
  private:
  bool _internal_pin_cached() const;
  void _internal_set_pin_cached(bool value);
  public:

  // optional bool firmware_present = 18;
  bool has_firmware_present() const;
  private:
  bool _internal_has_firmware_present() const;
  public:
  void clear_firmware_present();
  bool firmware_present() const;
  void set_firmware_present(bool value);
  private:
  bool _internal_firmware_present() const;
  void _internal_set_firmware_present(bool value);
  public:

  // optional bool needs_backup = 19;
  bool has_needs_backup() const;
  private:
  bool _internal_has_needs_backup() const;
  public:
  void clear_needs_backup();
  bool needs_backup() const;
  void set_needs_backup(bool value);
  private:
  bool _internal_needs_backup() const;
  void _internal_set_needs_backup(bool value);
  public:

  // optional uint32 flags = 20;
  bool has_flags() const;
  private:
  bool _internal_has_flags() const;
  public:
  void clear_flags();
  ::PROTOBUF_NAMESPACE_ID::uint32 flags() const;
  void set_flags(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_flags() const;
  void _internal_set_flags(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 fw_major = 22;
  bool has_fw_major() const;
  private:
  bool _internal_has_fw_major() const;
  public:
  void clear_fw_major();
  ::PROTOBUF_NAMESPACE_ID::uint32 fw_major() const;
  void set_fw_major(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_fw_major() const;
  void _internal_set_fw_major(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 fw_minor = 23;
  bool has_fw_minor() const;
  private:
  bool _internal_has_fw_minor() const;
  public:
  void clear_fw_minor();
  ::PROTOBUF_NAMESPACE_ID::uint32 fw_minor() const;
  void set_fw_minor(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_fw_minor() const;
  void _internal_set_fw_minor(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 fw_patch = 24;
  bool has_fw_patch() const;
  private:
  bool _internal_has_fw_patch() const;
  public:
  void clear_fw_patch();
  ::PROTOBUF_NAMESPACE_ID::uint32 fw_patch() const;
  void set_fw_patch(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_fw_patch() const;
  void _internal_set_fw_patch(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional bool unfinished_backup = 27;
  bool has_unfinished_backup() const;
  private:
  bool _internal_has_unfinished_backup() const;
  public:
  void clear_unfinished_backup();
  bool unfinished_backup() const;
  void set_unfinished_backup(bool value);
  private:
  bool _internal_unfinished_backup() const;
  void _internal_set_unfinished_backup(bool value);
  public:

  // optional bool no_backup = 28;
  bool has_no_backup() const;
  private:
  bool _internal_has_no_backup() const;
  public:
  void clear_no_backup();
  bool no_backup() const;
  void set_no_backup(bool value);
  private:
  bool _internal_no_backup() const;
  void _internal_set_no_backup(bool value);
  public:

  // optional bool recovery_mode = 29;
  bool has_recovery_mode() const;
  private:
  bool _internal_has_recovery_mode() const;
  public:
  void clear_recovery_mode();
  bool recovery_mode() const;
  void set_recovery_mode(bool value);
  private:
  bool _internal_recovery_mode() const;
  void _internal_set_recovery_mode(bool value);
  public:

  // optional bool sd_card_present = 32;
  bool has_sd_card_present() const;
  private:
  bool _internal_has_sd_card_present() const;
  public:
  void clear_sd_card_present();
  bool sd_card_present() const;
  void set_sd_card_present(bool value);
  private:
  bool _internal_sd_card_present() const;
  void _internal_set_sd_card_present(bool value);
  public:

  // optional .hw.trezor.messages.management.BackupType backup_type = 31;
  bool has_backup_type() const;
  private:
  bool _internal_has_backup_type() const;
  public:
  void clear_backup_type();
  ::hw::trezor::messages::management::BackupType backup_type() const;
  void set_backup_type(::hw::trezor::messages::management::BackupType value);
  private:
  ::hw::trezor::messages::management::BackupType _internal_backup_type() const;
  void _internal_set_backup_type(::hw::trezor::messages::management::BackupType value);
  public:

  // optional bool sd_protection = 33;
  bool has_sd_protection() const;
  private:
  bool _internal_has_sd_protection() const;
  public:
  void clear_sd_protection();
  bool sd_protection() const;
  void set_sd_protection(bool value);
  private:
  bool _internal_sd_protection() const;
  void _internal_set_sd_protection(bool value);
  public:

  // optional bool wipe_code_protection = 34;
  bool has_wipe_code_protection() const;
  private:
  bool _internal_has_wipe_code_protection() const;
  public:
  void clear_wipe_code_protection();
  bool wipe_code_protection() const;
  void set_wipe_code_protection(bool value);
  private:
  bool _internal_wipe_code_protection() const;
  void _internal_set_wipe_code_protection(bool value);
  public:

  // optional bool passphrase_always_on_device = 36;
  bool has_passphrase_always_on_device() const;
  private:
  bool _internal_has_passphrase_always_on_device() const;
  public:
  void clear_passphrase_always_on_device();
  bool passphrase_always_on_device() const;
  void set_passphrase_always_on_device(bool value);
  private:
  bool _internal_passphrase_always_on_device() const;
  void _internal_set_passphrase_always_on_device(bool value);
  public:

  // @@protoc_insertion_point(class_scope:hw.trezor.messages.management.Features)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<2> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int> capabilities_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr vendor_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr device_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr language_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr label_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr revision_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr bootloader_hash_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr model_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr fw_vendor_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr fw_vendor_keys_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr session_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 major_version_;
  ::PROTOBUF_NAMESPACE_ID::uint32 minor_version_;
  ::PROTOBUF_NAMESPACE_ID::uint32 patch_version_;
  bool bootloader_mode_;
  bool pin_protection_;
  bool passphrase_protection_;
  bool initialized_;
  bool imported_;
  bool pin_cached_;
  bool firmware_present_;
  bool needs_backup_;
  ::PROTOBUF_NAMESPACE_ID::uint32 flags_;
  ::PROTOBUF_NAMESPACE_ID::uint32 fw_major_;
  ::PROTOBUF_NAMESPACE_ID::uint32 fw_minor_;
  ::PROTOBUF_NAMESPACE_ID::uint32 fw_patch_;
  bool unfinished_backup_;
  bool no_backup_;
  bool recovery_mode_;
  bool sd_card_present_;
  int backup_type_;
  bool sd_protection_;
  bool wipe_code_protection_;
  bool passphrase_always_on_device_;
  friend struct ::TableStruct_messages_2dmanagement_2eproto;
};
// -------------------------------------------------------------------

class ClearSession :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:hw.trezor.messages.management.ClearSession) */ {
 public:
  ClearSession();
  virtual ~ClearSession();

  ClearSession(const ClearSession& from);
  ClearSession(ClearSession&& from) noexcept
    : ClearSession() {
    *this = ::std::move(from);
  }

  inline ClearSession& operator=(const ClearSession& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClearSession& operator=(ClearSession&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ClearSession& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ClearSession* internal_default_instance() {
    return reinterpret_cast<const ClearSession*>(
               &_ClearSession_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ClearSession& a, ClearSession& b) {
    a.Swap(&b);
  }
  inline void Swap(ClearSession* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ClearSession* New() const final {
    return CreateMaybeMessage<ClearSession>(nullptr);
  }

  ClearSession* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ClearSession>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ClearSession& from);
  void MergeFrom(const ClearSession& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ClearSession* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "hw.trezor.messages.management.ClearSession";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_messages_2dmanagement_2eproto);
    return ::descriptor_table_messages_2dmanagement_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:hw.trezor.messages.management.ClearSession)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_messages_2dmanagement_2eproto;
};
// -------------------------------------------------------------------

class ApplySettings :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:hw.trezor.messages.management.ApplySettings) */ {
 public:
  ApplySettings();
  virtual ~ApplySettings();

  ApplySettings(const ApplySettings& from);
  ApplySettings(ApplySettings&& from) noexcept
    : ApplySettings() {
    *this = ::std::move(from);
  }

  inline ApplySettings& operator=(const ApplySettings& from) {
    CopyFrom(from);
    return *this;
  }
  inline ApplySettings& operator=(ApplySettings&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ApplySettings& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ApplySettings* internal_default_instance() {
    return reinterpret_cast<const ApplySettings*>(
               &_ApplySettings_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(ApplySettings& a, ApplySettings& b) {
    a.Swap(&b);
  }
  inline void Swap(ApplySettings* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ApplySettings* New() const final {
    return CreateMaybeMessage<ApplySettings>(nullptr);
  }

  ApplySettings* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ApplySettings>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ApplySettings& from);
  void MergeFrom(const ApplySettings& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ApplySettings* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "hw.trezor.messages.management.ApplySettings";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_messages_2dmanagement_2eproto);
    return ::descriptor_table_messages_2dmanagement_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLanguageFieldNumber = 1,
    kLabelFieldNumber = 2,
    kHomescreenFieldNumber = 4,
    kUsePassphraseFieldNumber = 3,
    kPassphraseAlwaysOnDeviceFieldNumber = 8,
    kAutoLockDelayMsFieldNumber = 6,
    kDisplayRotationFieldNumber = 7,
  };
  // optional string language = 1;
  bool has_language() const;
  private:
  bool _internal_has_language() const;
  public:
  void clear_language();
  const std::string& language() const;
  void set_language(const std::string& value);
  void set_language(std::string&& value);
  void set_language(const char* value);
  void set_language(const char* value, size_t size);
  std::string* mutable_language();
  std::string* release_language();
  void set_allocated_language(std::string* language);
  private:
  const std::string& _internal_language() const;
  void _internal_set_language(const std::string& value);
  std::string* _internal_mutable_language();
  public:

  // optional string label = 2;
  bool has_label() const;
  private:
  bool _internal_has_label() const;
  public:
  void clear_label();
  const std::string& label() const;
  void set_label(const std::string& value);
  void set_label(std::string&& value);
  void set_label(const char* value);
  void set_label(const char* value, size_t size);
  std::string* mutable_label();
  std::string* release_label();
  void set_allocated_label(std::string* label);
  private:
  const std::string& _internal_label() const;
  void _internal_set_label(const std::string& value);
  std::string* _internal_mutable_label();
  public:

  // optional bytes homescreen = 4;
  bool has_homescreen() const;
  private:
  bool _internal_has_homescreen() const;
  public:
  void clear_homescreen();
  const std::string& homescreen() const;
  void set_homescreen(const std::string& value);
  void set_homescreen(std::string&& value);
  void set_homescreen(const char* value);
  void set_homescreen(const void* value, size_t size);
  std::string* mutable_homescreen();
  std::string* release_homescreen();
  void set_allocated_homescreen(std::string* homescreen);
  private:
  const std::string& _internal_homescreen() const;
  void _internal_set_homescreen(const std::string& value);
  std::string* _internal_mutable_homescreen();
  public:

  // optional bool use_passphrase = 3;
  bool has_use_passphrase() const;
  private:
  bool _internal_has_use_passphrase() const;
  public:
  void clear_use_passphrase();
  bool use_passphrase() const;
  void set_use_passphrase(bool value);
  private:
  bool _internal_use_passphrase() const;
  void _internal_set_use_passphrase(bool value);
  public:

  // optional bool passphrase_always_on_device = 8;
  bool has_passphrase_always_on_device() const;
  private:
  bool _internal_has_passphrase_always_on_device() const;
  public:
  void clear_passphrase_always_on_device();
  bool passphrase_always_on_device() const;
  void set_passphrase_always_on_device(bool value);
  private:
  bool _internal_passphrase_always_on_device() const;
  void _internal_set_passphrase_always_on_device(bool value);
  public:

  // optional uint32 auto_lock_delay_ms = 6;
  bool has_auto_lock_delay_ms() const;
  private:
  bool _internal_has_auto_lock_delay_ms() const;
  public:
  void clear_auto_lock_delay_ms();
  ::PROTOBUF_NAMESPACE_ID::uint32 auto_lock_delay_ms() const;
  void set_auto_lock_delay_ms(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_auto_lock_delay_ms() const;
  void _internal_set_auto_lock_delay_ms(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 display_rotation = 7;
  bool has_display_rotation() const;
  private:
  bool _internal_has_display_rotation() const;
  public:
  void clear_display_rotation();
  ::PROTOBUF_NAMESPACE_ID::uint32 display_rotation() const;
  void set_display_rotation(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_display_rotation() const;
  void _internal_set_display_rotation(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:hw.trezor.messages.management.ApplySettings)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr language_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr label_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr homescreen_;
  bool use_passphrase_;
  bool passphrase_always_on_device_;
  ::PROTOBUF_NAMESPACE_ID::uint32 auto_lock_delay_ms_;
  ::PROTOBUF_NAMESPACE_ID::uint32 display_rotation_;
  friend struct ::TableStruct_messages_2dmanagement_2eproto;
};
// -------------------------------------------------------------------

class ApplyFlags :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:hw.trezor.messages.management.ApplyFlags) */ {
 public:
  ApplyFlags();
  virtual ~ApplyFlags();

  ApplyFlags(const ApplyFlags& from);
  ApplyFlags(ApplyFlags&& from) noexcept
    : ApplyFlags() {
    *this = ::std::move(from);
  }

  inline ApplyFlags& operator=(const ApplyFlags& from) {
    CopyFrom(from);
    return *this;
  }
  inline ApplyFlags& operator=(ApplyFlags&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ApplyFlags& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ApplyFlags* internal_default_instance() {
    return reinterpret_cast<const ApplyFlags*>(
               &_ApplyFlags_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(ApplyFlags& a, ApplyFlags& b) {
    a.Swap(&b);
  }
  inline void Swap(ApplyFlags* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ApplyFlags* New() const final {
    return CreateMaybeMessage<ApplyFlags>(nullptr);
  }

  ApplyFlags* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ApplyFlags>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ApplyFlags& from);
  void MergeFrom(const ApplyFlags& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ApplyFlags* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "hw.trezor.messages.management.ApplyFlags";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_messages_2dmanagement_2eproto);
    return ::descriptor_table_messages_2dmanagement_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFlagsFieldNumber = 1,
  };
  // optional uint32 flags = 1;
  bool has_flags() const;
  private:
  bool _internal_has_flags() const;
  public:
  void clear_flags();
  ::PROTOBUF_NAMESPACE_ID::uint32 flags() const;
  void set_flags(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_flags() const;
  void _internal_set_flags(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:hw.trezor.messages.management.ApplyFlags)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 flags_;
  friend struct ::TableStruct_messages_2dmanagement_2eproto;
};
// -------------------------------------------------------------------

class ChangePin :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:hw.trezor.messages.management.ChangePin) */ {
 public:
  ChangePin();
  virtual ~ChangePin();

  ChangePin(const ChangePin& from);
  ChangePin(ChangePin&& from) noexcept
    : ChangePin() {
    *this = ::std::move(from);
  }

  inline ChangePin& operator=(const ChangePin& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChangePin& operator=(ChangePin&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ChangePin& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ChangePin* internal_default_instance() {
    return reinterpret_cast<const ChangePin*>(
               &_ChangePin_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(ChangePin& a, ChangePin& b) {
    a.Swap(&b);
  }
  inline void Swap(ChangePin* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ChangePin* New() const final {
    return CreateMaybeMessage<ChangePin>(nullptr);
  }

  ChangePin* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ChangePin>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ChangePin& from);
  void MergeFrom(const ChangePin& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChangePin* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "hw.trezor.messages.management.ChangePin";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_messages_2dmanagement_2eproto);
    return ::descriptor_table_messages_2dmanagement_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRemoveFieldNumber = 1,
  };
  // optional bool remove = 1;
  bool has_remove() const;
  private:
  bool _internal_has_remove() const;
  public:
  void clear_remove();
  bool remove() const;
  void set_remove(bool value);
  private:
  bool _internal_remove() const;
  void _internal_set_remove(bool value);
  public:

  // @@protoc_insertion_point(class_scope:hw.trezor.messages.management.ChangePin)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  bool remove_;
  friend struct ::TableStruct_messages_2dmanagement_2eproto;
};
// -------------------------------------------------------------------

class ChangeWipeCode :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:hw.trezor.messages.management.ChangeWipeCode) */ {
 public:
  ChangeWipeCode();
  virtual ~ChangeWipeCode();

  ChangeWipeCode(const ChangeWipeCode& from);
  ChangeWipeCode(ChangeWipeCode&& from) noexcept
    : ChangeWipeCode() {
    *this = ::std::move(from);
  }

  inline ChangeWipeCode& operator=(const ChangeWipeCode& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChangeWipeCode& operator=(ChangeWipeCode&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ChangeWipeCode& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ChangeWipeCode* internal_default_instance() {
    return reinterpret_cast<const ChangeWipeCode*>(
               &_ChangeWipeCode_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(ChangeWipeCode& a, ChangeWipeCode& b) {
    a.Swap(&b);
  }
  inline void Swap(ChangeWipeCode* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ChangeWipeCode* New() const final {
    return CreateMaybeMessage<ChangeWipeCode>(nullptr);
  }

  ChangeWipeCode* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ChangeWipeCode>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ChangeWipeCode& from);
  void MergeFrom(const ChangeWipeCode& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChangeWipeCode* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "hw.trezor.messages.management.ChangeWipeCode";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_messages_2dmanagement_2eproto);
    return ::descriptor_table_messages_2dmanagement_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRemoveFieldNumber = 1,
  };
  // optional bool remove = 1;
  bool has_remove() const;
  private:
  bool _internal_has_remove() const;
  public:
  void clear_remove();
  bool remove() const;
  void set_remove(bool value);
  private:
  bool _internal_remove() const;
  void _internal_set_remove(bool value);
  public:

  // @@protoc_insertion_point(class_scope:hw.trezor.messages.management.ChangeWipeCode)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  bool remove_;
  friend struct ::TableStruct_messages_2dmanagement_2eproto;
};
// -------------------------------------------------------------------

class SdProtect :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:hw.trezor.messages.management.SdProtect) */ {
 public:
  SdProtect();
  virtual ~SdProtect();

  SdProtect(const SdProtect& from);
  SdProtect(SdProtect&& from) noexcept
    : SdProtect() {
    *this = ::std::move(from);
  }

  inline SdProtect& operator=(const SdProtect& from) {
    CopyFrom(from);
    return *this;
  }
  inline SdProtect& operator=(SdProtect&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SdProtect& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SdProtect* internal_default_instance() {
    return reinterpret_cast<const SdProtect*>(
               &_SdProtect_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(SdProtect& a, SdProtect& b) {
    a.Swap(&b);
  }
  inline void Swap(SdProtect* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SdProtect* New() const final {
    return CreateMaybeMessage<SdProtect>(nullptr);
  }

  SdProtect* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SdProtect>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SdProtect& from);
  void MergeFrom(const SdProtect& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SdProtect* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "hw.trezor.messages.management.SdProtect";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_messages_2dmanagement_2eproto);
    return ::descriptor_table_messages_2dmanagement_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef SdProtect_SdProtectOperationType SdProtectOperationType;
  static constexpr SdProtectOperationType DISABLE =
    SdProtect_SdProtectOperationType_DISABLE;
  static constexpr SdProtectOperationType ENABLE =
    SdProtect_SdProtectOperationType_ENABLE;
  static constexpr SdProtectOperationType REFRESH =
    SdProtect_SdProtectOperationType_REFRESH;
  static inline bool SdProtectOperationType_IsValid(int value) {
    return SdProtect_SdProtectOperationType_IsValid(value);
  }
  static constexpr SdProtectOperationType SdProtectOperationType_MIN =
    SdProtect_SdProtectOperationType_SdProtectOperationType_MIN;
  static constexpr SdProtectOperationType SdProtectOperationType_MAX =
    SdProtect_SdProtectOperationType_SdProtectOperationType_MAX;
  static constexpr int SdProtectOperationType_ARRAYSIZE =
    SdProtect_SdProtectOperationType_SdProtectOperationType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  SdProtectOperationType_descriptor() {
    return SdProtect_SdProtectOperationType_descriptor();
  }
  template<typename T>
  static inline const std::string& SdProtectOperationType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, SdProtectOperationType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function SdProtectOperationType_Name.");
    return SdProtect_SdProtectOperationType_Name(enum_t_value);
  }
  static inline bool SdProtectOperationType_Parse(const std::string& name,
      SdProtectOperationType* value) {
    return SdProtect_SdProtectOperationType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kOperationFieldNumber = 1,
  };
  // optional .hw.trezor.messages.management.SdProtect.SdProtectOperationType operation = 1;
  bool has_operation() const;
  private:
  bool _internal_has_operation() const;
  public:
  void clear_operation();
  ::hw::trezor::messages::management::SdProtect_SdProtectOperationType operation() const;
  void set_operation(::hw::trezor::messages::management::SdProtect_SdProtectOperationType value);
  private:
  ::hw::trezor::messages::management::SdProtect_SdProtectOperationType _internal_operation() const;
  void _internal_set_operation(::hw::trezor::messages::management::SdProtect_SdProtectOperationType value);
  public:

  // @@protoc_insertion_point(class_scope:hw.trezor.messages.management.SdProtect)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int operation_;
  friend struct ::TableStruct_messages_2dmanagement_2eproto;
};
// -------------------------------------------------------------------

class Ping :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:hw.trezor.messages.management.Ping) */ {
 public:
  Ping();
  virtual ~Ping();

  Ping(const Ping& from);
  Ping(Ping&& from) noexcept
    : Ping() {
    *this = ::std::move(from);
  }

  inline Ping& operator=(const Ping& from) {
    CopyFrom(from);
    return *this;
  }
  inline Ping& operator=(Ping&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Ping& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Ping* internal_default_instance() {
    return reinterpret_cast<const Ping*>(
               &_Ping_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(Ping& a, Ping& b) {
    a.Swap(&b);
  }
  inline void Swap(Ping* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Ping* New() const final {
    return CreateMaybeMessage<Ping>(nullptr);
  }

  Ping* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Ping>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Ping& from);
  void MergeFrom(const Ping& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Ping* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "hw.trezor.messages.management.Ping";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_messages_2dmanagement_2eproto);
    return ::descriptor_table_messages_2dmanagement_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageFieldNumber = 1,
    kButtonProtectionFieldNumber = 2,
  };
  // optional string message = 1;
  bool has_message() const;
  private:
  bool _internal_has_message() const;
  public:
  void clear_message();
  const std::string& message() const;
  void set_message(const std::string& value);
  void set_message(std::string&& value);
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  std::string* mutable_message();
  std::string* release_message();
  void set_allocated_message(std::string* message);
  private:
  const std::string& _internal_message() const;
  void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // optional bool button_protection = 2;
  bool has_button_protection() const;
  private:
  bool _internal_has_button_protection() const;
  public:
  void clear_button_protection();
  bool button_protection() const;
  void set_button_protection(bool value);
  private:
  bool _internal_button_protection() const;
  void _internal_set_button_protection(bool value);
  public:

  // @@protoc_insertion_point(class_scope:hw.trezor.messages.management.Ping)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
  bool button_protection_;
  friend struct ::TableStruct_messages_2dmanagement_2eproto;
};
// -------------------------------------------------------------------

class Cancel :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:hw.trezor.messages.management.Cancel) */ {
 public:
  Cancel();
  virtual ~Cancel();

  Cancel(const Cancel& from);
  Cancel(Cancel&& from) noexcept
    : Cancel() {
    *this = ::std::move(from);
  }

  inline Cancel& operator=(const Cancel& from) {
    CopyFrom(from);
    return *this;
  }
  inline Cancel& operator=(Cancel&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Cancel& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Cancel* internal_default_instance() {
    return reinterpret_cast<const Cancel*>(
               &_Cancel_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(Cancel& a, Cancel& b) {
    a.Swap(&b);
  }
  inline void Swap(Cancel* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Cancel* New() const final {
    return CreateMaybeMessage<Cancel>(nullptr);
  }

  Cancel* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Cancel>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Cancel& from);
  void MergeFrom(const Cancel& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Cancel* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "hw.trezor.messages.management.Cancel";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_messages_2dmanagement_2eproto);
    return ::descriptor_table_messages_2dmanagement_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:hw.trezor.messages.management.Cancel)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_messages_2dmanagement_2eproto;
};
// -------------------------------------------------------------------

class GetEntropy :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:hw.trezor.messages.management.GetEntropy) */ {
 public:
  GetEntropy();
  virtual ~GetEntropy();

  GetEntropy(const GetEntropy& from);
  GetEntropy(GetEntropy&& from) noexcept
    : GetEntropy() {
    *this = ::std::move(from);
  }

  inline GetEntropy& operator=(const GetEntropy& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetEntropy& operator=(GetEntropy&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetEntropy& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetEntropy* internal_default_instance() {
    return reinterpret_cast<const GetEntropy*>(
               &_GetEntropy_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(GetEntropy& a, GetEntropy& b) {
    a.Swap(&b);
  }
  inline void Swap(GetEntropy* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetEntropy* New() const final {
    return CreateMaybeMessage<GetEntropy>(nullptr);
  }

  GetEntropy* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetEntropy>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetEntropy& from);
  void MergeFrom(const GetEntropy& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetEntropy* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "hw.trezor.messages.management.GetEntropy";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_messages_2dmanagement_2eproto);
    return ::descriptor_table_messages_2dmanagement_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSizeFieldNumber = 1,
  };
  // required uint32 size = 1;
  bool has_size() const;
  private:
  bool _internal_has_size() const;
  public:
  void clear_size();
  ::PROTOBUF_NAMESPACE_ID::uint32 size() const;
  void set_size(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_size() const;
  void _internal_set_size(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:hw.trezor.messages.management.GetEntropy)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 size_;
  friend struct ::TableStruct_messages_2dmanagement_2eproto;
};
// -------------------------------------------------------------------

class Entropy :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:hw.trezor.messages.management.Entropy) */ {
 public:
  Entropy();
  virtual ~Entropy();

  Entropy(const Entropy& from);
  Entropy(Entropy&& from) noexcept
    : Entropy() {
    *this = ::std::move(from);
  }

  inline Entropy& operator=(const Entropy& from) {
    CopyFrom(from);
    return *this;
  }
  inline Entropy& operator=(Entropy&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Entropy& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Entropy* internal_default_instance() {
    return reinterpret_cast<const Entropy*>(
               &_Entropy_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(Entropy& a, Entropy& b) {
    a.Swap(&b);
  }
  inline void Swap(Entropy* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Entropy* New() const final {
    return CreateMaybeMessage<Entropy>(nullptr);
  }

  Entropy* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Entropy>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Entropy& from);
  void MergeFrom(const Entropy& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Entropy* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "hw.trezor.messages.management.Entropy";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_messages_2dmanagement_2eproto);
    return ::descriptor_table_messages_2dmanagement_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEntropyFieldNumber = 1,
  };
  // required bytes entropy = 1;
  bool has_entropy() const;
  private:
  bool _internal_has_entropy() const;
  public:
  void clear_entropy();
  const std::string& entropy() const;
  void set_entropy(const std::string& value);
  void set_entropy(std::string&& value);
  void set_entropy(const char* value);
  void set_entropy(const void* value, size_t size);
  std::string* mutable_entropy();
  std::string* release_entropy();
  void set_allocated_entropy(std::string* entropy);
  private:
  const std::string& _internal_entropy() const;
  void _internal_set_entropy(const std::string& value);
  std::string* _internal_mutable_entropy();
  public:

  // @@protoc_insertion_point(class_scope:hw.trezor.messages.management.Entropy)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr entropy_;
  friend struct ::TableStruct_messages_2dmanagement_2eproto;
};
// -------------------------------------------------------------------

class WipeDevice :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:hw.trezor.messages.management.WipeDevice) */ {
 public:
  WipeDevice();
  virtual ~WipeDevice();

  WipeDevice(const WipeDevice& from);
  WipeDevice(WipeDevice&& from) noexcept
    : WipeDevice() {
    *this = ::std::move(from);
  }

  inline WipeDevice& operator=(const WipeDevice& from) {
    CopyFrom(from);
    return *this;
  }
  inline WipeDevice& operator=(WipeDevice&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const WipeDevice& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const WipeDevice* internal_default_instance() {
    return reinterpret_cast<const WipeDevice*>(
               &_WipeDevice_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(WipeDevice& a, WipeDevice& b) {
    a.Swap(&b);
  }
  inline void Swap(WipeDevice* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline WipeDevice* New() const final {
    return CreateMaybeMessage<WipeDevice>(nullptr);
  }

  WipeDevice* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<WipeDevice>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const WipeDevice& from);
  void MergeFrom(const WipeDevice& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WipeDevice* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "hw.trezor.messages.management.WipeDevice";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_messages_2dmanagement_2eproto);
    return ::descriptor_table_messages_2dmanagement_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:hw.trezor.messages.management.WipeDevice)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_messages_2dmanagement_2eproto;
};
// -------------------------------------------------------------------

class LoadDevice :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:hw.trezor.messages.management.LoadDevice) */ {
 public:
  LoadDevice();
  virtual ~LoadDevice();

  LoadDevice(const LoadDevice& from);
  LoadDevice(LoadDevice&& from) noexcept
    : LoadDevice() {
    *this = ::std::move(from);
  }

  inline LoadDevice& operator=(const LoadDevice& from) {
    CopyFrom(from);
    return *this;
  }
  inline LoadDevice& operator=(LoadDevice&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LoadDevice& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LoadDevice* internal_default_instance() {
    return reinterpret_cast<const LoadDevice*>(
               &_LoadDevice_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(LoadDevice& a, LoadDevice& b) {
    a.Swap(&b);
  }
  inline void Swap(LoadDevice* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LoadDevice* New() const final {
    return CreateMaybeMessage<LoadDevice>(nullptr);
  }

  LoadDevice* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LoadDevice>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LoadDevice& from);
  void MergeFrom(const LoadDevice& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LoadDevice* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "hw.trezor.messages.management.LoadDevice";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_messages_2dmanagement_2eproto);
    return ::descriptor_table_messages_2dmanagement_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMnemonicsFieldNumber = 1,
    kPinFieldNumber = 3,
    kLanguageFieldNumber = 5,
    kLabelFieldNumber = 6,
    kPassphraseProtectionFieldNumber = 4,
    kSkipChecksumFieldNumber = 7,
    kNeedsBackupFieldNumber = 9,
    kNoBackupFieldNumber = 10,
    kU2FCounterFieldNumber = 8,
  };
  // repeated string mnemonics = 1;
  int mnemonics_size() const;
  private:
  int _internal_mnemonics_size() const;
  public:
  void clear_mnemonics();
  const std::string& mnemonics(int index) const;
  std::string* mutable_mnemonics(int index);
  void set_mnemonics(int index, const std::string& value);
  void set_mnemonics(int index, std::string&& value);
  void set_mnemonics(int index, const char* value);
  void set_mnemonics(int index, const char* value, size_t size);
  std::string* add_mnemonics();
  void add_mnemonics(const std::string& value);
  void add_mnemonics(std::string&& value);
  void add_mnemonics(const char* value);
  void add_mnemonics(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& mnemonics() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_mnemonics();
  private:
  const std::string& _internal_mnemonics(int index) const;
  std::string* _internal_add_mnemonics();
  public:

  // optional string pin = 3;
  bool has_pin() const;
  private:
  bool _internal_has_pin() const;
  public:
  void clear_pin();
  const std::string& pin() const;
  void set_pin(const std::string& value);
  void set_pin(std::string&& value);
  void set_pin(const char* value);
  void set_pin(const char* value, size_t size);
  std::string* mutable_pin();
  std::string* release_pin();
  void set_allocated_pin(std::string* pin);
  private:
  const std::string& _internal_pin() const;
  void _internal_set_pin(const std::string& value);
  std::string* _internal_mutable_pin();
  public:

  // optional string language = 5 [default = "en-US"];
  bool has_language() const;
  private:
  bool _internal_has_language() const;
  public:
  void clear_language();
  const std::string& language() const;
  void set_language(const std::string& value);
  void set_language(std::string&& value);
  void set_language(const char* value);
  void set_language(const char* value, size_t size);
  std::string* mutable_language();
  std::string* release_language();
  void set_allocated_language(std::string* language);
  private:
  const std::string& _internal_language() const;
  void _internal_set_language(const std::string& value);
  std::string* _internal_mutable_language();
  public:

  // optional string label = 6;
  bool has_label() const;
  private:
  bool _internal_has_label() const;
  public:
  void clear_label();
  const std::string& label() const;
  void set_label(const std::string& value);
  void set_label(std::string&& value);
  void set_label(const char* value);
  void set_label(const char* value, size_t size);
  std::string* mutable_label();
  std::string* release_label();
  void set_allocated_label(std::string* label);
  private:
  const std::string& _internal_label() const;
  void _internal_set_label(const std::string& value);
  std::string* _internal_mutable_label();
  public:

  // optional bool passphrase_protection = 4;
  bool has_passphrase_protection() const;
  private:
  bool _internal_has_passphrase_protection() const;
  public:
  void clear_passphrase_protection();
  bool passphrase_protection() const;
  void set_passphrase_protection(bool value);
  private:
  bool _internal_passphrase_protection() const;
  void _internal_set_passphrase_protection(bool value);
  public:

  // optional bool skip_checksum = 7;
  bool has_skip_checksum() const;
  private:
  bool _internal_has_skip_checksum() const;
  public:
  void clear_skip_checksum();
  bool skip_checksum() const;
  void set_skip_checksum(bool value);
  private:
  bool _internal_skip_checksum() const;
  void _internal_set_skip_checksum(bool value);
  public:

  // optional bool needs_backup = 9;
  bool has_needs_backup() const;
  private:
  bool _internal_has_needs_backup() const;
  public:
  void clear_needs_backup();
  bool needs_backup() const;
  void set_needs_backup(bool value);
  private:
  bool _internal_needs_backup() const;
  void _internal_set_needs_backup(bool value);
  public:

  // optional bool no_backup = 10;
  bool has_no_backup() const;
  private:
  bool _internal_has_no_backup() const;
  public:
  void clear_no_backup();
  bool no_backup() const;
  void set_no_backup(bool value);
  private:
  bool _internal_no_backup() const;
  void _internal_set_no_backup(bool value);
  public:

  // optional uint32 u2f_counter = 8;
  bool has_u2f_counter() const;
  private:
  bool _internal_has_u2f_counter() const;
  public:
  void clear_u2f_counter();
  ::PROTOBUF_NAMESPACE_ID::uint32 u2f_counter() const;
  void set_u2f_counter(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_u2f_counter() const;
  void _internal_set_u2f_counter(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:hw.trezor.messages.management.LoadDevice)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> mnemonics_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pin_;
  public:
  static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> _i_give_permission_to_break_this_code_default_language_;
  private:
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr language_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr label_;
  bool passphrase_protection_;
  bool skip_checksum_;
  bool needs_backup_;
  bool no_backup_;
  ::PROTOBUF_NAMESPACE_ID::uint32 u2f_counter_;
  friend struct ::TableStruct_messages_2dmanagement_2eproto;
};
// -------------------------------------------------------------------

class ResetDevice :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:hw.trezor.messages.management.ResetDevice) */ {
 public:
  ResetDevice();
  virtual ~ResetDevice();

  ResetDevice(const ResetDevice& from);
  ResetDevice(ResetDevice&& from) noexcept
    : ResetDevice() {
    *this = ::std::move(from);
  }

  inline ResetDevice& operator=(const ResetDevice& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResetDevice& operator=(ResetDevice&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ResetDevice& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ResetDevice* internal_default_instance() {
    return reinterpret_cast<const ResetDevice*>(
               &_ResetDevice_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(ResetDevice& a, ResetDevice& b) {
    a.Swap(&b);
  }
  inline void Swap(ResetDevice* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ResetDevice* New() const final {
    return CreateMaybeMessage<ResetDevice>(nullptr);
  }

  ResetDevice* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ResetDevice>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ResetDevice& from);
  void MergeFrom(const ResetDevice& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResetDevice* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "hw.trezor.messages.management.ResetDevice";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_messages_2dmanagement_2eproto);
    return ::descriptor_table_messages_2dmanagement_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLanguageFieldNumber = 5,
    kLabelFieldNumber = 6,
    kDisplayRandomFieldNumber = 1,
    kPassphraseProtectionFieldNumber = 3,
    kPinProtectionFieldNumber = 4,
    kSkipBackupFieldNumber = 8,
    kU2FCounterFieldNumber = 7,
    kNoBackupFieldNumber = 9,
    kBackupTypeFieldNumber = 10,
    kStrengthFieldNumber = 2,
  };
  // optional string language = 5 [default = "en-US"];
  bool has_language() const;
  private:
  bool _internal_has_language() const;
  public:
  void clear_language();
  const std::string& language() const;
  void set_language(const std::string& value);
  void set_language(std::string&& value);
  void set_language(const char* value);
  void set_language(const char* value, size_t size);
  std::string* mutable_language();
  std::string* release_language();
  void set_allocated_language(std::string* language);
  private:
  const std::string& _internal_language() const;
  void _internal_set_language(const std::string& value);
  std::string* _internal_mutable_language();
  public:

  // optional string label = 6;
  bool has_label() const;
  private:
  bool _internal_has_label() const;
  public:
  void clear_label();
  const std::string& label() const;
  void set_label(const std::string& value);
  void set_label(std::string&& value);
  void set_label(const char* value);
  void set_label(const char* value, size_t size);
  std::string* mutable_label();
  std::string* release_label();
  void set_allocated_label(std::string* label);
  private:
  const std::string& _internal_label() const;
  void _internal_set_label(const std::string& value);
  std::string* _internal_mutable_label();
  public:

  // optional bool display_random = 1;
  bool has_display_random() const;
  private:
  bool _internal_has_display_random() const;
  public:
  void clear_display_random();
  bool display_random() const;
  void set_display_random(bool value);
  private:
  bool _internal_display_random() const;
  void _internal_set_display_random(bool value);
  public:

  // optional bool passphrase_protection = 3;
  bool has_passphrase_protection() const;
  private:
  bool _internal_has_passphrase_protection() const;
  public:
  void clear_passphrase_protection();
  bool passphrase_protection() const;
  void set_passphrase_protection(bool value);
  private:
  bool _internal_passphrase_protection() const;
  void _internal_set_passphrase_protection(bool value);
  public:

  // optional bool pin_protection = 4;
  bool has_pin_protection() const;
  private:
  bool _internal_has_pin_protection() const;
  public:
  void clear_pin_protection();
  bool pin_protection() const;
  void set_pin_protection(bool value);
  private:
  bool _internal_pin_protection() const;
  void _internal_set_pin_protection(bool value);
  public:

  // optional bool skip_backup = 8;
  bool has_skip_backup() const;
  private:
  bool _internal_has_skip_backup() const;
  public:
  void clear_skip_backup();
  bool skip_backup() const;
  void set_skip_backup(bool value);
  private:
  bool _internal_skip_backup() const;
  void _internal_set_skip_backup(bool value);
  public:

  // optional uint32 u2f_counter = 7;
  bool has_u2f_counter() const;
  private:
  bool _internal_has_u2f_counter() const;
  public:
  void clear_u2f_counter();
  ::PROTOBUF_NAMESPACE_ID::uint32 u2f_counter() const;
  void set_u2f_counter(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_u2f_counter() const;
  void _internal_set_u2f_counter(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional bool no_backup = 9;
  bool has_no_backup() const;
  private:
  bool _internal_has_no_backup() const;
  public:
  void clear_no_backup();
  bool no_backup() const;
  void set_no_backup(bool value);
  private:
  bool _internal_no_backup() const;
  void _internal_set_no_backup(bool value);
  public:

  // optional .hw.trezor.messages.management.BackupType backup_type = 10 [default = Bip39];
  bool has_backup_type() const;
  private:
  bool _internal_has_backup_type() const;
  public:
  void clear_backup_type();
  ::hw::trezor::messages::management::BackupType backup_type() const;
  void set_backup_type(::hw::trezor::messages::management::BackupType value);
  private:
  ::hw::trezor::messages::management::BackupType _internal_backup_type() const;
  void _internal_set_backup_type(::hw::trezor::messages::management::BackupType value);
  public:

  // optional uint32 strength = 2 [default = 256];
  bool has_strength() const;
  private:
  bool _internal_has_strength() const;
  public:
  void clear_strength();
  ::PROTOBUF_NAMESPACE_ID::uint32 strength() const;
  void set_strength(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_strength() const;
  void _internal_set_strength(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:hw.trezor.messages.management.ResetDevice)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  public:
  static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> _i_give_permission_to_break_this_code_default_language_;
  private:
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr language_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr label_;
  bool display_random_;
  bool passphrase_protection_;
  bool pin_protection_;
  bool skip_backup_;
  ::PROTOBUF_NAMESPACE_ID::uint32 u2f_counter_;
  bool no_backup_;
  int backup_type_;
  ::PROTOBUF_NAMESPACE_ID::uint32 strength_;
  friend struct ::TableStruct_messages_2dmanagement_2eproto;
};
// -------------------------------------------------------------------

class BackupDevice :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:hw.trezor.messages.management.BackupDevice) */ {
 public:
  BackupDevice();
  virtual ~BackupDevice();

  BackupDevice(const BackupDevice& from);
  BackupDevice(BackupDevice&& from) noexcept
    : BackupDevice() {
    *this = ::std::move(from);
  }

  inline BackupDevice& operator=(const BackupDevice& from) {
    CopyFrom(from);
    return *this;
  }
  inline BackupDevice& operator=(BackupDevice&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BackupDevice& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BackupDevice* internal_default_instance() {
    return reinterpret_cast<const BackupDevice*>(
               &_BackupDevice_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(BackupDevice& a, BackupDevice& b) {
    a.Swap(&b);
  }
  inline void Swap(BackupDevice* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BackupDevice* New() const final {
    return CreateMaybeMessage<BackupDevice>(nullptr);
  }

  BackupDevice* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BackupDevice>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BackupDevice& from);
  void MergeFrom(const BackupDevice& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BackupDevice* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "hw.trezor.messages.management.BackupDevice";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_messages_2dmanagement_2eproto);
    return ::descriptor_table_messages_2dmanagement_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:hw.trezor.messages.management.BackupDevice)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_messages_2dmanagement_2eproto;
};
// -------------------------------------------------------------------

class EntropyRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:hw.trezor.messages.management.EntropyRequest) */ {
 public:
  EntropyRequest();
  virtual ~EntropyRequest();

  EntropyRequest(const EntropyRequest& from);
  EntropyRequest(EntropyRequest&& from) noexcept
    : EntropyRequest() {
    *this = ::std::move(from);
  }

  inline EntropyRequest& operator=(const EntropyRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline EntropyRequest& operator=(EntropyRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const EntropyRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EntropyRequest* internal_default_instance() {
    return reinterpret_cast<const EntropyRequest*>(
               &_EntropyRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(EntropyRequest& a, EntropyRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(EntropyRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline EntropyRequest* New() const final {
    return CreateMaybeMessage<EntropyRequest>(nullptr);
  }

  EntropyRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EntropyRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const EntropyRequest& from);
  void MergeFrom(const EntropyRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EntropyRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "hw.trezor.messages.management.EntropyRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_messages_2dmanagement_2eproto);
    return ::descriptor_table_messages_2dmanagement_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:hw.trezor.messages.management.EntropyRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_messages_2dmanagement_2eproto;
};
// -------------------------------------------------------------------

class EntropyAck :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:hw.trezor.messages.management.EntropyAck) */ {
 public:
  EntropyAck();
  virtual ~EntropyAck();

  EntropyAck(const EntropyAck& from);
  EntropyAck(EntropyAck&& from) noexcept
    : EntropyAck() {
    *this = ::std::move(from);
  }

  inline EntropyAck& operator=(const EntropyAck& from) {
    CopyFrom(from);
    return *this;
  }
  inline EntropyAck& operator=(EntropyAck&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const EntropyAck& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EntropyAck* internal_default_instance() {
    return reinterpret_cast<const EntropyAck*>(
               &_EntropyAck_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(EntropyAck& a, EntropyAck& b) {
    a.Swap(&b);
  }
  inline void Swap(EntropyAck* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline EntropyAck* New() const final {
    return CreateMaybeMessage<EntropyAck>(nullptr);
  }

  EntropyAck* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EntropyAck>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const EntropyAck& from);
  void MergeFrom(const EntropyAck& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EntropyAck* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "hw.trezor.messages.management.EntropyAck";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_messages_2dmanagement_2eproto);
    return ::descriptor_table_messages_2dmanagement_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEntropyFieldNumber = 1,
  };
  // optional bytes entropy = 1;
  bool has_entropy() const;
  private:
  bool _internal_has_entropy() const;
  public:
  void clear_entropy();
  const std::string& entropy() const;
  void set_entropy(const std::string& value);
  void set_entropy(std::string&& value);
  void set_entropy(const char* value);
  void set_entropy(const void* value, size_t size);
  std::string* mutable_entropy();
  std::string* release_entropy();
  void set_allocated_entropy(std::string* entropy);
  private:
  const std::string& _internal_entropy() const;
  void _internal_set_entropy(const std::string& value);
  std::string* _internal_mutable_entropy();
  public:

  // @@protoc_insertion_point(class_scope:hw.trezor.messages.management.EntropyAck)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr entropy_;
  friend struct ::TableStruct_messages_2dmanagement_2eproto;
};
// -------------------------------------------------------------------

class RecoveryDevice :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:hw.trezor.messages.management.RecoveryDevice) */ {
 public:
  RecoveryDevice();
  virtual ~RecoveryDevice();

  RecoveryDevice(const RecoveryDevice& from);
  RecoveryDevice(RecoveryDevice&& from) noexcept
    : RecoveryDevice() {
    *this = ::std::move(from);
  }

  inline RecoveryDevice& operator=(const RecoveryDevice& from) {
    CopyFrom(from);
    return *this;
  }
  inline RecoveryDevice& operator=(RecoveryDevice&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RecoveryDevice& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RecoveryDevice* internal_default_instance() {
    return reinterpret_cast<const RecoveryDevice*>(
               &_RecoveryDevice_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(RecoveryDevice& a, RecoveryDevice& b) {
    a.Swap(&b);
  }
  inline void Swap(RecoveryDevice* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RecoveryDevice* New() const final {
    return CreateMaybeMessage<RecoveryDevice>(nullptr);
  }

  RecoveryDevice* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RecoveryDevice>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RecoveryDevice& from);
  void MergeFrom(const RecoveryDevice& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RecoveryDevice* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "hw.trezor.messages.management.RecoveryDevice";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_messages_2dmanagement_2eproto);
    return ::descriptor_table_messages_2dmanagement_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef RecoveryDevice_RecoveryDeviceType RecoveryDeviceType;
  static constexpr RecoveryDeviceType RecoveryDeviceType_ScrambledWords =
    RecoveryDevice_RecoveryDeviceType_RecoveryDeviceType_ScrambledWords;
  static constexpr RecoveryDeviceType RecoveryDeviceType_Matrix =
    RecoveryDevice_RecoveryDeviceType_RecoveryDeviceType_Matrix;
  static inline bool RecoveryDeviceType_IsValid(int value) {
    return RecoveryDevice_RecoveryDeviceType_IsValid(value);
  }
  static constexpr RecoveryDeviceType RecoveryDeviceType_MIN =
    RecoveryDevice_RecoveryDeviceType_RecoveryDeviceType_MIN;
  static constexpr RecoveryDeviceType RecoveryDeviceType_MAX =
    RecoveryDevice_RecoveryDeviceType_RecoveryDeviceType_MAX;
  static constexpr int RecoveryDeviceType_ARRAYSIZE =
    RecoveryDevice_RecoveryDeviceType_RecoveryDeviceType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  RecoveryDeviceType_descriptor() {
    return RecoveryDevice_RecoveryDeviceType_descriptor();
  }
  template<typename T>
  static inline const std::string& RecoveryDeviceType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, RecoveryDeviceType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function RecoveryDeviceType_Name.");
    return RecoveryDevice_RecoveryDeviceType_Name(enum_t_value);
  }
  static inline bool RecoveryDeviceType_Parse(const std::string& name,
      RecoveryDeviceType* value) {
    return RecoveryDevice_RecoveryDeviceType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kLanguageFieldNumber = 4,
    kLabelFieldNumber = 5,
    kWordCountFieldNumber = 1,
    kPassphraseProtectionFieldNumber = 2,
    kPinProtectionFieldNumber = 3,
    kEnforceWordlistFieldNumber = 6,
    kDryRunFieldNumber = 10,
    kTypeFieldNumber = 8,
    kU2FCounterFieldNumber = 9,
  };
  // optional string language = 4 [default = "en-US"];
  bool has_language() const;
  private:
  bool _internal_has_language() const;
  public:
  void clear_language();
  const std::string& language() const;
  void set_language(const std::string& value);
  void set_language(std::string&& value);
  void set_language(const char* value);
  void set_language(const char* value, size_t size);
  std::string* mutable_language();
  std::string* release_language();
  void set_allocated_language(std::string* language);
  private:
  const std::string& _internal_language() const;
  void _internal_set_language(const std::string& value);
  std::string* _internal_mutable_language();
  public:

  // optional string label = 5;
  bool has_label() const;
  private:
  bool _internal_has_label() const;
  public:
  void clear_label();
  const std::string& label() const;
  void set_label(const std::string& value);
  void set_label(std::string&& value);
  void set_label(const char* value);
  void set_label(const char* value, size_t size);
  std::string* mutable_label();
  std::string* release_label();
  void set_allocated_label(std::string* label);
  private:
  const std::string& _internal_label() const;
  void _internal_set_label(const std::string& value);
  std::string* _internal_mutable_label();
  public:

  // optional uint32 word_count = 1;
  bool has_word_count() const;
  private:
  bool _internal_has_word_count() const;
  public:
  void clear_word_count();
  ::PROTOBUF_NAMESPACE_ID::uint32 word_count() const;
  void set_word_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_word_count() const;
  void _internal_set_word_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional bool passphrase_protection = 2;
  bool has_passphrase_protection() const;
  private:
  bool _internal_has_passphrase_protection() const;
  public:
  void clear_passphrase_protection();
  bool passphrase_protection() const;
  void set_passphrase_protection(bool value);
  private:
  bool _internal_passphrase_protection() const;
  void _internal_set_passphrase_protection(bool value);
  public:

  // optional bool pin_protection = 3;
  bool has_pin_protection() const;
  private:
  bool _internal_has_pin_protection() const;
  public:
  void clear_pin_protection();
  bool pin_protection() const;
  void set_pin_protection(bool value);
  private:
  bool _internal_pin_protection() const;
  void _internal_set_pin_protection(bool value);
  public:

  // optional bool enforce_wordlist = 6;
  bool has_enforce_wordlist() const;
  private:
  bool _internal_has_enforce_wordlist() const;
  public:
  void clear_enforce_wordlist();
  bool enforce_wordlist() const;
  void set_enforce_wordlist(bool value);
  private:
  bool _internal_enforce_wordlist() const;
  void _internal_set_enforce_wordlist(bool value);
  public:

  // optional bool dry_run = 10;
  bool has_dry_run() const;
  private:
  bool _internal_has_dry_run() const;
  public:
  void clear_dry_run();
  bool dry_run() const;
  void set_dry_run(bool value);
  private:
  bool _internal_dry_run() const;
  void _internal_set_dry_run(bool value);
  public:

  // optional .hw.trezor.messages.management.RecoveryDevice.RecoveryDeviceType type = 8;
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  ::hw::trezor::messages::management::RecoveryDevice_RecoveryDeviceType type() const;
  void set_type(::hw::trezor::messages::management::RecoveryDevice_RecoveryDeviceType value);
  private:
  ::hw::trezor::messages::management::RecoveryDevice_RecoveryDeviceType _internal_type() const;
  void _internal_set_type(::hw::trezor::messages::management::RecoveryDevice_RecoveryDeviceType value);
  public:

  // optional uint32 u2f_counter = 9;
  bool has_u2f_counter() const;
  private:
  bool _internal_has_u2f_counter() const;
  public:
  void clear_u2f_counter();
  ::PROTOBUF_NAMESPACE_ID::uint32 u2f_counter() const;
  void set_u2f_counter(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_u2f_counter() const;
  void _internal_set_u2f_counter(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:hw.trezor.messages.management.RecoveryDevice)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  public:
  static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> _i_give_permission_to_break_this_code_default_language_;
  private:
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr language_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr label_;
  ::PROTOBUF_NAMESPACE_ID::uint32 word_count_;
  bool passphrase_protection_;
  bool pin_protection_;
  bool enforce_wordlist_;
  bool dry_run_;
  int type_;
  ::PROTOBUF_NAMESPACE_ID::uint32 u2f_counter_;
  friend struct ::TableStruct_messages_2dmanagement_2eproto;
};
// -------------------------------------------------------------------

class WordRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:hw.trezor.messages.management.WordRequest) */ {
 public:
  WordRequest();
  virtual ~WordRequest();

  WordRequest(const WordRequest& from);
  WordRequest(WordRequest&& from) noexcept
    : WordRequest() {
    *this = ::std::move(from);
  }

  inline WordRequest& operator=(const WordRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline WordRequest& operator=(WordRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const WordRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const WordRequest* internal_default_instance() {
    return reinterpret_cast<const WordRequest*>(
               &_WordRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(WordRequest& a, WordRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(WordRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline WordRequest* New() const final {
    return CreateMaybeMessage<WordRequest>(nullptr);
  }

  WordRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<WordRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const WordRequest& from);
  void MergeFrom(const WordRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WordRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "hw.trezor.messages.management.WordRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_messages_2dmanagement_2eproto);
    return ::descriptor_table_messages_2dmanagement_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef WordRequest_WordRequestType WordRequestType;
  static constexpr WordRequestType WordRequestType_Plain =
    WordRequest_WordRequestType_WordRequestType_Plain;
  static constexpr WordRequestType WordRequestType_Matrix9 =
    WordRequest_WordRequestType_WordRequestType_Matrix9;
  static constexpr WordRequestType WordRequestType_Matrix6 =
    WordRequest_WordRequestType_WordRequestType_Matrix6;
  static inline bool WordRequestType_IsValid(int value) {
    return WordRequest_WordRequestType_IsValid(value);
  }
  static constexpr WordRequestType WordRequestType_MIN =
    WordRequest_WordRequestType_WordRequestType_MIN;
  static constexpr WordRequestType WordRequestType_MAX =
    WordRequest_WordRequestType_WordRequestType_MAX;
  static constexpr int WordRequestType_ARRAYSIZE =
    WordRequest_WordRequestType_WordRequestType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  WordRequestType_descriptor() {
    return WordRequest_WordRequestType_descriptor();
  }
  template<typename T>
  static inline const std::string& WordRequestType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, WordRequestType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function WordRequestType_Name.");
    return WordRequest_WordRequestType_Name(enum_t_value);
  }
  static inline bool WordRequestType_Parse(const std::string& name,
      WordRequestType* value) {
    return WordRequest_WordRequestType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kTypeFieldNumber = 1,
  };
  // optional .hw.trezor.messages.management.WordRequest.WordRequestType type = 1;
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  ::hw::trezor::messages::management::WordRequest_WordRequestType type() const;
  void set_type(::hw::trezor::messages::management::WordRequest_WordRequestType value);
  private:
  ::hw::trezor::messages::management::WordRequest_WordRequestType _internal_type() const;
  void _internal_set_type(::hw::trezor::messages::management::WordRequest_WordRequestType value);
  public:

  // @@protoc_insertion_point(class_scope:hw.trezor.messages.management.WordRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int type_;
  friend struct ::TableStruct_messages_2dmanagement_2eproto;
};
// -------------------------------------------------------------------

class WordAck :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:hw.trezor.messages.management.WordAck) */ {
 public:
  WordAck();
  virtual ~WordAck();

  WordAck(const WordAck& from);
  WordAck(WordAck&& from) noexcept
    : WordAck() {
    *this = ::std::move(from);
  }

  inline WordAck& operator=(const WordAck& from) {
    CopyFrom(from);
    return *this;
  }
  inline WordAck& operator=(WordAck&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const WordAck& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const WordAck* internal_default_instance() {
    return reinterpret_cast<const WordAck*>(
               &_WordAck_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(WordAck& a, WordAck& b) {
    a.Swap(&b);
  }
  inline void Swap(WordAck* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline WordAck* New() const final {
    return CreateMaybeMessage<WordAck>(nullptr);
  }

  WordAck* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<WordAck>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const WordAck& from);
  void MergeFrom(const WordAck& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WordAck* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "hw.trezor.messages.management.WordAck";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_messages_2dmanagement_2eproto);
    return ::descriptor_table_messages_2dmanagement_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWordFieldNumber = 1,
  };
  // required string word = 1;
  bool has_word() const;
  private:
  bool _internal_has_word() const;
  public:
  void clear_word();
  const std::string& word() const;
  void set_word(const std::string& value);
  void set_word(std::string&& value);
  void set_word(const char* value);
  void set_word(const char* value, size_t size);
  std::string* mutable_word();
  std::string* release_word();
  void set_allocated_word(std::string* word);
  private:
  const std::string& _internal_word() const;
  void _internal_set_word(const std::string& value);
  std::string* _internal_mutable_word();
  public:

  // @@protoc_insertion_point(class_scope:hw.trezor.messages.management.WordAck)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr word_;
  friend struct ::TableStruct_messages_2dmanagement_2eproto;
};
// -------------------------------------------------------------------

class SetU2FCounter :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:hw.trezor.messages.management.SetU2FCounter) */ {
 public:
  SetU2FCounter();
  virtual ~SetU2FCounter();

  SetU2FCounter(const SetU2FCounter& from);
  SetU2FCounter(SetU2FCounter&& from) noexcept
    : SetU2FCounter() {
    *this = ::std::move(from);
  }

  inline SetU2FCounter& operator=(const SetU2FCounter& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetU2FCounter& operator=(SetU2FCounter&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SetU2FCounter& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SetU2FCounter* internal_default_instance() {
    return reinterpret_cast<const SetU2FCounter*>(
               &_SetU2FCounter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(SetU2FCounter& a, SetU2FCounter& b) {
    a.Swap(&b);
  }
  inline void Swap(SetU2FCounter* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SetU2FCounter* New() const final {
    return CreateMaybeMessage<SetU2FCounter>(nullptr);
  }

  SetU2FCounter* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SetU2FCounter>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SetU2FCounter& from);
  void MergeFrom(const SetU2FCounter& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetU2FCounter* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "hw.trezor.messages.management.SetU2FCounter";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_messages_2dmanagement_2eproto);
    return ::descriptor_table_messages_2dmanagement_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kU2FCounterFieldNumber = 1,
  };
  // optional uint32 u2f_counter = 1;
  bool has_u2f_counter() const;
  private:
  bool _internal_has_u2f_counter() const;
  public:
  void clear_u2f_counter();
  ::PROTOBUF_NAMESPACE_ID::uint32 u2f_counter() const;
  void set_u2f_counter(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_u2f_counter() const;
  void _internal_set_u2f_counter(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:hw.trezor.messages.management.SetU2FCounter)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 u2f_counter_;
  friend struct ::TableStruct_messages_2dmanagement_2eproto;
};
// -------------------------------------------------------------------

class GetNextU2FCounter :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:hw.trezor.messages.management.GetNextU2FCounter) */ {
 public:
  GetNextU2FCounter();
  virtual ~GetNextU2FCounter();

  GetNextU2FCounter(const GetNextU2FCounter& from);
  GetNextU2FCounter(GetNextU2FCounter&& from) noexcept
    : GetNextU2FCounter() {
    *this = ::std::move(from);
  }

  inline GetNextU2FCounter& operator=(const GetNextU2FCounter& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetNextU2FCounter& operator=(GetNextU2FCounter&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetNextU2FCounter& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetNextU2FCounter* internal_default_instance() {
    return reinterpret_cast<const GetNextU2FCounter*>(
               &_GetNextU2FCounter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(GetNextU2FCounter& a, GetNextU2FCounter& b) {
    a.Swap(&b);
  }
  inline void Swap(GetNextU2FCounter* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetNextU2FCounter* New() const final {
    return CreateMaybeMessage<GetNextU2FCounter>(nullptr);
  }

  GetNextU2FCounter* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetNextU2FCounter>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetNextU2FCounter& from);
  void MergeFrom(const GetNextU2FCounter& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetNextU2FCounter* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "hw.trezor.messages.management.GetNextU2FCounter";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_messages_2dmanagement_2eproto);
    return ::descriptor_table_messages_2dmanagement_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:hw.trezor.messages.management.GetNextU2FCounter)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_messages_2dmanagement_2eproto;
};
// -------------------------------------------------------------------

class NextU2FCounter :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:hw.trezor.messages.management.NextU2FCounter) */ {
 public:
  NextU2FCounter();
  virtual ~NextU2FCounter();

  NextU2FCounter(const NextU2FCounter& from);
  NextU2FCounter(NextU2FCounter&& from) noexcept
    : NextU2FCounter() {
    *this = ::std::move(from);
  }

  inline NextU2FCounter& operator=(const NextU2FCounter& from) {
    CopyFrom(from);
    return *this;
  }
  inline NextU2FCounter& operator=(NextU2FCounter&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const NextU2FCounter& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NextU2FCounter* internal_default_instance() {
    return reinterpret_cast<const NextU2FCounter*>(
               &_NextU2FCounter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(NextU2FCounter& a, NextU2FCounter& b) {
    a.Swap(&b);
  }
  inline void Swap(NextU2FCounter* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline NextU2FCounter* New() const final {
    return CreateMaybeMessage<NextU2FCounter>(nullptr);
  }

  NextU2FCounter* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NextU2FCounter>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const NextU2FCounter& from);
  void MergeFrom(const NextU2FCounter& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NextU2FCounter* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "hw.trezor.messages.management.NextU2FCounter";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_messages_2dmanagement_2eproto);
    return ::descriptor_table_messages_2dmanagement_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kU2FCounterFieldNumber = 1,
  };
  // optional uint32 u2f_counter = 1;
  bool has_u2f_counter() const;
  private:
  bool _internal_has_u2f_counter() const;
  public:
  void clear_u2f_counter();
  ::PROTOBUF_NAMESPACE_ID::uint32 u2f_counter() const;
  void set_u2f_counter(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_u2f_counter() const;
  void _internal_set_u2f_counter(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:hw.trezor.messages.management.NextU2FCounter)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 u2f_counter_;
  friend struct ::TableStruct_messages_2dmanagement_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Initialize

// optional bytes session_id = 1;
inline bool Initialize::_internal_has_session_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Initialize::has_session_id() const {
  return _internal_has_session_id();
}
inline void Initialize::clear_session_id() {
  session_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Initialize::session_id() const {
  // @@protoc_insertion_point(field_get:hw.trezor.messages.management.Initialize.session_id)
  return _internal_session_id();
}
inline void Initialize::set_session_id(const std::string& value) {
  _internal_set_session_id(value);
  // @@protoc_insertion_point(field_set:hw.trezor.messages.management.Initialize.session_id)
}
inline std::string* Initialize::mutable_session_id() {
  // @@protoc_insertion_point(field_mutable:hw.trezor.messages.management.Initialize.session_id)
  return _internal_mutable_session_id();
}
inline const std::string& Initialize::_internal_session_id() const {
  return session_id_.GetNoArena();
}
inline void Initialize::_internal_set_session_id(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  session_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Initialize::set_session_id(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  session_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:hw.trezor.messages.management.Initialize.session_id)
}
inline void Initialize::set_session_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  session_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:hw.trezor.messages.management.Initialize.session_id)
}
inline void Initialize::set_session_id(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  session_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:hw.trezor.messages.management.Initialize.session_id)
}
inline std::string* Initialize::_internal_mutable_session_id() {
  _has_bits_[0] |= 0x00000001u;
  return session_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Initialize::release_session_id() {
  // @@protoc_insertion_point(field_release:hw.trezor.messages.management.Initialize.session_id)
  if (!_internal_has_session_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return session_id_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Initialize::set_allocated_session_id(std::string* session_id) {
  if (session_id != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  session_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), session_id);
  // @@protoc_insertion_point(field_set_allocated:hw.trezor.messages.management.Initialize.session_id)
}

// -------------------------------------------------------------------

// GetFeatures

// -------------------------------------------------------------------

// Features

// optional string vendor = 1;
inline bool Features::_internal_has_vendor() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Features::has_vendor() const {
  return _internal_has_vendor();
}
inline void Features::clear_vendor() {
  vendor_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Features::vendor() const {
  // @@protoc_insertion_point(field_get:hw.trezor.messages.management.Features.vendor)
  return _internal_vendor();
}
inline void Features::set_vendor(const std::string& value) {
  _internal_set_vendor(value);
  // @@protoc_insertion_point(field_set:hw.trezor.messages.management.Features.vendor)
}
inline std::string* Features::mutable_vendor() {
  // @@protoc_insertion_point(field_mutable:hw.trezor.messages.management.Features.vendor)
  return _internal_mutable_vendor();
}
inline const std::string& Features::_internal_vendor() const {
  return vendor_.GetNoArena();
}
inline void Features::_internal_set_vendor(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  vendor_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Features::set_vendor(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  vendor_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:hw.trezor.messages.management.Features.vendor)
}
inline void Features::set_vendor(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  vendor_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:hw.trezor.messages.management.Features.vendor)
}
inline void Features::set_vendor(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  vendor_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:hw.trezor.messages.management.Features.vendor)
}
inline std::string* Features::_internal_mutable_vendor() {
  _has_bits_[0] |= 0x00000001u;
  return vendor_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Features::release_vendor() {
  // @@protoc_insertion_point(field_release:hw.trezor.messages.management.Features.vendor)
  if (!_internal_has_vendor()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return vendor_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Features::set_allocated_vendor(std::string* vendor) {
  if (vendor != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  vendor_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), vendor);
  // @@protoc_insertion_point(field_set_allocated:hw.trezor.messages.management.Features.vendor)
}

// optional uint32 major_version = 2;
inline bool Features::_internal_has_major_version() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool Features::has_major_version() const {
  return _internal_has_major_version();
}
inline void Features::clear_major_version() {
  major_version_ = 0u;
  _has_bits_[0] &= ~0x00000400u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Features::_internal_major_version() const {
  return major_version_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Features::major_version() const {
  // @@protoc_insertion_point(field_get:hw.trezor.messages.management.Features.major_version)
  return _internal_major_version();
}
inline void Features::_internal_set_major_version(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000400u;
  major_version_ = value;
}
inline void Features::set_major_version(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_major_version(value);
  // @@protoc_insertion_point(field_set:hw.trezor.messages.management.Features.major_version)
}

// optional uint32 minor_version = 3;
inline bool Features::_internal_has_minor_version() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool Features::has_minor_version() const {
  return _internal_has_minor_version();
}
inline void Features::clear_minor_version() {
  minor_version_ = 0u;
  _has_bits_[0] &= ~0x00000800u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Features::_internal_minor_version() const {
  return minor_version_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Features::minor_version() const {
  // @@protoc_insertion_point(field_get:hw.trezor.messages.management.Features.minor_version)
  return _internal_minor_version();
}
inline void Features::_internal_set_minor_version(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000800u;
  minor_version_ = value;
}
inline void Features::set_minor_version(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_minor_version(value);
  // @@protoc_insertion_point(field_set:hw.trezor.messages.management.Features.minor_version)
}

// optional uint32 patch_version = 4;
inline bool Features::_internal_has_patch_version() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool Features::has_patch_version() const {
  return _internal_has_patch_version();
}
inline void Features::clear_patch_version() {
  patch_version_ = 0u;
  _has_bits_[0] &= ~0x00001000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Features::_internal_patch_version() const {
  return patch_version_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Features::patch_version() const {
  // @@protoc_insertion_point(field_get:hw.trezor.messages.management.Features.patch_version)
  return _internal_patch_version();
}
inline void Features::_internal_set_patch_version(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00001000u;
  patch_version_ = value;
}
inline void Features::set_patch_version(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_patch_version(value);
  // @@protoc_insertion_point(field_set:hw.trezor.messages.management.Features.patch_version)
}

// optional bool bootloader_mode = 5;
inline bool Features::_internal_has_bootloader_mode() const {
  bool value = (_has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool Features::has_bootloader_mode() const {
  return _internal_has_bootloader_mode();
}
inline void Features::clear_bootloader_mode() {
  bootloader_mode_ = false;
  _has_bits_[0] &= ~0x00002000u;
}
inline bool Features::_internal_bootloader_mode() const {
  return bootloader_mode_;
}
inline bool Features::bootloader_mode() const {
  // @@protoc_insertion_point(field_get:hw.trezor.messages.management.Features.bootloader_mode)
  return _internal_bootloader_mode();
}
inline void Features::_internal_set_bootloader_mode(bool value) {
  _has_bits_[0] |= 0x00002000u;
  bootloader_mode_ = value;
}
inline void Features::set_bootloader_mode(bool value) {
  _internal_set_bootloader_mode(value);
  // @@protoc_insertion_point(field_set:hw.trezor.messages.management.Features.bootloader_mode)
}

// optional string device_id = 6;
inline bool Features::_internal_has_device_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Features::has_device_id() const {
  return _internal_has_device_id();
}
inline void Features::clear_device_id() {
  device_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& Features::device_id() const {
  // @@protoc_insertion_point(field_get:hw.trezor.messages.management.Features.device_id)
  return _internal_device_id();
}
inline void Features::set_device_id(const std::string& value) {
  _internal_set_device_id(value);
  // @@protoc_insertion_point(field_set:hw.trezor.messages.management.Features.device_id)
}
inline std::string* Features::mutable_device_id() {
  // @@protoc_insertion_point(field_mutable:hw.trezor.messages.management.Features.device_id)
  return _internal_mutable_device_id();
}
inline const std::string& Features::_internal_device_id() const {
  return device_id_.GetNoArena();
}
inline void Features::_internal_set_device_id(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  device_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Features::set_device_id(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  device_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:hw.trezor.messages.management.Features.device_id)
}
inline void Features::set_device_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  device_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:hw.trezor.messages.management.Features.device_id)
}
inline void Features::set_device_id(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  device_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:hw.trezor.messages.management.Features.device_id)
}
inline std::string* Features::_internal_mutable_device_id() {
  _has_bits_[0] |= 0x00000002u;
  return device_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Features::release_device_id() {
  // @@protoc_insertion_point(field_release:hw.trezor.messages.management.Features.device_id)
  if (!_internal_has_device_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return device_id_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Features::set_allocated_device_id(std::string* device_id) {
  if (device_id != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  device_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), device_id);
  // @@protoc_insertion_point(field_set_allocated:hw.trezor.messages.management.Features.device_id)
}

// optional bool pin_protection = 7;
inline bool Features::_internal_has_pin_protection() const {
  bool value = (_has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool Features::has_pin_protection() const {
  return _internal_has_pin_protection();
}
inline void Features::clear_pin_protection() {
  pin_protection_ = false;
  _has_bits_[0] &= ~0x00004000u;
}
inline bool Features::_internal_pin_protection() const {
  return pin_protection_;
}
inline bool Features::pin_protection() const {
  // @@protoc_insertion_point(field_get:hw.trezor.messages.management.Features.pin_protection)
  return _internal_pin_protection();
}
inline void Features::_internal_set_pin_protection(bool value) {
  _has_bits_[0] |= 0x00004000u;
  pin_protection_ = value;
}
inline void Features::set_pin_protection(bool value) {
  _internal_set_pin_protection(value);
  // @@protoc_insertion_point(field_set:hw.trezor.messages.management.Features.pin_protection)
}

// optional bool passphrase_protection = 8;
inline bool Features::_internal_has_passphrase_protection() const {
  bool value = (_has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline bool Features::has_passphrase_protection() const {
  return _internal_has_passphrase_protection();
}
inline void Features::clear_passphrase_protection() {
  passphrase_protection_ = false;
  _has_bits_[0] &= ~0x00008000u;
}
inline bool Features::_internal_passphrase_protection() const {
  return passphrase_protection_;
}
inline bool Features::passphrase_protection() const {
  // @@protoc_insertion_point(field_get:hw.trezor.messages.management.Features.passphrase_protection)
  return _internal_passphrase_protection();
}
inline void Features::_internal_set_passphrase_protection(bool value) {
  _has_bits_[0] |= 0x00008000u;
  passphrase_protection_ = value;
}
inline void Features::set_passphrase_protection(bool value) {
  _internal_set_passphrase_protection(value);
  // @@protoc_insertion_point(field_set:hw.trezor.messages.management.Features.passphrase_protection)
}

// optional string language = 9;
inline bool Features::_internal_has_language() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Features::has_language() const {
  return _internal_has_language();
}
inline void Features::clear_language() {
  language_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& Features::language() const {
  // @@protoc_insertion_point(field_get:hw.trezor.messages.management.Features.language)
  return _internal_language();
}
inline void Features::set_language(const std::string& value) {
  _internal_set_language(value);
  // @@protoc_insertion_point(field_set:hw.trezor.messages.management.Features.language)
}
inline std::string* Features::mutable_language() {
  // @@protoc_insertion_point(field_mutable:hw.trezor.messages.management.Features.language)
  return _internal_mutable_language();
}
inline const std::string& Features::_internal_language() const {
  return language_.GetNoArena();
}
inline void Features::_internal_set_language(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  language_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Features::set_language(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  language_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:hw.trezor.messages.management.Features.language)
}
inline void Features::set_language(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  language_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:hw.trezor.messages.management.Features.language)
}
inline void Features::set_language(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000004u;
  language_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:hw.trezor.messages.management.Features.language)
}
inline std::string* Features::_internal_mutable_language() {
  _has_bits_[0] |= 0x00000004u;
  return language_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Features::release_language() {
  // @@protoc_insertion_point(field_release:hw.trezor.messages.management.Features.language)
  if (!_internal_has_language()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return language_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Features::set_allocated_language(std::string* language) {
  if (language != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  language_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), language);
  // @@protoc_insertion_point(field_set_allocated:hw.trezor.messages.management.Features.language)
}

// optional string label = 10;
inline bool Features::_internal_has_label() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Features::has_label() const {
  return _internal_has_label();
}
inline void Features::clear_label() {
  label_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& Features::label() const {
  // @@protoc_insertion_point(field_get:hw.trezor.messages.management.Features.label)
  return _internal_label();
}
inline void Features::set_label(const std::string& value) {
  _internal_set_label(value);
  // @@protoc_insertion_point(field_set:hw.trezor.messages.management.Features.label)
}
inline std::string* Features::mutable_label() {
  // @@protoc_insertion_point(field_mutable:hw.trezor.messages.management.Features.label)
  return _internal_mutable_label();
}
inline const std::string& Features::_internal_label() const {
  return label_.GetNoArena();
}
inline void Features::_internal_set_label(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  label_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Features::set_label(std::string&& value) {
  _has_bits_[0] |= 0x00000008u;
  label_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:hw.trezor.messages.management.Features.label)
}
inline void Features::set_label(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000008u;
  label_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:hw.trezor.messages.management.Features.label)
}
inline void Features::set_label(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000008u;
  label_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:hw.trezor.messages.management.Features.label)
}
inline std::string* Features::_internal_mutable_label() {
  _has_bits_[0] |= 0x00000008u;
  return label_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Features::release_label() {
  // @@protoc_insertion_point(field_release:hw.trezor.messages.management.Features.label)
  if (!_internal_has_label()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  return label_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Features::set_allocated_label(std::string* label) {
  if (label != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  label_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), label);
  // @@protoc_insertion_point(field_set_allocated:hw.trezor.messages.management.Features.label)
}

// optional bool initialized = 12;
inline bool Features::_internal_has_initialized() const {
  bool value = (_has_bits_[0] & 0x00010000u) != 0;
  return value;
}
inline bool Features::has_initialized() const {
  return _internal_has_initialized();
}
inline void Features::clear_initialized() {
  initialized_ = false;
  _has_bits_[0] &= ~0x00010000u;
}
inline bool Features::_internal_initialized() const {
  return initialized_;
}
inline bool Features::initialized() const {
  // @@protoc_insertion_point(field_get:hw.trezor.messages.management.Features.initialized)
  return _internal_initialized();
}
inline void Features::_internal_set_initialized(bool value) {
  _has_bits_[0] |= 0x00010000u;
  initialized_ = value;
}
inline void Features::set_initialized(bool value) {
  _internal_set_initialized(value);
  // @@protoc_insertion_point(field_set:hw.trezor.messages.management.Features.initialized)
}

// optional bytes revision = 13;
inline bool Features::_internal_has_revision() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool Features::has_revision() const {
  return _internal_has_revision();
}
inline void Features::clear_revision() {
  revision_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000010u;
}
inline const std::string& Features::revision() const {
  // @@protoc_insertion_point(field_get:hw.trezor.messages.management.Features.revision)
  return _internal_revision();
}
inline void Features::set_revision(const std::string& value) {
  _internal_set_revision(value);
  // @@protoc_insertion_point(field_set:hw.trezor.messages.management.Features.revision)
}
inline std::string* Features::mutable_revision() {
  // @@protoc_insertion_point(field_mutable:hw.trezor.messages.management.Features.revision)
  return _internal_mutable_revision();
}
inline const std::string& Features::_internal_revision() const {
  return revision_.GetNoArena();
}
inline void Features::_internal_set_revision(const std::string& value) {
  _has_bits_[0] |= 0x00000010u;
  revision_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Features::set_revision(std::string&& value) {
  _has_bits_[0] |= 0x00000010u;
  revision_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:hw.trezor.messages.management.Features.revision)
}
inline void Features::set_revision(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000010u;
  revision_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:hw.trezor.messages.management.Features.revision)
}
inline void Features::set_revision(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000010u;
  revision_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:hw.trezor.messages.management.Features.revision)
}
inline std::string* Features::_internal_mutable_revision() {
  _has_bits_[0] |= 0x00000010u;
  return revision_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Features::release_revision() {
  // @@protoc_insertion_point(field_release:hw.trezor.messages.management.Features.revision)
  if (!_internal_has_revision()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000010u;
  return revision_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Features::set_allocated_revision(std::string* revision) {
  if (revision != nullptr) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  revision_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), revision);
  // @@protoc_insertion_point(field_set_allocated:hw.trezor.messages.management.Features.revision)
}

// optional bytes bootloader_hash = 14;
inline bool Features::_internal_has_bootloader_hash() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool Features::has_bootloader_hash() const {
  return _internal_has_bootloader_hash();
}
inline void Features::clear_bootloader_hash() {
  bootloader_hash_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000020u;
}
inline const std::string& Features::bootloader_hash() const {
  // @@protoc_insertion_point(field_get:hw.trezor.messages.management.Features.bootloader_hash)
  return _internal_bootloader_hash();
}
inline void Features::set_bootloader_hash(const std::string& value) {
  _internal_set_bootloader_hash(value);
  // @@protoc_insertion_point(field_set:hw.trezor.messages.management.Features.bootloader_hash)
}
inline std::string* Features::mutable_bootloader_hash() {
  // @@protoc_insertion_point(field_mutable:hw.trezor.messages.management.Features.bootloader_hash)
  return _internal_mutable_bootloader_hash();
}
inline const std::string& Features::_internal_bootloader_hash() const {
  return bootloader_hash_.GetNoArena();
}
inline void Features::_internal_set_bootloader_hash(const std::string& value) {
  _has_bits_[0] |= 0x00000020u;
  bootloader_hash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Features::set_bootloader_hash(std::string&& value) {
  _has_bits_[0] |= 0x00000020u;
  bootloader_hash_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:hw.trezor.messages.management.Features.bootloader_hash)
}
inline void Features::set_bootloader_hash(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000020u;
  bootloader_hash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:hw.trezor.messages.management.Features.bootloader_hash)
}
inline void Features::set_bootloader_hash(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000020u;
  bootloader_hash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:hw.trezor.messages.management.Features.bootloader_hash)
}
inline std::string* Features::_internal_mutable_bootloader_hash() {
  _has_bits_[0] |= 0x00000020u;
  return bootloader_hash_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Features::release_bootloader_hash() {
  // @@protoc_insertion_point(field_release:hw.trezor.messages.management.Features.bootloader_hash)
  if (!_internal_has_bootloader_hash()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000020u;
  return bootloader_hash_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Features::set_allocated_bootloader_hash(std::string* bootloader_hash) {
  if (bootloader_hash != nullptr) {
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  bootloader_hash_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), bootloader_hash);
  // @@protoc_insertion_point(field_set_allocated:hw.trezor.messages.management.Features.bootloader_hash)
}

// optional bool imported = 15;
inline bool Features::_internal_has_imported() const {
  bool value = (_has_bits_[0] & 0x00020000u) != 0;
  return value;
}
inline bool Features::has_imported() const {
  return _internal_has_imported();
}
inline void Features::clear_imported() {
  imported_ = false;
  _has_bits_[0] &= ~0x00020000u;
}
inline bool Features::_internal_imported() const {
  return imported_;
}
inline bool Features::imported() const {
  // @@protoc_insertion_point(field_get:hw.trezor.messages.management.Features.imported)
  return _internal_imported();
}
inline void Features::_internal_set_imported(bool value) {
  _has_bits_[0] |= 0x00020000u;
  imported_ = value;
}
inline void Features::set_imported(bool value) {
  _internal_set_imported(value);
  // @@protoc_insertion_point(field_set:hw.trezor.messages.management.Features.imported)
}

// optional bool pin_cached = 16;
inline bool Features::_internal_has_pin_cached() const {
  bool value = (_has_bits_[0] & 0x00040000u) != 0;
  return value;
}
inline bool Features::has_pin_cached() const {
  return _internal_has_pin_cached();
}
inline void Features::clear_pin_cached() {
  pin_cached_ = false;
  _has_bits_[0] &= ~0x00040000u;
}
inline bool Features::_internal_pin_cached() const {
  return pin_cached_;
}
inline bool Features::pin_cached() const {
  // @@protoc_insertion_point(field_get:hw.trezor.messages.management.Features.pin_cached)
  return _internal_pin_cached();
}
inline void Features::_internal_set_pin_cached(bool value) {
  _has_bits_[0] |= 0x00040000u;
  pin_cached_ = value;
}
inline void Features::set_pin_cached(bool value) {
  _internal_set_pin_cached(value);
  // @@protoc_insertion_point(field_set:hw.trezor.messages.management.Features.pin_cached)
}

// optional bool firmware_present = 18;
inline bool Features::_internal_has_firmware_present() const {
  bool value = (_has_bits_[0] & 0x00080000u) != 0;
  return value;
}
inline bool Features::has_firmware_present() const {
  return _internal_has_firmware_present();
}
inline void Features::clear_firmware_present() {
  firmware_present_ = false;
  _has_bits_[0] &= ~0x00080000u;
}
inline bool Features::_internal_firmware_present() const {
  return firmware_present_;
}
inline bool Features::firmware_present() const {
  // @@protoc_insertion_point(field_get:hw.trezor.messages.management.Features.firmware_present)
  return _internal_firmware_present();
}
inline void Features::_internal_set_firmware_present(bool value) {
  _has_bits_[0] |= 0x00080000u;
  firmware_present_ = value;
}
inline void Features::set_firmware_present(bool value) {
  _internal_set_firmware_present(value);
  // @@protoc_insertion_point(field_set:hw.trezor.messages.management.Features.firmware_present)
}

// optional bool needs_backup = 19;
inline bool Features::_internal_has_needs_backup() const {
  bool value = (_has_bits_[0] & 0x00100000u) != 0;
  return value;
}
inline bool Features::has_needs_backup() const {
  return _internal_has_needs_backup();
}
inline void Features::clear_needs_backup() {
  needs_backup_ = false;
  _has_bits_[0] &= ~0x00100000u;
}
inline bool Features::_internal_needs_backup() const {
  return needs_backup_;
}
inline bool Features::needs_backup() const {
  // @@protoc_insertion_point(field_get:hw.trezor.messages.management.Features.needs_backup)
  return _internal_needs_backup();
}
inline void Features::_internal_set_needs_backup(bool value) {
  _has_bits_[0] |= 0x00100000u;
  needs_backup_ = value;
}
inline void Features::set_needs_backup(bool value) {
  _internal_set_needs_backup(value);
  // @@protoc_insertion_point(field_set:hw.trezor.messages.management.Features.needs_backup)
}

// optional uint32 flags = 20;
inline bool Features::_internal_has_flags() const {
  bool value = (_has_bits_[0] & 0x00200000u) != 0;
  return value;
}
inline bool Features::has_flags() const {
  return _internal_has_flags();
}
inline void Features::clear_flags() {
  flags_ = 0u;
  _has_bits_[0] &= ~0x00200000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Features::_internal_flags() const {
  return flags_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Features::flags() const {
  // @@protoc_insertion_point(field_get:hw.trezor.messages.management.Features.flags)
  return _internal_flags();
}
inline void Features::_internal_set_flags(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00200000u;
  flags_ = value;
}
inline void Features::set_flags(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_flags(value);
  // @@protoc_insertion_point(field_set:hw.trezor.messages.management.Features.flags)
}

// optional string model = 21;
inline bool Features::_internal_has_model() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool Features::has_model() const {
  return _internal_has_model();
}
inline void Features::clear_model() {
  model_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000040u;
}
inline const std::string& Features::model() const {
  // @@protoc_insertion_point(field_get:hw.trezor.messages.management.Features.model)
  return _internal_model();
}
inline void Features::set_model(const std::string& value) {
  _internal_set_model(value);
  // @@protoc_insertion_point(field_set:hw.trezor.messages.management.Features.model)
}
inline std::string* Features::mutable_model() {
  // @@protoc_insertion_point(field_mutable:hw.trezor.messages.management.Features.model)
  return _internal_mutable_model();
}
inline const std::string& Features::_internal_model() const {
  return model_.GetNoArena();
}
inline void Features::_internal_set_model(const std::string& value) {
  _has_bits_[0] |= 0x00000040u;
  model_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Features::set_model(std::string&& value) {
  _has_bits_[0] |= 0x00000040u;
  model_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:hw.trezor.messages.management.Features.model)
}
inline void Features::set_model(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000040u;
  model_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:hw.trezor.messages.management.Features.model)
}
inline void Features::set_model(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000040u;
  model_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:hw.trezor.messages.management.Features.model)
}
inline std::string* Features::_internal_mutable_model() {
  _has_bits_[0] |= 0x00000040u;
  return model_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Features::release_model() {
  // @@protoc_insertion_point(field_release:hw.trezor.messages.management.Features.model)
  if (!_internal_has_model()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000040u;
  return model_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Features::set_allocated_model(std::string* model) {
  if (model != nullptr) {
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  model_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), model);
  // @@protoc_insertion_point(field_set_allocated:hw.trezor.messages.management.Features.model)
}

// optional uint32 fw_major = 22;
inline bool Features::_internal_has_fw_major() const {
  bool value = (_has_bits_[0] & 0x00400000u) != 0;
  return value;
}
inline bool Features::has_fw_major() const {
  return _internal_has_fw_major();
}
inline void Features::clear_fw_major() {
  fw_major_ = 0u;
  _has_bits_[0] &= ~0x00400000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Features::_internal_fw_major() const {
  return fw_major_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Features::fw_major() const {
  // @@protoc_insertion_point(field_get:hw.trezor.messages.management.Features.fw_major)
  return _internal_fw_major();
}
inline void Features::_internal_set_fw_major(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00400000u;
  fw_major_ = value;
}
inline void Features::set_fw_major(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_fw_major(value);
  // @@protoc_insertion_point(field_set:hw.trezor.messages.management.Features.fw_major)
}

// optional uint32 fw_minor = 23;
inline bool Features::_internal_has_fw_minor() const {
  bool value = (_has_bits_[0] & 0x00800000u) != 0;
  return value;
}
inline bool Features::has_fw_minor() const {
  return _internal_has_fw_minor();
}
inline void Features::clear_fw_minor() {
  fw_minor_ = 0u;
  _has_bits_[0] &= ~0x00800000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Features::_internal_fw_minor() const {
  return fw_minor_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Features::fw_minor() const {
  // @@protoc_insertion_point(field_get:hw.trezor.messages.management.Features.fw_minor)
  return _internal_fw_minor();
}
inline void Features::_internal_set_fw_minor(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00800000u;
  fw_minor_ = value;
}
inline void Features::set_fw_minor(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_fw_minor(value);
  // @@protoc_insertion_point(field_set:hw.trezor.messages.management.Features.fw_minor)
}

// optional uint32 fw_patch = 24;
inline bool Features::_internal_has_fw_patch() const {
  bool value = (_has_bits_[0] & 0x01000000u) != 0;
  return value;
}
inline bool Features::has_fw_patch() const {
  return _internal_has_fw_patch();
}
inline void Features::clear_fw_patch() {
  fw_patch_ = 0u;
  _has_bits_[0] &= ~0x01000000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Features::_internal_fw_patch() const {
  return fw_patch_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Features::fw_patch() const {
  // @@protoc_insertion_point(field_get:hw.trezor.messages.management.Features.fw_patch)
  return _internal_fw_patch();
}
inline void Features::_internal_set_fw_patch(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x01000000u;
  fw_patch_ = value;
}
inline void Features::set_fw_patch(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_fw_patch(value);
  // @@protoc_insertion_point(field_set:hw.trezor.messages.management.Features.fw_patch)
}

// optional string fw_vendor = 25;
inline bool Features::_internal_has_fw_vendor() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool Features::has_fw_vendor() const {
  return _internal_has_fw_vendor();
}
inline void Features::clear_fw_vendor() {
  fw_vendor_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000080u;
}
inline const std::string& Features::fw_vendor() const {
  // @@protoc_insertion_point(field_get:hw.trezor.messages.management.Features.fw_vendor)
  return _internal_fw_vendor();
}
inline void Features::set_fw_vendor(const std::string& value) {
  _internal_set_fw_vendor(value);
  // @@protoc_insertion_point(field_set:hw.trezor.messages.management.Features.fw_vendor)
}
inline std::string* Features::mutable_fw_vendor() {
  // @@protoc_insertion_point(field_mutable:hw.trezor.messages.management.Features.fw_vendor)
  return _internal_mutable_fw_vendor();
}
inline const std::string& Features::_internal_fw_vendor() const {
  return fw_vendor_.GetNoArena();
}
inline void Features::_internal_set_fw_vendor(const std::string& value) {
  _has_bits_[0] |= 0x00000080u;
  fw_vendor_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Features::set_fw_vendor(std::string&& value) {
  _has_bits_[0] |= 0x00000080u;
  fw_vendor_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:hw.trezor.messages.management.Features.fw_vendor)
}
inline void Features::set_fw_vendor(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000080u;
  fw_vendor_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:hw.trezor.messages.management.Features.fw_vendor)
}
inline void Features::set_fw_vendor(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000080u;
  fw_vendor_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:hw.trezor.messages.management.Features.fw_vendor)
}
inline std::string* Features::_internal_mutable_fw_vendor() {
  _has_bits_[0] |= 0x00000080u;
  return fw_vendor_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Features::release_fw_vendor() {
  // @@protoc_insertion_point(field_release:hw.trezor.messages.management.Features.fw_vendor)
  if (!_internal_has_fw_vendor()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000080u;
  return fw_vendor_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Features::set_allocated_fw_vendor(std::string* fw_vendor) {
  if (fw_vendor != nullptr) {
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  fw_vendor_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), fw_vendor);
  // @@protoc_insertion_point(field_set_allocated:hw.trezor.messages.management.Features.fw_vendor)
}

// optional bytes fw_vendor_keys = 26;
inline bool Features::_internal_has_fw_vendor_keys() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool Features::has_fw_vendor_keys() const {
  return _internal_has_fw_vendor_keys();
}
inline void Features::clear_fw_vendor_keys() {
  fw_vendor_keys_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000100u;
}
inline const std::string& Features::fw_vendor_keys() const {
  // @@protoc_insertion_point(field_get:hw.trezor.messages.management.Features.fw_vendor_keys)
  return _internal_fw_vendor_keys();
}
inline void Features::set_fw_vendor_keys(const std::string& value) {
  _internal_set_fw_vendor_keys(value);
  // @@protoc_insertion_point(field_set:hw.trezor.messages.management.Features.fw_vendor_keys)
}
inline std::string* Features::mutable_fw_vendor_keys() {
  // @@protoc_insertion_point(field_mutable:hw.trezor.messages.management.Features.fw_vendor_keys)
  return _internal_mutable_fw_vendor_keys();
}
inline const std::string& Features::_internal_fw_vendor_keys() const {
  return fw_vendor_keys_.GetNoArena();
}
inline void Features::_internal_set_fw_vendor_keys(const std::string& value) {
  _has_bits_[0] |= 0x00000100u;
  fw_vendor_keys_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Features::set_fw_vendor_keys(std::string&& value) {
  _has_bits_[0] |= 0x00000100u;
  fw_vendor_keys_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:hw.trezor.messages.management.Features.fw_vendor_keys)
}
inline void Features::set_fw_vendor_keys(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000100u;
  fw_vendor_keys_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:hw.trezor.messages.management.Features.fw_vendor_keys)
}
inline void Features::set_fw_vendor_keys(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000100u;
  fw_vendor_keys_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:hw.trezor.messages.management.Features.fw_vendor_keys)
}
inline std::string* Features::_internal_mutable_fw_vendor_keys() {
  _has_bits_[0] |= 0x00000100u;
  return fw_vendor_keys_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Features::release_fw_vendor_keys() {
  // @@protoc_insertion_point(field_release:hw.trezor.messages.management.Features.fw_vendor_keys)
  if (!_internal_has_fw_vendor_keys()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000100u;
  return fw_vendor_keys_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Features::set_allocated_fw_vendor_keys(std::string* fw_vendor_keys) {
  if (fw_vendor_keys != nullptr) {
    _has_bits_[0] |= 0x00000100u;
  } else {
    _has_bits_[0] &= ~0x00000100u;
  }
  fw_vendor_keys_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), fw_vendor_keys);
  // @@protoc_insertion_point(field_set_allocated:hw.trezor.messages.management.Features.fw_vendor_keys)
}

// optional bool unfinished_backup = 27;
inline bool Features::_internal_has_unfinished_backup() const {
  bool value = (_has_bits_[0] & 0x02000000u) != 0;
  return value;
}
inline bool Features::has_unfinished_backup() const {
  return _internal_has_unfinished_backup();
}
inline void Features::clear_unfinished_backup() {
  unfinished_backup_ = false;
  _has_bits_[0] &= ~0x02000000u;
}
inline bool Features::_internal_unfinished_backup() const {
  return unfinished_backup_;
}
inline bool Features::unfinished_backup() const {
  // @@protoc_insertion_point(field_get:hw.trezor.messages.management.Features.unfinished_backup)
  return _internal_unfinished_backup();
}
inline void Features::_internal_set_unfinished_backup(bool value) {
  _has_bits_[0] |= 0x02000000u;
  unfinished_backup_ = value;
}
inline void Features::set_unfinished_backup(bool value) {
  _internal_set_unfinished_backup(value);
  // @@protoc_insertion_point(field_set:hw.trezor.messages.management.Features.unfinished_backup)
}

// optional bool no_backup = 28;
inline bool Features::_internal_has_no_backup() const {
  bool value = (_has_bits_[0] & 0x04000000u) != 0;
  return value;
}
inline bool Features::has_no_backup() const {
  return _internal_has_no_backup();
}
inline void Features::clear_no_backup() {
  no_backup_ = false;
  _has_bits_[0] &= ~0x04000000u;
}
inline bool Features::_internal_no_backup() const {
  return no_backup_;
}
inline bool Features::no_backup() const {
  // @@protoc_insertion_point(field_get:hw.trezor.messages.management.Features.no_backup)
  return _internal_no_backup();
}
inline void Features::_internal_set_no_backup(bool value) {
  _has_bits_[0] |= 0x04000000u;
  no_backup_ = value;
}
inline void Features::set_no_backup(bool value) {
  _internal_set_no_backup(value);
  // @@protoc_insertion_point(field_set:hw.trezor.messages.management.Features.no_backup)
}

// optional bool recovery_mode = 29;
inline bool Features::_internal_has_recovery_mode() const {
  bool value = (_has_bits_[0] & 0x08000000u) != 0;
  return value;
}
inline bool Features::has_recovery_mode() const {
  return _internal_has_recovery_mode();
}
inline void Features::clear_recovery_mode() {
  recovery_mode_ = false;
  _has_bits_[0] &= ~0x08000000u;
}
inline bool Features::_internal_recovery_mode() const {
  return recovery_mode_;
}
inline bool Features::recovery_mode() const {
  // @@protoc_insertion_point(field_get:hw.trezor.messages.management.Features.recovery_mode)
  return _internal_recovery_mode();
}
inline void Features::_internal_set_recovery_mode(bool value) {
  _has_bits_[0] |= 0x08000000u;
  recovery_mode_ = value;
}
inline void Features::set_recovery_mode(bool value) {
  _internal_set_recovery_mode(value);
  // @@protoc_insertion_point(field_set:hw.trezor.messages.management.Features.recovery_mode)
}

// repeated .hw.trezor.messages.management.Features.Capability capabilities = 30;
inline int Features::_internal_capabilities_size() const {
  return capabilities_.size();
}
inline int Features::capabilities_size() const {
  return _internal_capabilities_size();
}
inline void Features::clear_capabilities() {
  capabilities_.Clear();
}
inline ::hw::trezor::messages::management::Features_Capability Features::_internal_capabilities(int index) const {
  return static_cast< ::hw::trezor::messages::management::Features_Capability >(capabilities_.Get(index));
}
inline ::hw::trezor::messages::management::Features_Capability Features::capabilities(int index) const {
  // @@protoc_insertion_point(field_get:hw.trezor.messages.management.Features.capabilities)
  return _internal_capabilities(index);
}
inline void Features::set_capabilities(int index, ::hw::trezor::messages::management::Features_Capability value) {
  assert(::hw::trezor::messages::management::Features_Capability_IsValid(value));
  capabilities_.Set(index, value);
  // @@protoc_insertion_point(field_set:hw.trezor.messages.management.Features.capabilities)
}
inline void Features::_internal_add_capabilities(::hw::trezor::messages::management::Features_Capability value) {
  assert(::hw::trezor::messages::management::Features_Capability_IsValid(value));
  capabilities_.Add(value);
}
inline void Features::add_capabilities(::hw::trezor::messages::management::Features_Capability value) {
  // @@protoc_insertion_point(field_add:hw.trezor.messages.management.Features.capabilities)
  _internal_add_capabilities(value);
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>&
Features::capabilities() const {
  // @@protoc_insertion_point(field_list:hw.trezor.messages.management.Features.capabilities)
  return capabilities_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
Features::_internal_mutable_capabilities() {
  return &capabilities_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
Features::mutable_capabilities() {
  // @@protoc_insertion_point(field_mutable_list:hw.trezor.messages.management.Features.capabilities)
  return _internal_mutable_capabilities();
}

// optional .hw.trezor.messages.management.BackupType backup_type = 31;
inline bool Features::_internal_has_backup_type() const {
  bool value = (_has_bits_[0] & 0x20000000u) != 0;
  return value;
}
inline bool Features::has_backup_type() const {
  return _internal_has_backup_type();
}
inline void Features::clear_backup_type() {
  backup_type_ = 0;
  _has_bits_[0] &= ~0x20000000u;
}
inline ::hw::trezor::messages::management::BackupType Features::_internal_backup_type() const {
  return static_cast< ::hw::trezor::messages::management::BackupType >(backup_type_);
}
inline ::hw::trezor::messages::management::BackupType Features::backup_type() const {
  // @@protoc_insertion_point(field_get:hw.trezor.messages.management.Features.backup_type)
  return _internal_backup_type();
}
inline void Features::_internal_set_backup_type(::hw::trezor::messages::management::BackupType value) {
  assert(::hw::trezor::messages::management::BackupType_IsValid(value));
  _has_bits_[0] |= 0x20000000u;
  backup_type_ = value;
}
inline void Features::set_backup_type(::hw::trezor::messages::management::BackupType value) {
  _internal_set_backup_type(value);
  // @@protoc_insertion_point(field_set:hw.trezor.messages.management.Features.backup_type)
}

// optional bool sd_card_present = 32;
inline bool Features::_internal_has_sd_card_present() const {
  bool value = (_has_bits_[0] & 0x10000000u) != 0;
  return value;
}
inline bool Features::has_sd_card_present() const {
  return _internal_has_sd_card_present();
}
inline void Features::clear_sd_card_present() {
  sd_card_present_ = false;
  _has_bits_[0] &= ~0x10000000u;
}
inline bool Features::_internal_sd_card_present() const {
  return sd_card_present_;
}
inline bool Features::sd_card_present() const {
  // @@protoc_insertion_point(field_get:hw.trezor.messages.management.Features.sd_card_present)
  return _internal_sd_card_present();
}
inline void Features::_internal_set_sd_card_present(bool value) {
  _has_bits_[0] |= 0x10000000u;
  sd_card_present_ = value;
}
inline void Features::set_sd_card_present(bool value) {
  _internal_set_sd_card_present(value);
  // @@protoc_insertion_point(field_set:hw.trezor.messages.management.Features.sd_card_present)
}

// optional bool sd_protection = 33;
inline bool Features::_internal_has_sd_protection() const {
  bool value = (_has_bits_[0] & 0x40000000u) != 0;
  return value;
}
inline bool Features::has_sd_protection() const {
  return _internal_has_sd_protection();
}
inline void Features::clear_sd_protection() {
  sd_protection_ = false;
  _has_bits_[0] &= ~0x40000000u;
}
inline bool Features::_internal_sd_protection() const {
  return sd_protection_;
}
inline bool Features::sd_protection() const {
  // @@protoc_insertion_point(field_get:hw.trezor.messages.management.Features.sd_protection)
  return _internal_sd_protection();
}
inline void Features::_internal_set_sd_protection(bool value) {
  _has_bits_[0] |= 0x40000000u;
  sd_protection_ = value;
}
inline void Features::set_sd_protection(bool value) {
  _internal_set_sd_protection(value);
  // @@protoc_insertion_point(field_set:hw.trezor.messages.management.Features.sd_protection)
}

// optional bool wipe_code_protection = 34;
inline bool Features::_internal_has_wipe_code_protection() const {
  bool value = (_has_bits_[0] & 0x80000000u) != 0;
  return value;
}
inline bool Features::has_wipe_code_protection() const {
  return _internal_has_wipe_code_protection();
}
inline void Features::clear_wipe_code_protection() {
  wipe_code_protection_ = false;
  _has_bits_[0] &= ~0x80000000u;
}
inline bool Features::_internal_wipe_code_protection() const {
  return wipe_code_protection_;
}
inline bool Features::wipe_code_protection() const {
  // @@protoc_insertion_point(field_get:hw.trezor.messages.management.Features.wipe_code_protection)
  return _internal_wipe_code_protection();
}
inline void Features::_internal_set_wipe_code_protection(bool value) {
  _has_bits_[0] |= 0x80000000u;
  wipe_code_protection_ = value;
}
inline void Features::set_wipe_code_protection(bool value) {
  _internal_set_wipe_code_protection(value);
  // @@protoc_insertion_point(field_set:hw.trezor.messages.management.Features.wipe_code_protection)
}

// optional bytes session_id = 35;
inline bool Features::_internal_has_session_id() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool Features::has_session_id() const {
  return _internal_has_session_id();
}
inline void Features::clear_session_id() {
  session_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000200u;
}
inline const std::string& Features::session_id() const {
  // @@protoc_insertion_point(field_get:hw.trezor.messages.management.Features.session_id)
  return _internal_session_id();
}
inline void Features::set_session_id(const std::string& value) {
  _internal_set_session_id(value);
  // @@protoc_insertion_point(field_set:hw.trezor.messages.management.Features.session_id)
}
inline std::string* Features::mutable_session_id() {
  // @@protoc_insertion_point(field_mutable:hw.trezor.messages.management.Features.session_id)
  return _internal_mutable_session_id();
}
inline const std::string& Features::_internal_session_id() const {
  return session_id_.GetNoArena();
}
inline void Features::_internal_set_session_id(const std::string& value) {
  _has_bits_[0] |= 0x00000200u;
  session_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Features::set_session_id(std::string&& value) {
  _has_bits_[0] |= 0x00000200u;
  session_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:hw.trezor.messages.management.Features.session_id)
}
inline void Features::set_session_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000200u;
  session_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:hw.trezor.messages.management.Features.session_id)
}
inline void Features::set_session_id(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000200u;
  session_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:hw.trezor.messages.management.Features.session_id)
}
inline std::string* Features::_internal_mutable_session_id() {
  _has_bits_[0] |= 0x00000200u;
  return session_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Features::release_session_id() {
  // @@protoc_insertion_point(field_release:hw.trezor.messages.management.Features.session_id)
  if (!_internal_has_session_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000200u;
  return session_id_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Features::set_allocated_session_id(std::string* session_id) {
  if (session_id != nullptr) {
    _has_bits_[0] |= 0x00000200u;
  } else {
    _has_bits_[0] &= ~0x00000200u;
  }
  session_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), session_id);
  // @@protoc_insertion_point(field_set_allocated:hw.trezor.messages.management.Features.session_id)
}

// optional bool passphrase_always_on_device = 36;
inline bool Features::_internal_has_passphrase_always_on_device() const {
  bool value = (_has_bits_[1] & 0x00000001u) != 0;
  return value;
}
inline bool Features::has_passphrase_always_on_device() const {
  return _internal_has_passphrase_always_on_device();
}
inline void Features::clear_passphrase_always_on_device() {
  passphrase_always_on_device_ = false;
  _has_bits_[1] &= ~0x00000001u;
}
inline bool Features::_internal_passphrase_always_on_device() const {
  return passphrase_always_on_device_;
}
inline bool Features::passphrase_always_on_device() const {
  // @@protoc_insertion_point(field_get:hw.trezor.messages.management.Features.passphrase_always_on_device)
  return _internal_passphrase_always_on_device();
}
inline void Features::_internal_set_passphrase_always_on_device(bool value) {
  _has_bits_[1] |= 0x00000001u;
  passphrase_always_on_device_ = value;
}
inline void Features::set_passphrase_always_on_device(bool value) {
  _internal_set_passphrase_always_on_device(value);
  // @@protoc_insertion_point(field_set:hw.trezor.messages.management.Features.passphrase_always_on_device)
}

// -------------------------------------------------------------------

// ClearSession

// -------------------------------------------------------------------

// ApplySettings

// optional string language = 1;
inline bool ApplySettings::_internal_has_language() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ApplySettings::has_language() const {
  return _internal_has_language();
}
inline void ApplySettings::clear_language() {
  language_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ApplySettings::language() const {
  // @@protoc_insertion_point(field_get:hw.trezor.messages.management.ApplySettings.language)
  return _internal_language();
}
inline void ApplySettings::set_language(const std::string& value) {
  _internal_set_language(value);
  // @@protoc_insertion_point(field_set:hw.trezor.messages.management.ApplySettings.language)
}
inline std::string* ApplySettings::mutable_language() {
  // @@protoc_insertion_point(field_mutable:hw.trezor.messages.management.ApplySettings.language)
  return _internal_mutable_language();
}
inline const std::string& ApplySettings::_internal_language() const {
  return language_.GetNoArena();
}
inline void ApplySettings::_internal_set_language(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  language_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ApplySettings::set_language(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  language_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:hw.trezor.messages.management.ApplySettings.language)
}
inline void ApplySettings::set_language(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  language_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:hw.trezor.messages.management.ApplySettings.language)
}
inline void ApplySettings::set_language(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  language_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:hw.trezor.messages.management.ApplySettings.language)
}
inline std::string* ApplySettings::_internal_mutable_language() {
  _has_bits_[0] |= 0x00000001u;
  return language_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ApplySettings::release_language() {
  // @@protoc_insertion_point(field_release:hw.trezor.messages.management.ApplySettings.language)
  if (!_internal_has_language()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return language_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ApplySettings::set_allocated_language(std::string* language) {
  if (language != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  language_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), language);
  // @@protoc_insertion_point(field_set_allocated:hw.trezor.messages.management.ApplySettings.language)
}

// optional string label = 2;
inline bool ApplySettings::_internal_has_label() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ApplySettings::has_label() const {
  return _internal_has_label();
}
inline void ApplySettings::clear_label() {
  label_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& ApplySettings::label() const {
  // @@protoc_insertion_point(field_get:hw.trezor.messages.management.ApplySettings.label)
  return _internal_label();
}
inline void ApplySettings::set_label(const std::string& value) {
  _internal_set_label(value);
  // @@protoc_insertion_point(field_set:hw.trezor.messages.management.ApplySettings.label)
}
inline std::string* ApplySettings::mutable_label() {
  // @@protoc_insertion_point(field_mutable:hw.trezor.messages.management.ApplySettings.label)
  return _internal_mutable_label();
}
inline const std::string& ApplySettings::_internal_label() const {
  return label_.GetNoArena();
}
inline void ApplySettings::_internal_set_label(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  label_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ApplySettings::set_label(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  label_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:hw.trezor.messages.management.ApplySettings.label)
}
inline void ApplySettings::set_label(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  label_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:hw.trezor.messages.management.ApplySettings.label)
}
inline void ApplySettings::set_label(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  label_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:hw.trezor.messages.management.ApplySettings.label)
}
inline std::string* ApplySettings::_internal_mutable_label() {
  _has_bits_[0] |= 0x00000002u;
  return label_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ApplySettings::release_label() {
  // @@protoc_insertion_point(field_release:hw.trezor.messages.management.ApplySettings.label)
  if (!_internal_has_label()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return label_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ApplySettings::set_allocated_label(std::string* label) {
  if (label != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  label_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), label);
  // @@protoc_insertion_point(field_set_allocated:hw.trezor.messages.management.ApplySettings.label)
}

// optional bool use_passphrase = 3;
inline bool ApplySettings::_internal_has_use_passphrase() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool ApplySettings::has_use_passphrase() const {
  return _internal_has_use_passphrase();
}
inline void ApplySettings::clear_use_passphrase() {
  use_passphrase_ = false;
  _has_bits_[0] &= ~0x00000008u;
}
inline bool ApplySettings::_internal_use_passphrase() const {
  return use_passphrase_;
}
inline bool ApplySettings::use_passphrase() const {
  // @@protoc_insertion_point(field_get:hw.trezor.messages.management.ApplySettings.use_passphrase)
  return _internal_use_passphrase();
}
inline void ApplySettings::_internal_set_use_passphrase(bool value) {
  _has_bits_[0] |= 0x00000008u;
  use_passphrase_ = value;
}
inline void ApplySettings::set_use_passphrase(bool value) {
  _internal_set_use_passphrase(value);
  // @@protoc_insertion_point(field_set:hw.trezor.messages.management.ApplySettings.use_passphrase)
}

// optional bytes homescreen = 4;
inline bool ApplySettings::_internal_has_homescreen() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ApplySettings::has_homescreen() const {
  return _internal_has_homescreen();
}
inline void ApplySettings::clear_homescreen() {
  homescreen_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& ApplySettings::homescreen() const {
  // @@protoc_insertion_point(field_get:hw.trezor.messages.management.ApplySettings.homescreen)
  return _internal_homescreen();
}
inline void ApplySettings::set_homescreen(const std::string& value) {
  _internal_set_homescreen(value);
  // @@protoc_insertion_point(field_set:hw.trezor.messages.management.ApplySettings.homescreen)
}
inline std::string* ApplySettings::mutable_homescreen() {
  // @@protoc_insertion_point(field_mutable:hw.trezor.messages.management.ApplySettings.homescreen)
  return _internal_mutable_homescreen();
}
inline const std::string& ApplySettings::_internal_homescreen() const {
  return homescreen_.GetNoArena();
}
inline void ApplySettings::_internal_set_homescreen(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  homescreen_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ApplySettings::set_homescreen(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  homescreen_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:hw.trezor.messages.management.ApplySettings.homescreen)
}
inline void ApplySettings::set_homescreen(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  homescreen_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:hw.trezor.messages.management.ApplySettings.homescreen)
}
inline void ApplySettings::set_homescreen(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000004u;
  homescreen_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:hw.trezor.messages.management.ApplySettings.homescreen)
}
inline std::string* ApplySettings::_internal_mutable_homescreen() {
  _has_bits_[0] |= 0x00000004u;
  return homescreen_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ApplySettings::release_homescreen() {
  // @@protoc_insertion_point(field_release:hw.trezor.messages.management.ApplySettings.homescreen)
  if (!_internal_has_homescreen()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return homescreen_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ApplySettings::set_allocated_homescreen(std::string* homescreen) {
  if (homescreen != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  homescreen_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), homescreen);
  // @@protoc_insertion_point(field_set_allocated:hw.trezor.messages.management.ApplySettings.homescreen)
}

// optional uint32 auto_lock_delay_ms = 6;
inline bool ApplySettings::_internal_has_auto_lock_delay_ms() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool ApplySettings::has_auto_lock_delay_ms() const {
  return _internal_has_auto_lock_delay_ms();
}
inline void ApplySettings::clear_auto_lock_delay_ms() {
  auto_lock_delay_ms_ = 0u;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ApplySettings::_internal_auto_lock_delay_ms() const {
  return auto_lock_delay_ms_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ApplySettings::auto_lock_delay_ms() const {
  // @@protoc_insertion_point(field_get:hw.trezor.messages.management.ApplySettings.auto_lock_delay_ms)
  return _internal_auto_lock_delay_ms();
}
inline void ApplySettings::_internal_set_auto_lock_delay_ms(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000020u;
  auto_lock_delay_ms_ = value;
}
inline void ApplySettings::set_auto_lock_delay_ms(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_auto_lock_delay_ms(value);
  // @@protoc_insertion_point(field_set:hw.trezor.messages.management.ApplySettings.auto_lock_delay_ms)
}

// optional uint32 display_rotation = 7;
inline bool ApplySettings::_internal_has_display_rotation() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool ApplySettings::has_display_rotation() const {
  return _internal_has_display_rotation();
}
inline void ApplySettings::clear_display_rotation() {
  display_rotation_ = 0u;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ApplySettings::_internal_display_rotation() const {
  return display_rotation_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ApplySettings::display_rotation() const {
  // @@protoc_insertion_point(field_get:hw.trezor.messages.management.ApplySettings.display_rotation)
  return _internal_display_rotation();
}
inline void ApplySettings::_internal_set_display_rotation(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000040u;
  display_rotation_ = value;
}
inline void ApplySettings::set_display_rotation(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_display_rotation(value);
  // @@protoc_insertion_point(field_set:hw.trezor.messages.management.ApplySettings.display_rotation)
}

// optional bool passphrase_always_on_device = 8;
inline bool ApplySettings::_internal_has_passphrase_always_on_device() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool ApplySettings::has_passphrase_always_on_device() const {
  return _internal_has_passphrase_always_on_device();
}
inline void ApplySettings::clear_passphrase_always_on_device() {
  passphrase_always_on_device_ = false;
  _has_bits_[0] &= ~0x00000010u;
}
inline bool ApplySettings::_internal_passphrase_always_on_device() const {
  return passphrase_always_on_device_;
}
inline bool ApplySettings::passphrase_always_on_device() const {
  // @@protoc_insertion_point(field_get:hw.trezor.messages.management.ApplySettings.passphrase_always_on_device)
  return _internal_passphrase_always_on_device();
}
inline void ApplySettings::_internal_set_passphrase_always_on_device(bool value) {
  _has_bits_[0] |= 0x00000010u;
  passphrase_always_on_device_ = value;
}
inline void ApplySettings::set_passphrase_always_on_device(bool value) {
  _internal_set_passphrase_always_on_device(value);
  // @@protoc_insertion_point(field_set:hw.trezor.messages.management.ApplySettings.passphrase_always_on_device)
}

// -------------------------------------------------------------------

// ApplyFlags

// optional uint32 flags = 1;
inline bool ApplyFlags::_internal_has_flags() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ApplyFlags::has_flags() const {
  return _internal_has_flags();
}
inline void ApplyFlags::clear_flags() {
  flags_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ApplyFlags::_internal_flags() const {
  return flags_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ApplyFlags::flags() const {
  // @@protoc_insertion_point(field_get:hw.trezor.messages.management.ApplyFlags.flags)
  return _internal_flags();
}
inline void ApplyFlags::_internal_set_flags(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  flags_ = value;
}
inline void ApplyFlags::set_flags(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_flags(value);
  // @@protoc_insertion_point(field_set:hw.trezor.messages.management.ApplyFlags.flags)
}

// -------------------------------------------------------------------

// ChangePin

// optional bool remove = 1;
inline bool ChangePin::_internal_has_remove() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ChangePin::has_remove() const {
  return _internal_has_remove();
}
inline void ChangePin::clear_remove() {
  remove_ = false;
  _has_bits_[0] &= ~0x00000001u;
}
inline bool ChangePin::_internal_remove() const {
  return remove_;
}
inline bool ChangePin::remove() const {
  // @@protoc_insertion_point(field_get:hw.trezor.messages.management.ChangePin.remove)
  return _internal_remove();
}
inline void ChangePin::_internal_set_remove(bool value) {
  _has_bits_[0] |= 0x00000001u;
  remove_ = value;
}
inline void ChangePin::set_remove(bool value) {
  _internal_set_remove(value);
  // @@protoc_insertion_point(field_set:hw.trezor.messages.management.ChangePin.remove)
}

// -------------------------------------------------------------------

// ChangeWipeCode

// optional bool remove = 1;
inline bool ChangeWipeCode::_internal_has_remove() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ChangeWipeCode::has_remove() const {
  return _internal_has_remove();
}
inline void ChangeWipeCode::clear_remove() {
  remove_ = false;
  _has_bits_[0] &= ~0x00000001u;
}
inline bool ChangeWipeCode::_internal_remove() const {
  return remove_;
}
inline bool ChangeWipeCode::remove() const {
  // @@protoc_insertion_point(field_get:hw.trezor.messages.management.ChangeWipeCode.remove)
  return _internal_remove();
}
inline void ChangeWipeCode::_internal_set_remove(bool value) {
  _has_bits_[0] |= 0x00000001u;
  remove_ = value;
}
inline void ChangeWipeCode::set_remove(bool value) {
  _internal_set_remove(value);
  // @@protoc_insertion_point(field_set:hw.trezor.messages.management.ChangeWipeCode.remove)
}

// -------------------------------------------------------------------

// SdProtect

// optional .hw.trezor.messages.management.SdProtect.SdProtectOperationType operation = 1;
inline bool SdProtect::_internal_has_operation() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool SdProtect::has_operation() const {
  return _internal_has_operation();
}
inline void SdProtect::clear_operation() {
  operation_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::hw::trezor::messages::management::SdProtect_SdProtectOperationType SdProtect::_internal_operation() const {
  return static_cast< ::hw::trezor::messages::management::SdProtect_SdProtectOperationType >(operation_);
}
inline ::hw::trezor::messages::management::SdProtect_SdProtectOperationType SdProtect::operation() const {
  // @@protoc_insertion_point(field_get:hw.trezor.messages.management.SdProtect.operation)
  return _internal_operation();
}
inline void SdProtect::_internal_set_operation(::hw::trezor::messages::management::SdProtect_SdProtectOperationType value) {
  assert(::hw::trezor::messages::management::SdProtect_SdProtectOperationType_IsValid(value));
  _has_bits_[0] |= 0x00000001u;
  operation_ = value;
}
inline void SdProtect::set_operation(::hw::trezor::messages::management::SdProtect_SdProtectOperationType value) {
  _internal_set_operation(value);
  // @@protoc_insertion_point(field_set:hw.trezor.messages.management.SdProtect.operation)
}

// -------------------------------------------------------------------

// Ping

// optional string message = 1;
inline bool Ping::_internal_has_message() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Ping::has_message() const {
  return _internal_has_message();
}
inline void Ping::clear_message() {
  message_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Ping::message() const {
  // @@protoc_insertion_point(field_get:hw.trezor.messages.management.Ping.message)
  return _internal_message();
}
inline void Ping::set_message(const std::string& value) {
  _internal_set_message(value);
  // @@protoc_insertion_point(field_set:hw.trezor.messages.management.Ping.message)
}
inline std::string* Ping::mutable_message() {
  // @@protoc_insertion_point(field_mutable:hw.trezor.messages.management.Ping.message)
  return _internal_mutable_message();
}
inline const std::string& Ping::_internal_message() const {
  return message_.GetNoArena();
}
inline void Ping::_internal_set_message(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  message_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Ping::set_message(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  message_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:hw.trezor.messages.management.Ping.message)
}
inline void Ping::set_message(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  message_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:hw.trezor.messages.management.Ping.message)
}
inline void Ping::set_message(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  message_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:hw.trezor.messages.management.Ping.message)
}
inline std::string* Ping::_internal_mutable_message() {
  _has_bits_[0] |= 0x00000001u;
  return message_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Ping::release_message() {
  // @@protoc_insertion_point(field_release:hw.trezor.messages.management.Ping.message)
  if (!_internal_has_message()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return message_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Ping::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  message_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), message);
  // @@protoc_insertion_point(field_set_allocated:hw.trezor.messages.management.Ping.message)
}

// optional bool button_protection = 2;
inline bool Ping::_internal_has_button_protection() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Ping::has_button_protection() const {
  return _internal_has_button_protection();
}
inline void Ping::clear_button_protection() {
  button_protection_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool Ping::_internal_button_protection() const {
  return button_protection_;
}
inline bool Ping::button_protection() const {
  // @@protoc_insertion_point(field_get:hw.trezor.messages.management.Ping.button_protection)
  return _internal_button_protection();
}
inline void Ping::_internal_set_button_protection(bool value) {
  _has_bits_[0] |= 0x00000002u;
  button_protection_ = value;
}
inline void Ping::set_button_protection(bool value) {
  _internal_set_button_protection(value);
  // @@protoc_insertion_point(field_set:hw.trezor.messages.management.Ping.button_protection)
}

// -------------------------------------------------------------------

// Cancel

// -------------------------------------------------------------------

// GetEntropy

// required uint32 size = 1;
inline bool GetEntropy::_internal_has_size() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool GetEntropy::has_size() const {
  return _internal_has_size();
}
inline void GetEntropy::clear_size() {
  size_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GetEntropy::_internal_size() const {
  return size_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GetEntropy::size() const {
  // @@protoc_insertion_point(field_get:hw.trezor.messages.management.GetEntropy.size)
  return _internal_size();
}
inline void GetEntropy::_internal_set_size(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  size_ = value;
}
inline void GetEntropy::set_size(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_size(value);
  // @@protoc_insertion_point(field_set:hw.trezor.messages.management.GetEntropy.size)
}

// -------------------------------------------------------------------

// Entropy

// required bytes entropy = 1;
inline bool Entropy::_internal_has_entropy() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Entropy::has_entropy() const {
  return _internal_has_entropy();
}
inline void Entropy::clear_entropy() {
  entropy_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Entropy::entropy() const {
  // @@protoc_insertion_point(field_get:hw.trezor.messages.management.Entropy.entropy)
  return _internal_entropy();
}
inline void Entropy::set_entropy(const std::string& value) {
  _internal_set_entropy(value);
  // @@protoc_insertion_point(field_set:hw.trezor.messages.management.Entropy.entropy)
}
inline std::string* Entropy::mutable_entropy() {
  // @@protoc_insertion_point(field_mutable:hw.trezor.messages.management.Entropy.entropy)
  return _internal_mutable_entropy();
}
inline const std::string& Entropy::_internal_entropy() const {
  return entropy_.GetNoArena();
}
inline void Entropy::_internal_set_entropy(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  entropy_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Entropy::set_entropy(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  entropy_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:hw.trezor.messages.management.Entropy.entropy)
}
inline void Entropy::set_entropy(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  entropy_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:hw.trezor.messages.management.Entropy.entropy)
}
inline void Entropy::set_entropy(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  entropy_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:hw.trezor.messages.management.Entropy.entropy)
}
inline std::string* Entropy::_internal_mutable_entropy() {
  _has_bits_[0] |= 0x00000001u;
  return entropy_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Entropy::release_entropy() {
  // @@protoc_insertion_point(field_release:hw.trezor.messages.management.Entropy.entropy)
  if (!_internal_has_entropy()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return entropy_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Entropy::set_allocated_entropy(std::string* entropy) {
  if (entropy != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  entropy_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), entropy);
  // @@protoc_insertion_point(field_set_allocated:hw.trezor.messages.management.Entropy.entropy)
}

// -------------------------------------------------------------------

// WipeDevice

// -------------------------------------------------------------------

// LoadDevice

// repeated string mnemonics = 1;
inline int LoadDevice::_internal_mnemonics_size() const {
  return mnemonics_.size();
}
inline int LoadDevice::mnemonics_size() const {
  return _internal_mnemonics_size();
}
inline void LoadDevice::clear_mnemonics() {
  mnemonics_.Clear();
}
inline std::string* LoadDevice::add_mnemonics() {
  // @@protoc_insertion_point(field_add_mutable:hw.trezor.messages.management.LoadDevice.mnemonics)
  return _internal_add_mnemonics();
}
inline const std::string& LoadDevice::_internal_mnemonics(int index) const {
  return mnemonics_.Get(index);
}
inline const std::string& LoadDevice::mnemonics(int index) const {
  // @@protoc_insertion_point(field_get:hw.trezor.messages.management.LoadDevice.mnemonics)
  return _internal_mnemonics(index);
}
inline std::string* LoadDevice::mutable_mnemonics(int index) {
  // @@protoc_insertion_point(field_mutable:hw.trezor.messages.management.LoadDevice.mnemonics)
  return mnemonics_.Mutable(index);
}
inline void LoadDevice::set_mnemonics(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:hw.trezor.messages.management.LoadDevice.mnemonics)
  mnemonics_.Mutable(index)->assign(value);
}
inline void LoadDevice::set_mnemonics(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:hw.trezor.messages.management.LoadDevice.mnemonics)
  mnemonics_.Mutable(index)->assign(std::move(value));
}
inline void LoadDevice::set_mnemonics(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  mnemonics_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:hw.trezor.messages.management.LoadDevice.mnemonics)
}
inline void LoadDevice::set_mnemonics(int index, const char* value, size_t size) {
  mnemonics_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:hw.trezor.messages.management.LoadDevice.mnemonics)
}
inline std::string* LoadDevice::_internal_add_mnemonics() {
  return mnemonics_.Add();
}
inline void LoadDevice::add_mnemonics(const std::string& value) {
  mnemonics_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:hw.trezor.messages.management.LoadDevice.mnemonics)
}
inline void LoadDevice::add_mnemonics(std::string&& value) {
  mnemonics_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:hw.trezor.messages.management.LoadDevice.mnemonics)
}
inline void LoadDevice::add_mnemonics(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  mnemonics_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:hw.trezor.messages.management.LoadDevice.mnemonics)
}
inline void LoadDevice::add_mnemonics(const char* value, size_t size) {
  mnemonics_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:hw.trezor.messages.management.LoadDevice.mnemonics)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
LoadDevice::mnemonics() const {
  // @@protoc_insertion_point(field_list:hw.trezor.messages.management.LoadDevice.mnemonics)
  return mnemonics_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
LoadDevice::mutable_mnemonics() {
  // @@protoc_insertion_point(field_mutable_list:hw.trezor.messages.management.LoadDevice.mnemonics)
  return &mnemonics_;
}

// optional string pin = 3;
inline bool LoadDevice::_internal_has_pin() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool LoadDevice::has_pin() const {
  return _internal_has_pin();
}
inline void LoadDevice::clear_pin() {
  pin_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& LoadDevice::pin() const {
  // @@protoc_insertion_point(field_get:hw.trezor.messages.management.LoadDevice.pin)
  return _internal_pin();
}
inline void LoadDevice::set_pin(const std::string& value) {
  _internal_set_pin(value);
  // @@protoc_insertion_point(field_set:hw.trezor.messages.management.LoadDevice.pin)
}
inline std::string* LoadDevice::mutable_pin() {
  // @@protoc_insertion_point(field_mutable:hw.trezor.messages.management.LoadDevice.pin)
  return _internal_mutable_pin();
}
inline const std::string& LoadDevice::_internal_pin() const {
  return pin_.GetNoArena();
}
inline void LoadDevice::_internal_set_pin(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  pin_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void LoadDevice::set_pin(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  pin_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:hw.trezor.messages.management.LoadDevice.pin)
}
inline void LoadDevice::set_pin(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  pin_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:hw.trezor.messages.management.LoadDevice.pin)
}
inline void LoadDevice::set_pin(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  pin_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:hw.trezor.messages.management.LoadDevice.pin)
}
inline std::string* LoadDevice::_internal_mutable_pin() {
  _has_bits_[0] |= 0x00000001u;
  return pin_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* LoadDevice::release_pin() {
  // @@protoc_insertion_point(field_release:hw.trezor.messages.management.LoadDevice.pin)
  if (!_internal_has_pin()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return pin_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void LoadDevice::set_allocated_pin(std::string* pin) {
  if (pin != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  pin_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), pin);
  // @@protoc_insertion_point(field_set_allocated:hw.trezor.messages.management.LoadDevice.pin)
}

// optional bool passphrase_protection = 4;
inline bool LoadDevice::_internal_has_passphrase_protection() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool LoadDevice::has_passphrase_protection() const {
  return _internal_has_passphrase_protection();
}
inline void LoadDevice::clear_passphrase_protection() {
  passphrase_protection_ = false;
  _has_bits_[0] &= ~0x00000008u;
}
inline bool LoadDevice::_internal_passphrase_protection() const {
  return passphrase_protection_;
}
inline bool LoadDevice::passphrase_protection() const {
  // @@protoc_insertion_point(field_get:hw.trezor.messages.management.LoadDevice.passphrase_protection)
  return _internal_passphrase_protection();
}
inline void LoadDevice::_internal_set_passphrase_protection(bool value) {
  _has_bits_[0] |= 0x00000008u;
  passphrase_protection_ = value;
}
inline void LoadDevice::set_passphrase_protection(bool value) {
  _internal_set_passphrase_protection(value);
  // @@protoc_insertion_point(field_set:hw.trezor.messages.management.LoadDevice.passphrase_protection)
}

// optional string language = 5 [default = "en-US"];
inline bool LoadDevice::_internal_has_language() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool LoadDevice::has_language() const {
  return _internal_has_language();
}
inline void LoadDevice::clear_language() {
  language_.ClearToDefaultNoArena(&::hw::trezor::messages::management::LoadDevice::_i_give_permission_to_break_this_code_default_language_.get());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& LoadDevice::language() const {
  // @@protoc_insertion_point(field_get:hw.trezor.messages.management.LoadDevice.language)
  return _internal_language();
}
inline void LoadDevice::set_language(const std::string& value) {
  _internal_set_language(value);
  // @@protoc_insertion_point(field_set:hw.trezor.messages.management.LoadDevice.language)
}
inline std::string* LoadDevice::mutable_language() {
  // @@protoc_insertion_point(field_mutable:hw.trezor.messages.management.LoadDevice.language)
  return _internal_mutable_language();
}
inline const std::string& LoadDevice::_internal_language() const {
  return language_.GetNoArena();
}
inline void LoadDevice::_internal_set_language(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  language_.SetNoArena(&::hw::trezor::messages::management::LoadDevice::_i_give_permission_to_break_this_code_default_language_.get(), value);
}
inline void LoadDevice::set_language(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  language_.SetNoArena(
    &::hw::trezor::messages::management::LoadDevice::_i_give_permission_to_break_this_code_default_language_.get(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:hw.trezor.messages.management.LoadDevice.language)
}
inline void LoadDevice::set_language(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  language_.SetNoArena(&::hw::trezor::messages::management::LoadDevice::_i_give_permission_to_break_this_code_default_language_.get(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:hw.trezor.messages.management.LoadDevice.language)
}
inline void LoadDevice::set_language(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  language_.SetNoArena(&::hw::trezor::messages::management::LoadDevice::_i_give_permission_to_break_this_code_default_language_.get(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:hw.trezor.messages.management.LoadDevice.language)
}
inline std::string* LoadDevice::_internal_mutable_language() {
  _has_bits_[0] |= 0x00000002u;
  return language_.MutableNoArena(&::hw::trezor::messages::management::LoadDevice::_i_give_permission_to_break_this_code_default_language_.get());
}
inline std::string* LoadDevice::release_language() {
  // @@protoc_insertion_point(field_release:hw.trezor.messages.management.LoadDevice.language)
  if (!_internal_has_language()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return language_.ReleaseNonDefaultNoArena(&::hw::trezor::messages::management::LoadDevice::_i_give_permission_to_break_this_code_default_language_.get());
}
inline void LoadDevice::set_allocated_language(std::string* language) {
  if (language != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  language_.SetAllocatedNoArena(&::hw::trezor::messages::management::LoadDevice::_i_give_permission_to_break_this_code_default_language_.get(), language);
  // @@protoc_insertion_point(field_set_allocated:hw.trezor.messages.management.LoadDevice.language)
}

// optional string label = 6;
inline bool LoadDevice::_internal_has_label() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool LoadDevice::has_label() const {
  return _internal_has_label();
}
inline void LoadDevice::clear_label() {
  label_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& LoadDevice::label() const {
  // @@protoc_insertion_point(field_get:hw.trezor.messages.management.LoadDevice.label)
  return _internal_label();
}
inline void LoadDevice::set_label(const std::string& value) {
  _internal_set_label(value);
  // @@protoc_insertion_point(field_set:hw.trezor.messages.management.LoadDevice.label)
}
inline std::string* LoadDevice::mutable_label() {
  // @@protoc_insertion_point(field_mutable:hw.trezor.messages.management.LoadDevice.label)
  return _internal_mutable_label();
}
inline const std::string& LoadDevice::_internal_label() const {
  return label_.GetNoArena();
}
inline void LoadDevice::_internal_set_label(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  label_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void LoadDevice::set_label(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  label_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:hw.trezor.messages.management.LoadDevice.label)
}
inline void LoadDevice::set_label(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  label_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:hw.trezor.messages.management.LoadDevice.label)
}
inline void LoadDevice::set_label(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000004u;
  label_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:hw.trezor.messages.management.LoadDevice.label)
}
inline std::string* LoadDevice::_internal_mutable_label() {
  _has_bits_[0] |= 0x00000004u;
  return label_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* LoadDevice::release_label() {
  // @@protoc_insertion_point(field_release:hw.trezor.messages.management.LoadDevice.label)
  if (!_internal_has_label()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return label_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void LoadDevice::set_allocated_label(std::string* label) {
  if (label != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  label_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), label);
  // @@protoc_insertion_point(field_set_allocated:hw.trezor.messages.management.LoadDevice.label)
}

// optional bool skip_checksum = 7;
inline bool LoadDevice::_internal_has_skip_checksum() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool LoadDevice::has_skip_checksum() const {
  return _internal_has_skip_checksum();
}
inline void LoadDevice::clear_skip_checksum() {
  skip_checksum_ = false;
  _has_bits_[0] &= ~0x00000010u;
}
inline bool LoadDevice::_internal_skip_checksum() const {
  return skip_checksum_;
}
inline bool LoadDevice::skip_checksum() const {
  // @@protoc_insertion_point(field_get:hw.trezor.messages.management.LoadDevice.skip_checksum)
  return _internal_skip_checksum();
}
inline void LoadDevice::_internal_set_skip_checksum(bool value) {
  _has_bits_[0] |= 0x00000010u;
  skip_checksum_ = value;
}
inline void LoadDevice::set_skip_checksum(bool value) {
  _internal_set_skip_checksum(value);
  // @@protoc_insertion_point(field_set:hw.trezor.messages.management.LoadDevice.skip_checksum)
}

// optional uint32 u2f_counter = 8;
inline bool LoadDevice::_internal_has_u2f_counter() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool LoadDevice::has_u2f_counter() const {
  return _internal_has_u2f_counter();
}
inline void LoadDevice::clear_u2f_counter() {
  u2f_counter_ = 0u;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LoadDevice::_internal_u2f_counter() const {
  return u2f_counter_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LoadDevice::u2f_counter() const {
  // @@protoc_insertion_point(field_get:hw.trezor.messages.management.LoadDevice.u2f_counter)
  return _internal_u2f_counter();
}
inline void LoadDevice::_internal_set_u2f_counter(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000080u;
  u2f_counter_ = value;
}
inline void LoadDevice::set_u2f_counter(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_u2f_counter(value);
  // @@protoc_insertion_point(field_set:hw.trezor.messages.management.LoadDevice.u2f_counter)
}

// optional bool needs_backup = 9;
inline bool LoadDevice::_internal_has_needs_backup() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool LoadDevice::has_needs_backup() const {
  return _internal_has_needs_backup();
}
inline void LoadDevice::clear_needs_backup() {
  needs_backup_ = false;
  _has_bits_[0] &= ~0x00000020u;
}
inline bool LoadDevice::_internal_needs_backup() const {
  return needs_backup_;
}
inline bool LoadDevice::needs_backup() const {
  // @@protoc_insertion_point(field_get:hw.trezor.messages.management.LoadDevice.needs_backup)
  return _internal_needs_backup();
}
inline void LoadDevice::_internal_set_needs_backup(bool value) {
  _has_bits_[0] |= 0x00000020u;
  needs_backup_ = value;
}
inline void LoadDevice::set_needs_backup(bool value) {
  _internal_set_needs_backup(value);
  // @@protoc_insertion_point(field_set:hw.trezor.messages.management.LoadDevice.needs_backup)
}

// optional bool no_backup = 10;
inline bool LoadDevice::_internal_has_no_backup() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool LoadDevice::has_no_backup() const {
  return _internal_has_no_backup();
}
inline void LoadDevice::clear_no_backup() {
  no_backup_ = false;
  _has_bits_[0] &= ~0x00000040u;
}
inline bool LoadDevice::_internal_no_backup() const {
  return no_backup_;
}
inline bool LoadDevice::no_backup() const {
  // @@protoc_insertion_point(field_get:hw.trezor.messages.management.LoadDevice.no_backup)
  return _internal_no_backup();
}
inline void LoadDevice::_internal_set_no_backup(bool value) {
  _has_bits_[0] |= 0x00000040u;
  no_backup_ = value;
}
inline void LoadDevice::set_no_backup(bool value) {
  _internal_set_no_backup(value);
  // @@protoc_insertion_point(field_set:hw.trezor.messages.management.LoadDevice.no_backup)
}

// -------------------------------------------------------------------

// ResetDevice

// optional bool display_random = 1;
inline bool ResetDevice::_internal_has_display_random() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ResetDevice::has_display_random() const {
  return _internal_has_display_random();
}
inline void ResetDevice::clear_display_random() {
  display_random_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool ResetDevice::_internal_display_random() const {
  return display_random_;
}
inline bool ResetDevice::display_random() const {
  // @@protoc_insertion_point(field_get:hw.trezor.messages.management.ResetDevice.display_random)
  return _internal_display_random();
}
inline void ResetDevice::_internal_set_display_random(bool value) {
  _has_bits_[0] |= 0x00000004u;
  display_random_ = value;
}
inline void ResetDevice::set_display_random(bool value) {
  _internal_set_display_random(value);
  // @@protoc_insertion_point(field_set:hw.trezor.messages.management.ResetDevice.display_random)
}

// optional uint32 strength = 2 [default = 256];
inline bool ResetDevice::_internal_has_strength() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool ResetDevice::has_strength() const {
  return _internal_has_strength();
}
inline void ResetDevice::clear_strength() {
  strength_ = 256u;
  _has_bits_[0] &= ~0x00000200u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ResetDevice::_internal_strength() const {
  return strength_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ResetDevice::strength() const {
  // @@protoc_insertion_point(field_get:hw.trezor.messages.management.ResetDevice.strength)
  return _internal_strength();
}
inline void ResetDevice::_internal_set_strength(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000200u;
  strength_ = value;
}
inline void ResetDevice::set_strength(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_strength(value);
  // @@protoc_insertion_point(field_set:hw.trezor.messages.management.ResetDevice.strength)
}

// optional bool passphrase_protection = 3;
inline bool ResetDevice::_internal_has_passphrase_protection() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool ResetDevice::has_passphrase_protection() const {
  return _internal_has_passphrase_protection();
}
inline void ResetDevice::clear_passphrase_protection() {
  passphrase_protection_ = false;
  _has_bits_[0] &= ~0x00000008u;
}
inline bool ResetDevice::_internal_passphrase_protection() const {
  return passphrase_protection_;
}
inline bool ResetDevice::passphrase_protection() const {
  // @@protoc_insertion_point(field_get:hw.trezor.messages.management.ResetDevice.passphrase_protection)
  return _internal_passphrase_protection();
}
inline void ResetDevice::_internal_set_passphrase_protection(bool value) {
  _has_bits_[0] |= 0x00000008u;
  passphrase_protection_ = value;
}
inline void ResetDevice::set_passphrase_protection(bool value) {
  _internal_set_passphrase_protection(value);
  // @@protoc_insertion_point(field_set:hw.trezor.messages.management.ResetDevice.passphrase_protection)
}

// optional bool pin_protection = 4;
inline bool ResetDevice::_internal_has_pin_protection() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool ResetDevice::has_pin_protection() const {
  return _internal_has_pin_protection();
}
inline void ResetDevice::clear_pin_protection() {
  pin_protection_ = false;
  _has_bits_[0] &= ~0x00000010u;
}
inline bool ResetDevice::_internal_pin_protection() const {
  return pin_protection_;
}
inline bool ResetDevice::pin_protection() const {
  // @@protoc_insertion_point(field_get:hw.trezor.messages.management.ResetDevice.pin_protection)
  return _internal_pin_protection();
}
inline void ResetDevice::_internal_set_pin_protection(bool value) {
  _has_bits_[0] |= 0x00000010u;
  pin_protection_ = value;
}
inline void ResetDevice::set_pin_protection(bool value) {
  _internal_set_pin_protection(value);
  // @@protoc_insertion_point(field_set:hw.trezor.messages.management.ResetDevice.pin_protection)
}

// optional string language = 5 [default = "en-US"];
inline bool ResetDevice::_internal_has_language() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ResetDevice::has_language() const {
  return _internal_has_language();
}
inline void ResetDevice::clear_language() {
  language_.ClearToDefaultNoArena(&::hw::trezor::messages::management::ResetDevice::_i_give_permission_to_break_this_code_default_language_.get());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ResetDevice::language() const {
  // @@protoc_insertion_point(field_get:hw.trezor.messages.management.ResetDevice.language)
  return _internal_language();
}
inline void ResetDevice::set_language(const std::string& value) {
  _internal_set_language(value);
  // @@protoc_insertion_point(field_set:hw.trezor.messages.management.ResetDevice.language)
}
inline std::string* ResetDevice::mutable_language() {
  // @@protoc_insertion_point(field_mutable:hw.trezor.messages.management.ResetDevice.language)
  return _internal_mutable_language();
}
inline const std::string& ResetDevice::_internal_language() const {
  return language_.GetNoArena();
}
inline void ResetDevice::_internal_set_language(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  language_.SetNoArena(&::hw::trezor::messages::management::ResetDevice::_i_give_permission_to_break_this_code_default_language_.get(), value);
}
inline void ResetDevice::set_language(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  language_.SetNoArena(
    &::hw::trezor::messages::management::ResetDevice::_i_give_permission_to_break_this_code_default_language_.get(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:hw.trezor.messages.management.ResetDevice.language)
}
inline void ResetDevice::set_language(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  language_.SetNoArena(&::hw::trezor::messages::management::ResetDevice::_i_give_permission_to_break_this_code_default_language_.get(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:hw.trezor.messages.management.ResetDevice.language)
}
inline void ResetDevice::set_language(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  language_.SetNoArena(&::hw::trezor::messages::management::ResetDevice::_i_give_permission_to_break_this_code_default_language_.get(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:hw.trezor.messages.management.ResetDevice.language)
}
inline std::string* ResetDevice::_internal_mutable_language() {
  _has_bits_[0] |= 0x00000001u;
  return language_.MutableNoArena(&::hw::trezor::messages::management::ResetDevice::_i_give_permission_to_break_this_code_default_language_.get());
}
inline std::string* ResetDevice::release_language() {
  // @@protoc_insertion_point(field_release:hw.trezor.messages.management.ResetDevice.language)
  if (!_internal_has_language()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return language_.ReleaseNonDefaultNoArena(&::hw::trezor::messages::management::ResetDevice::_i_give_permission_to_break_this_code_default_language_.get());
}
inline void ResetDevice::set_allocated_language(std::string* language) {
  if (language != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  language_.SetAllocatedNoArena(&::hw::trezor::messages::management::ResetDevice::_i_give_permission_to_break_this_code_default_language_.get(), language);
  // @@protoc_insertion_point(field_set_allocated:hw.trezor.messages.management.ResetDevice.language)
}

// optional string label = 6;
inline bool ResetDevice::_internal_has_label() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ResetDevice::has_label() const {
  return _internal_has_label();
}
inline void ResetDevice::clear_label() {
  label_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& ResetDevice::label() const {
  // @@protoc_insertion_point(field_get:hw.trezor.messages.management.ResetDevice.label)
  return _internal_label();
}
inline void ResetDevice::set_label(const std::string& value) {
  _internal_set_label(value);
  // @@protoc_insertion_point(field_set:hw.trezor.messages.management.ResetDevice.label)
}
inline std::string* ResetDevice::mutable_label() {
  // @@protoc_insertion_point(field_mutable:hw.trezor.messages.management.ResetDevice.label)
  return _internal_mutable_label();
}
inline const std::string& ResetDevice::_internal_label() const {
  return label_.GetNoArena();
}
inline void ResetDevice::_internal_set_label(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  label_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ResetDevice::set_label(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  label_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:hw.trezor.messages.management.ResetDevice.label)
}
inline void ResetDevice::set_label(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  label_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:hw.trezor.messages.management.ResetDevice.label)
}
inline void ResetDevice::set_label(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  label_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:hw.trezor.messages.management.ResetDevice.label)
}
inline std::string* ResetDevice::_internal_mutable_label() {
  _has_bits_[0] |= 0x00000002u;
  return label_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ResetDevice::release_label() {
  // @@protoc_insertion_point(field_release:hw.trezor.messages.management.ResetDevice.label)
  if (!_internal_has_label()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return label_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ResetDevice::set_allocated_label(std::string* label) {
  if (label != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  label_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), label);
  // @@protoc_insertion_point(field_set_allocated:hw.trezor.messages.management.ResetDevice.label)
}

// optional uint32 u2f_counter = 7;
inline bool ResetDevice::_internal_has_u2f_counter() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool ResetDevice::has_u2f_counter() const {
  return _internal_has_u2f_counter();
}
inline void ResetDevice::clear_u2f_counter() {
  u2f_counter_ = 0u;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ResetDevice::_internal_u2f_counter() const {
  return u2f_counter_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ResetDevice::u2f_counter() const {
  // @@protoc_insertion_point(field_get:hw.trezor.messages.management.ResetDevice.u2f_counter)
  return _internal_u2f_counter();
}
inline void ResetDevice::_internal_set_u2f_counter(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000040u;
  u2f_counter_ = value;
}
inline void ResetDevice::set_u2f_counter(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_u2f_counter(value);
  // @@protoc_insertion_point(field_set:hw.trezor.messages.management.ResetDevice.u2f_counter)
}

// optional bool skip_backup = 8;
inline bool ResetDevice::_internal_has_skip_backup() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool ResetDevice::has_skip_backup() const {
  return _internal_has_skip_backup();
}
inline void ResetDevice::clear_skip_backup() {
  skip_backup_ = false;
  _has_bits_[0] &= ~0x00000020u;
}
inline bool ResetDevice::_internal_skip_backup() const {
  return skip_backup_;
}
inline bool ResetDevice::skip_backup() const {
  // @@protoc_insertion_point(field_get:hw.trezor.messages.management.ResetDevice.skip_backup)
  return _internal_skip_backup();
}
inline void ResetDevice::_internal_set_skip_backup(bool value) {
  _has_bits_[0] |= 0x00000020u;
  skip_backup_ = value;
}
inline void ResetDevice::set_skip_backup(bool value) {
  _internal_set_skip_backup(value);
  // @@protoc_insertion_point(field_set:hw.trezor.messages.management.ResetDevice.skip_backup)
}

// optional bool no_backup = 9;
inline bool ResetDevice::_internal_has_no_backup() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool ResetDevice::has_no_backup() const {
  return _internal_has_no_backup();
}
inline void ResetDevice::clear_no_backup() {
  no_backup_ = false;
  _has_bits_[0] &= ~0x00000080u;
}
inline bool ResetDevice::_internal_no_backup() const {
  return no_backup_;
}
inline bool ResetDevice::no_backup() const {
  // @@protoc_insertion_point(field_get:hw.trezor.messages.management.ResetDevice.no_backup)
  return _internal_no_backup();
}
inline void ResetDevice::_internal_set_no_backup(bool value) {
  _has_bits_[0] |= 0x00000080u;
  no_backup_ = value;
}
inline void ResetDevice::set_no_backup(bool value) {
  _internal_set_no_backup(value);
  // @@protoc_insertion_point(field_set:hw.trezor.messages.management.ResetDevice.no_backup)
}

// optional .hw.trezor.messages.management.BackupType backup_type = 10 [default = Bip39];
inline bool ResetDevice::_internal_has_backup_type() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool ResetDevice::has_backup_type() const {
  return _internal_has_backup_type();
}
inline void ResetDevice::clear_backup_type() {
  backup_type_ = 0;
  _has_bits_[0] &= ~0x00000100u;
}
inline ::hw::trezor::messages::management::BackupType ResetDevice::_internal_backup_type() const {
  return static_cast< ::hw::trezor::messages::management::BackupType >(backup_type_);
}
inline ::hw::trezor::messages::management::BackupType ResetDevice::backup_type() const {
  // @@protoc_insertion_point(field_get:hw.trezor.messages.management.ResetDevice.backup_type)
  return _internal_backup_type();
}
inline void ResetDevice::_internal_set_backup_type(::hw::trezor::messages::management::BackupType value) {
  assert(::hw::trezor::messages::management::BackupType_IsValid(value));
  _has_bits_[0] |= 0x00000100u;
  backup_type_ = value;
}
inline void ResetDevice::set_backup_type(::hw::trezor::messages::management::BackupType value) {
  _internal_set_backup_type(value);
  // @@protoc_insertion_point(field_set:hw.trezor.messages.management.ResetDevice.backup_type)
}

// -------------------------------------------------------------------

// BackupDevice

// -------------------------------------------------------------------

// EntropyRequest

// -------------------------------------------------------------------

// EntropyAck

// optional bytes entropy = 1;
inline bool EntropyAck::_internal_has_entropy() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool EntropyAck::has_entropy() const {
  return _internal_has_entropy();
}
inline void EntropyAck::clear_entropy() {
  entropy_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& EntropyAck::entropy() const {
  // @@protoc_insertion_point(field_get:hw.trezor.messages.management.EntropyAck.entropy)
  return _internal_entropy();
}
inline void EntropyAck::set_entropy(const std::string& value) {
  _internal_set_entropy(value);
  // @@protoc_insertion_point(field_set:hw.trezor.messages.management.EntropyAck.entropy)
}
inline std::string* EntropyAck::mutable_entropy() {
  // @@protoc_insertion_point(field_mutable:hw.trezor.messages.management.EntropyAck.entropy)
  return _internal_mutable_entropy();
}
inline const std::string& EntropyAck::_internal_entropy() const {
  return entropy_.GetNoArena();
}
inline void EntropyAck::_internal_set_entropy(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  entropy_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void EntropyAck::set_entropy(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  entropy_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:hw.trezor.messages.management.EntropyAck.entropy)
}
inline void EntropyAck::set_entropy(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  entropy_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:hw.trezor.messages.management.EntropyAck.entropy)
}
inline void EntropyAck::set_entropy(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  entropy_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:hw.trezor.messages.management.EntropyAck.entropy)
}
inline std::string* EntropyAck::_internal_mutable_entropy() {
  _has_bits_[0] |= 0x00000001u;
  return entropy_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* EntropyAck::release_entropy() {
  // @@protoc_insertion_point(field_release:hw.trezor.messages.management.EntropyAck.entropy)
  if (!_internal_has_entropy()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return entropy_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void EntropyAck::set_allocated_entropy(std::string* entropy) {
  if (entropy != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  entropy_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), entropy);
  // @@protoc_insertion_point(field_set_allocated:hw.trezor.messages.management.EntropyAck.entropy)
}

// -------------------------------------------------------------------

// RecoveryDevice

// optional uint32 word_count = 1;
inline bool RecoveryDevice::_internal_has_word_count() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool RecoveryDevice::has_word_count() const {
  return _internal_has_word_count();
}
inline void RecoveryDevice::clear_word_count() {
  word_count_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RecoveryDevice::_internal_word_count() const {
  return word_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RecoveryDevice::word_count() const {
  // @@protoc_insertion_point(field_get:hw.trezor.messages.management.RecoveryDevice.word_count)
  return _internal_word_count();
}
inline void RecoveryDevice::_internal_set_word_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  word_count_ = value;
}
inline void RecoveryDevice::set_word_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_word_count(value);
  // @@protoc_insertion_point(field_set:hw.trezor.messages.management.RecoveryDevice.word_count)
}

// optional bool passphrase_protection = 2;
inline bool RecoveryDevice::_internal_has_passphrase_protection() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool RecoveryDevice::has_passphrase_protection() const {
  return _internal_has_passphrase_protection();
}
inline void RecoveryDevice::clear_passphrase_protection() {
  passphrase_protection_ = false;
  _has_bits_[0] &= ~0x00000008u;
}
inline bool RecoveryDevice::_internal_passphrase_protection() const {
  return passphrase_protection_;
}
inline bool RecoveryDevice::passphrase_protection() const {
  // @@protoc_insertion_point(field_get:hw.trezor.messages.management.RecoveryDevice.passphrase_protection)
  return _internal_passphrase_protection();
}
inline void RecoveryDevice::_internal_set_passphrase_protection(bool value) {
  _has_bits_[0] |= 0x00000008u;
  passphrase_protection_ = value;
}
inline void RecoveryDevice::set_passphrase_protection(bool value) {
  _internal_set_passphrase_protection(value);
  // @@protoc_insertion_point(field_set:hw.trezor.messages.management.RecoveryDevice.passphrase_protection)
}

// optional bool pin_protection = 3;
inline bool RecoveryDevice::_internal_has_pin_protection() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool RecoveryDevice::has_pin_protection() const {
  return _internal_has_pin_protection();
}
inline void RecoveryDevice::clear_pin_protection() {
  pin_protection_ = false;
  _has_bits_[0] &= ~0x00000010u;
}
inline bool RecoveryDevice::_internal_pin_protection() const {
  return pin_protection_;
}
inline bool RecoveryDevice::pin_protection() const {
  // @@protoc_insertion_point(field_get:hw.trezor.messages.management.RecoveryDevice.pin_protection)
  return _internal_pin_protection();
}
inline void RecoveryDevice::_internal_set_pin_protection(bool value) {
  _has_bits_[0] |= 0x00000010u;
  pin_protection_ = value;
}
inline void RecoveryDevice::set_pin_protection(bool value) {
  _internal_set_pin_protection(value);
  // @@protoc_insertion_point(field_set:hw.trezor.messages.management.RecoveryDevice.pin_protection)
}

// optional string language = 4 [default = "en-US"];
inline bool RecoveryDevice::_internal_has_language() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool RecoveryDevice::has_language() const {
  return _internal_has_language();
}
inline void RecoveryDevice::clear_language() {
  language_.ClearToDefaultNoArena(&::hw::trezor::messages::management::RecoveryDevice::_i_give_permission_to_break_this_code_default_language_.get());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& RecoveryDevice::language() const {
  // @@protoc_insertion_point(field_get:hw.trezor.messages.management.RecoveryDevice.language)
  return _internal_language();
}
inline void RecoveryDevice::set_language(const std::string& value) {
  _internal_set_language(value);
  // @@protoc_insertion_point(field_set:hw.trezor.messages.management.RecoveryDevice.language)
}
inline std::string* RecoveryDevice::mutable_language() {
  // @@protoc_insertion_point(field_mutable:hw.trezor.messages.management.RecoveryDevice.language)
  return _internal_mutable_language();
}
inline const std::string& RecoveryDevice::_internal_language() const {
  return language_.GetNoArena();
}
inline void RecoveryDevice::_internal_set_language(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  language_.SetNoArena(&::hw::trezor::messages::management::RecoveryDevice::_i_give_permission_to_break_this_code_default_language_.get(), value);
}
inline void RecoveryDevice::set_language(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  language_.SetNoArena(
    &::hw::trezor::messages::management::RecoveryDevice::_i_give_permission_to_break_this_code_default_language_.get(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:hw.trezor.messages.management.RecoveryDevice.language)
}
inline void RecoveryDevice::set_language(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  language_.SetNoArena(&::hw::trezor::messages::management::RecoveryDevice::_i_give_permission_to_break_this_code_default_language_.get(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:hw.trezor.messages.management.RecoveryDevice.language)
}
inline void RecoveryDevice::set_language(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  language_.SetNoArena(&::hw::trezor::messages::management::RecoveryDevice::_i_give_permission_to_break_this_code_default_language_.get(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:hw.trezor.messages.management.RecoveryDevice.language)
}
inline std::string* RecoveryDevice::_internal_mutable_language() {
  _has_bits_[0] |= 0x00000001u;
  return language_.MutableNoArena(&::hw::trezor::messages::management::RecoveryDevice::_i_give_permission_to_break_this_code_default_language_.get());
}
inline std::string* RecoveryDevice::release_language() {
  // @@protoc_insertion_point(field_release:hw.trezor.messages.management.RecoveryDevice.language)
  if (!_internal_has_language()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return language_.ReleaseNonDefaultNoArena(&::hw::trezor::messages::management::RecoveryDevice::_i_give_permission_to_break_this_code_default_language_.get());
}
inline void RecoveryDevice::set_allocated_language(std::string* language) {
  if (language != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  language_.SetAllocatedNoArena(&::hw::trezor::messages::management::RecoveryDevice::_i_give_permission_to_break_this_code_default_language_.get(), language);
  // @@protoc_insertion_point(field_set_allocated:hw.trezor.messages.management.RecoveryDevice.language)
}

// optional string label = 5;
inline bool RecoveryDevice::_internal_has_label() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool RecoveryDevice::has_label() const {
  return _internal_has_label();
}
inline void RecoveryDevice::clear_label() {
  label_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& RecoveryDevice::label() const {
  // @@protoc_insertion_point(field_get:hw.trezor.messages.management.RecoveryDevice.label)
  return _internal_label();
}
inline void RecoveryDevice::set_label(const std::string& value) {
  _internal_set_label(value);
  // @@protoc_insertion_point(field_set:hw.trezor.messages.management.RecoveryDevice.label)
}
inline std::string* RecoveryDevice::mutable_label() {
  // @@protoc_insertion_point(field_mutable:hw.trezor.messages.management.RecoveryDevice.label)
  return _internal_mutable_label();
}
inline const std::string& RecoveryDevice::_internal_label() const {
  return label_.GetNoArena();
}
inline void RecoveryDevice::_internal_set_label(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  label_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void RecoveryDevice::set_label(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  label_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:hw.trezor.messages.management.RecoveryDevice.label)
}
inline void RecoveryDevice::set_label(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  label_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:hw.trezor.messages.management.RecoveryDevice.label)
}
inline void RecoveryDevice::set_label(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  label_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:hw.trezor.messages.management.RecoveryDevice.label)
}
inline std::string* RecoveryDevice::_internal_mutable_label() {
  _has_bits_[0] |= 0x00000002u;
  return label_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* RecoveryDevice::release_label() {
  // @@protoc_insertion_point(field_release:hw.trezor.messages.management.RecoveryDevice.label)
  if (!_internal_has_label()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return label_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void RecoveryDevice::set_allocated_label(std::string* label) {
  if (label != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  label_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), label);
  // @@protoc_insertion_point(field_set_allocated:hw.trezor.messages.management.RecoveryDevice.label)
}

// optional bool enforce_wordlist = 6;
inline bool RecoveryDevice::_internal_has_enforce_wordlist() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool RecoveryDevice::has_enforce_wordlist() const {
  return _internal_has_enforce_wordlist();
}
inline void RecoveryDevice::clear_enforce_wordlist() {
  enforce_wordlist_ = false;
  _has_bits_[0] &= ~0x00000020u;
}
inline bool RecoveryDevice::_internal_enforce_wordlist() const {
  return enforce_wordlist_;
}
inline bool RecoveryDevice::enforce_wordlist() const {
  // @@protoc_insertion_point(field_get:hw.trezor.messages.management.RecoveryDevice.enforce_wordlist)
  return _internal_enforce_wordlist();
}
inline void RecoveryDevice::_internal_set_enforce_wordlist(bool value) {
  _has_bits_[0] |= 0x00000020u;
  enforce_wordlist_ = value;
}
inline void RecoveryDevice::set_enforce_wordlist(bool value) {
  _internal_set_enforce_wordlist(value);
  // @@protoc_insertion_point(field_set:hw.trezor.messages.management.RecoveryDevice.enforce_wordlist)
}

// optional .hw.trezor.messages.management.RecoveryDevice.RecoveryDeviceType type = 8;
inline bool RecoveryDevice::_internal_has_type() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool RecoveryDevice::has_type() const {
  return _internal_has_type();
}
inline void RecoveryDevice::clear_type() {
  type_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::hw::trezor::messages::management::RecoveryDevice_RecoveryDeviceType RecoveryDevice::_internal_type() const {
  return static_cast< ::hw::trezor::messages::management::RecoveryDevice_RecoveryDeviceType >(type_);
}
inline ::hw::trezor::messages::management::RecoveryDevice_RecoveryDeviceType RecoveryDevice::type() const {
  // @@protoc_insertion_point(field_get:hw.trezor.messages.management.RecoveryDevice.type)
  return _internal_type();
}
inline void RecoveryDevice::_internal_set_type(::hw::trezor::messages::management::RecoveryDevice_RecoveryDeviceType value) {
  assert(::hw::trezor::messages::management::RecoveryDevice_RecoveryDeviceType_IsValid(value));
  _has_bits_[0] |= 0x00000080u;
  type_ = value;
}
inline void RecoveryDevice::set_type(::hw::trezor::messages::management::RecoveryDevice_RecoveryDeviceType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:hw.trezor.messages.management.RecoveryDevice.type)
}

// optional uint32 u2f_counter = 9;
inline bool RecoveryDevice::_internal_has_u2f_counter() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool RecoveryDevice::has_u2f_counter() const {
  return _internal_has_u2f_counter();
}
inline void RecoveryDevice::clear_u2f_counter() {
  u2f_counter_ = 0u;
  _has_bits_[0] &= ~0x00000100u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RecoveryDevice::_internal_u2f_counter() const {
  return u2f_counter_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RecoveryDevice::u2f_counter() const {
  // @@protoc_insertion_point(field_get:hw.trezor.messages.management.RecoveryDevice.u2f_counter)
  return _internal_u2f_counter();
}
inline void RecoveryDevice::_internal_set_u2f_counter(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000100u;
  u2f_counter_ = value;
}
inline void RecoveryDevice::set_u2f_counter(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_u2f_counter(value);
  // @@protoc_insertion_point(field_set:hw.trezor.messages.management.RecoveryDevice.u2f_counter)
}

// optional bool dry_run = 10;
inline bool RecoveryDevice::_internal_has_dry_run() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool RecoveryDevice::has_dry_run() const {
  return _internal_has_dry_run();
}
inline void RecoveryDevice::clear_dry_run() {
  dry_run_ = false;
  _has_bits_[0] &= ~0x00000040u;
}
inline bool RecoveryDevice::_internal_dry_run() const {
  return dry_run_;
}
inline bool RecoveryDevice::dry_run() const {
  // @@protoc_insertion_point(field_get:hw.trezor.messages.management.RecoveryDevice.dry_run)
  return _internal_dry_run();
}
inline void RecoveryDevice::_internal_set_dry_run(bool value) {
  _has_bits_[0] |= 0x00000040u;
  dry_run_ = value;
}
inline void RecoveryDevice::set_dry_run(bool value) {
  _internal_set_dry_run(value);
  // @@protoc_insertion_point(field_set:hw.trezor.messages.management.RecoveryDevice.dry_run)
}

// -------------------------------------------------------------------

// WordRequest

// optional .hw.trezor.messages.management.WordRequest.WordRequestType type = 1;
inline bool WordRequest::_internal_has_type() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool WordRequest::has_type() const {
  return _internal_has_type();
}
inline void WordRequest::clear_type() {
  type_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::hw::trezor::messages::management::WordRequest_WordRequestType WordRequest::_internal_type() const {
  return static_cast< ::hw::trezor::messages::management::WordRequest_WordRequestType >(type_);
}
inline ::hw::trezor::messages::management::WordRequest_WordRequestType WordRequest::type() const {
  // @@protoc_insertion_point(field_get:hw.trezor.messages.management.WordRequest.type)
  return _internal_type();
}
inline void WordRequest::_internal_set_type(::hw::trezor::messages::management::WordRequest_WordRequestType value) {
  assert(::hw::trezor::messages::management::WordRequest_WordRequestType_IsValid(value));
  _has_bits_[0] |= 0x00000001u;
  type_ = value;
}
inline void WordRequest::set_type(::hw::trezor::messages::management::WordRequest_WordRequestType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:hw.trezor.messages.management.WordRequest.type)
}

// -------------------------------------------------------------------

// WordAck

// required string word = 1;
inline bool WordAck::_internal_has_word() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool WordAck::has_word() const {
  return _internal_has_word();
}
inline void WordAck::clear_word() {
  word_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& WordAck::word() const {
  // @@protoc_insertion_point(field_get:hw.trezor.messages.management.WordAck.word)
  return _internal_word();
}
inline void WordAck::set_word(const std::string& value) {
  _internal_set_word(value);
  // @@protoc_insertion_point(field_set:hw.trezor.messages.management.WordAck.word)
}
inline std::string* WordAck::mutable_word() {
  // @@protoc_insertion_point(field_mutable:hw.trezor.messages.management.WordAck.word)
  return _internal_mutable_word();
}
inline const std::string& WordAck::_internal_word() const {
  return word_.GetNoArena();
}
inline void WordAck::_internal_set_word(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  word_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void WordAck::set_word(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  word_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:hw.trezor.messages.management.WordAck.word)
}
inline void WordAck::set_word(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  word_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:hw.trezor.messages.management.WordAck.word)
}
inline void WordAck::set_word(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  word_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:hw.trezor.messages.management.WordAck.word)
}
inline std::string* WordAck::_internal_mutable_word() {
  _has_bits_[0] |= 0x00000001u;
  return word_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* WordAck::release_word() {
  // @@protoc_insertion_point(field_release:hw.trezor.messages.management.WordAck.word)
  if (!_internal_has_word()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return word_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void WordAck::set_allocated_word(std::string* word) {
  if (word != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  word_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), word);
  // @@protoc_insertion_point(field_set_allocated:hw.trezor.messages.management.WordAck.word)
}

// -------------------------------------------------------------------

// SetU2FCounter

// optional uint32 u2f_counter = 1;
inline bool SetU2FCounter::_internal_has_u2f_counter() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool SetU2FCounter::has_u2f_counter() const {
  return _internal_has_u2f_counter();
}
inline void SetU2FCounter::clear_u2f_counter() {
  u2f_counter_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SetU2FCounter::_internal_u2f_counter() const {
  return u2f_counter_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SetU2FCounter::u2f_counter() const {
  // @@protoc_insertion_point(field_get:hw.trezor.messages.management.SetU2FCounter.u2f_counter)
  return _internal_u2f_counter();
}
inline void SetU2FCounter::_internal_set_u2f_counter(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  u2f_counter_ = value;
}
inline void SetU2FCounter::set_u2f_counter(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_u2f_counter(value);
  // @@protoc_insertion_point(field_set:hw.trezor.messages.management.SetU2FCounter.u2f_counter)
}

// -------------------------------------------------------------------

// GetNextU2FCounter

// -------------------------------------------------------------------

// NextU2FCounter

// optional uint32 u2f_counter = 1;
inline bool NextU2FCounter::_internal_has_u2f_counter() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool NextU2FCounter::has_u2f_counter() const {
  return _internal_has_u2f_counter();
}
inline void NextU2FCounter::clear_u2f_counter() {
  u2f_counter_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 NextU2FCounter::_internal_u2f_counter() const {
  return u2f_counter_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 NextU2FCounter::u2f_counter() const {
  // @@protoc_insertion_point(field_get:hw.trezor.messages.management.NextU2FCounter.u2f_counter)
  return _internal_u2f_counter();
}
inline void NextU2FCounter::_internal_set_u2f_counter(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  u2f_counter_ = value;
}
inline void NextU2FCounter::set_u2f_counter(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_u2f_counter(value);
  // @@protoc_insertion_point(field_set:hw.trezor.messages.management.NextU2FCounter.u2f_counter)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace management
}  // namespace messages
}  // namespace trezor
}  // namespace hw

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::hw::trezor::messages::management::Features_Capability> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::hw::trezor::messages::management::Features_Capability>() {
  return ::hw::trezor::messages::management::Features_Capability_descriptor();
}
template <> struct is_proto_enum< ::hw::trezor::messages::management::SdProtect_SdProtectOperationType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::hw::trezor::messages::management::SdProtect_SdProtectOperationType>() {
  return ::hw::trezor::messages::management::SdProtect_SdProtectOperationType_descriptor();
}
template <> struct is_proto_enum< ::hw::trezor::messages::management::RecoveryDevice_RecoveryDeviceType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::hw::trezor::messages::management::RecoveryDevice_RecoveryDeviceType>() {
  return ::hw::trezor::messages::management::RecoveryDevice_RecoveryDeviceType_descriptor();
}
template <> struct is_proto_enum< ::hw::trezor::messages::management::WordRequest_WordRequestType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::hw::trezor::messages::management::WordRequest_WordRequestType>() {
  return ::hw::trezor::messages::management::WordRequest_WordRequestType_descriptor();
}
template <> struct is_proto_enum< ::hw::trezor::messages::management::BackupType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::hw::trezor::messages::management::BackupType>() {
  return ::hw::trezor::messages::management::BackupType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_messages_2dmanagement_2eproto
