// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: messages-management.proto

#include "messages-management.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

#ifdef minor
#undef minor
#endif
#include <google/protobuf/port_def.inc>
namespace hw {
namespace trezor {
namespace messages {
namespace management {
class InitializeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Initialize> _instance;
} _Initialize_default_instance_;
class GetFeaturesDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetFeatures> _instance;
} _GetFeatures_default_instance_;
class FeaturesDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Features> _instance;
} _Features_default_instance_;
class ClearSessionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ClearSession> _instance;
} _ClearSession_default_instance_;
class ApplySettingsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ApplySettings> _instance;
} _ApplySettings_default_instance_;
class ApplyFlagsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ApplyFlags> _instance;
} _ApplyFlags_default_instance_;
class ChangePinDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ChangePin> _instance;
} _ChangePin_default_instance_;
class ChangeWipeCodeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ChangeWipeCode> _instance;
} _ChangeWipeCode_default_instance_;
class SdProtectDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SdProtect> _instance;
} _SdProtect_default_instance_;
class PingDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Ping> _instance;
} _Ping_default_instance_;
class CancelDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Cancel> _instance;
} _Cancel_default_instance_;
class GetEntropyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetEntropy> _instance;
} _GetEntropy_default_instance_;
class EntropyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Entropy> _instance;
} _Entropy_default_instance_;
class WipeDeviceDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<WipeDevice> _instance;
} _WipeDevice_default_instance_;
class LoadDeviceDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LoadDevice> _instance;
} _LoadDevice_default_instance_;
class ResetDeviceDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ResetDevice> _instance;
} _ResetDevice_default_instance_;
class BackupDeviceDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BackupDevice> _instance;
} _BackupDevice_default_instance_;
class EntropyRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<EntropyRequest> _instance;
} _EntropyRequest_default_instance_;
class EntropyAckDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<EntropyAck> _instance;
} _EntropyAck_default_instance_;
class RecoveryDeviceDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RecoveryDevice> _instance;
} _RecoveryDevice_default_instance_;
class WordRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<WordRequest> _instance;
} _WordRequest_default_instance_;
class WordAckDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<WordAck> _instance;
} _WordAck_default_instance_;
class SetU2FCounterDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SetU2FCounter> _instance;
} _SetU2FCounter_default_instance_;
class GetNextU2FCounterDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetNextU2FCounter> _instance;
} _GetNextU2FCounter_default_instance_;
class NextU2FCounterDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<NextU2FCounter> _instance;
} _NextU2FCounter_default_instance_;
}  // namespace management
}  // namespace messages
}  // namespace trezor
}  // namespace hw
static void InitDefaultsscc_info_ApplyFlags_messages_2dmanagement_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hw::trezor::messages::management::_ApplyFlags_default_instance_;
    new (ptr) ::hw::trezor::messages::management::ApplyFlags();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hw::trezor::messages::management::ApplyFlags::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ApplyFlags_messages_2dmanagement_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ApplyFlags_messages_2dmanagement_2eproto}, {}};

static void InitDefaultsscc_info_ApplySettings_messages_2dmanagement_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hw::trezor::messages::management::_ApplySettings_default_instance_;
    new (ptr) ::hw::trezor::messages::management::ApplySettings();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hw::trezor::messages::management::ApplySettings::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ApplySettings_messages_2dmanagement_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ApplySettings_messages_2dmanagement_2eproto}, {}};

static void InitDefaultsscc_info_BackupDevice_messages_2dmanagement_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hw::trezor::messages::management::_BackupDevice_default_instance_;
    new (ptr) ::hw::trezor::messages::management::BackupDevice();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hw::trezor::messages::management::BackupDevice::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BackupDevice_messages_2dmanagement_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_BackupDevice_messages_2dmanagement_2eproto}, {}};

static void InitDefaultsscc_info_Cancel_messages_2dmanagement_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hw::trezor::messages::management::_Cancel_default_instance_;
    new (ptr) ::hw::trezor::messages::management::Cancel();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hw::trezor::messages::management::Cancel::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Cancel_messages_2dmanagement_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Cancel_messages_2dmanagement_2eproto}, {}};

static void InitDefaultsscc_info_ChangePin_messages_2dmanagement_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hw::trezor::messages::management::_ChangePin_default_instance_;
    new (ptr) ::hw::trezor::messages::management::ChangePin();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hw::trezor::messages::management::ChangePin::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ChangePin_messages_2dmanagement_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ChangePin_messages_2dmanagement_2eproto}, {}};

static void InitDefaultsscc_info_ChangeWipeCode_messages_2dmanagement_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hw::trezor::messages::management::_ChangeWipeCode_default_instance_;
    new (ptr) ::hw::trezor::messages::management::ChangeWipeCode();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hw::trezor::messages::management::ChangeWipeCode::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ChangeWipeCode_messages_2dmanagement_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ChangeWipeCode_messages_2dmanagement_2eproto}, {}};

static void InitDefaultsscc_info_ClearSession_messages_2dmanagement_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hw::trezor::messages::management::_ClearSession_default_instance_;
    new (ptr) ::hw::trezor::messages::management::ClearSession();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hw::trezor::messages::management::ClearSession::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ClearSession_messages_2dmanagement_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ClearSession_messages_2dmanagement_2eproto}, {}};

static void InitDefaultsscc_info_Entropy_messages_2dmanagement_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hw::trezor::messages::management::_Entropy_default_instance_;
    new (ptr) ::hw::trezor::messages::management::Entropy();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hw::trezor::messages::management::Entropy::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Entropy_messages_2dmanagement_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Entropy_messages_2dmanagement_2eproto}, {}};

static void InitDefaultsscc_info_EntropyAck_messages_2dmanagement_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hw::trezor::messages::management::_EntropyAck_default_instance_;
    new (ptr) ::hw::trezor::messages::management::EntropyAck();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hw::trezor::messages::management::EntropyAck::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_EntropyAck_messages_2dmanagement_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_EntropyAck_messages_2dmanagement_2eproto}, {}};

static void InitDefaultsscc_info_EntropyRequest_messages_2dmanagement_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hw::trezor::messages::management::_EntropyRequest_default_instance_;
    new (ptr) ::hw::trezor::messages::management::EntropyRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hw::trezor::messages::management::EntropyRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_EntropyRequest_messages_2dmanagement_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_EntropyRequest_messages_2dmanagement_2eproto}, {}};

static void InitDefaultsscc_info_Features_messages_2dmanagement_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hw::trezor::messages::management::_Features_default_instance_;
    new (ptr) ::hw::trezor::messages::management::Features();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hw::trezor::messages::management::Features::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Features_messages_2dmanagement_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Features_messages_2dmanagement_2eproto}, {}};

static void InitDefaultsscc_info_GetEntropy_messages_2dmanagement_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hw::trezor::messages::management::_GetEntropy_default_instance_;
    new (ptr) ::hw::trezor::messages::management::GetEntropy();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hw::trezor::messages::management::GetEntropy::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetEntropy_messages_2dmanagement_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GetEntropy_messages_2dmanagement_2eproto}, {}};

static void InitDefaultsscc_info_GetFeatures_messages_2dmanagement_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hw::trezor::messages::management::_GetFeatures_default_instance_;
    new (ptr) ::hw::trezor::messages::management::GetFeatures();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hw::trezor::messages::management::GetFeatures::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetFeatures_messages_2dmanagement_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GetFeatures_messages_2dmanagement_2eproto}, {}};

static void InitDefaultsscc_info_GetNextU2FCounter_messages_2dmanagement_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hw::trezor::messages::management::_GetNextU2FCounter_default_instance_;
    new (ptr) ::hw::trezor::messages::management::GetNextU2FCounter();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hw::trezor::messages::management::GetNextU2FCounter::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetNextU2FCounter_messages_2dmanagement_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GetNextU2FCounter_messages_2dmanagement_2eproto}, {}};

static void InitDefaultsscc_info_Initialize_messages_2dmanagement_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hw::trezor::messages::management::_Initialize_default_instance_;
    new (ptr) ::hw::trezor::messages::management::Initialize();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hw::trezor::messages::management::Initialize::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Initialize_messages_2dmanagement_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Initialize_messages_2dmanagement_2eproto}, {}};

static void InitDefaultsscc_info_LoadDevice_messages_2dmanagement_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::hw::trezor::messages::management::LoadDevice::_i_give_permission_to_break_this_code_default_language_.DefaultConstruct();
  *::hw::trezor::messages::management::LoadDevice::_i_give_permission_to_break_this_code_default_language_.get_mutable() = std::string("en-US", 5);
  ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyString(
      ::hw::trezor::messages::management::LoadDevice::_i_give_permission_to_break_this_code_default_language_.get_mutable());
  {
    void* ptr = &::hw::trezor::messages::management::_LoadDevice_default_instance_;
    new (ptr) ::hw::trezor::messages::management::LoadDevice();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hw::trezor::messages::management::LoadDevice::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LoadDevice_messages_2dmanagement_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_LoadDevice_messages_2dmanagement_2eproto}, {}};

static void InitDefaultsscc_info_NextU2FCounter_messages_2dmanagement_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hw::trezor::messages::management::_NextU2FCounter_default_instance_;
    new (ptr) ::hw::trezor::messages::management::NextU2FCounter();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hw::trezor::messages::management::NextU2FCounter::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_NextU2FCounter_messages_2dmanagement_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_NextU2FCounter_messages_2dmanagement_2eproto}, {}};

static void InitDefaultsscc_info_Ping_messages_2dmanagement_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hw::trezor::messages::management::_Ping_default_instance_;
    new (ptr) ::hw::trezor::messages::management::Ping();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hw::trezor::messages::management::Ping::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Ping_messages_2dmanagement_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Ping_messages_2dmanagement_2eproto}, {}};

static void InitDefaultsscc_info_RecoveryDevice_messages_2dmanagement_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::hw::trezor::messages::management::RecoveryDevice::_i_give_permission_to_break_this_code_default_language_.DefaultConstruct();
  *::hw::trezor::messages::management::RecoveryDevice::_i_give_permission_to_break_this_code_default_language_.get_mutable() = std::string("en-US", 5);
  ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyString(
      ::hw::trezor::messages::management::RecoveryDevice::_i_give_permission_to_break_this_code_default_language_.get_mutable());
  {
    void* ptr = &::hw::trezor::messages::management::_RecoveryDevice_default_instance_;
    new (ptr) ::hw::trezor::messages::management::RecoveryDevice();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hw::trezor::messages::management::RecoveryDevice::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RecoveryDevice_messages_2dmanagement_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RecoveryDevice_messages_2dmanagement_2eproto}, {}};

static void InitDefaultsscc_info_ResetDevice_messages_2dmanagement_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::hw::trezor::messages::management::ResetDevice::_i_give_permission_to_break_this_code_default_language_.DefaultConstruct();
  *::hw::trezor::messages::management::ResetDevice::_i_give_permission_to_break_this_code_default_language_.get_mutable() = std::string("en-US", 5);
  ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyString(
      ::hw::trezor::messages::management::ResetDevice::_i_give_permission_to_break_this_code_default_language_.get_mutable());
  {
    void* ptr = &::hw::trezor::messages::management::_ResetDevice_default_instance_;
    new (ptr) ::hw::trezor::messages::management::ResetDevice();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hw::trezor::messages::management::ResetDevice::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ResetDevice_messages_2dmanagement_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ResetDevice_messages_2dmanagement_2eproto}, {}};

static void InitDefaultsscc_info_SdProtect_messages_2dmanagement_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hw::trezor::messages::management::_SdProtect_default_instance_;
    new (ptr) ::hw::trezor::messages::management::SdProtect();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hw::trezor::messages::management::SdProtect::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SdProtect_messages_2dmanagement_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SdProtect_messages_2dmanagement_2eproto}, {}};

static void InitDefaultsscc_info_SetU2FCounter_messages_2dmanagement_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hw::trezor::messages::management::_SetU2FCounter_default_instance_;
    new (ptr) ::hw::trezor::messages::management::SetU2FCounter();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hw::trezor::messages::management::SetU2FCounter::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SetU2FCounter_messages_2dmanagement_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SetU2FCounter_messages_2dmanagement_2eproto}, {}};

static void InitDefaultsscc_info_WipeDevice_messages_2dmanagement_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hw::trezor::messages::management::_WipeDevice_default_instance_;
    new (ptr) ::hw::trezor::messages::management::WipeDevice();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hw::trezor::messages::management::WipeDevice::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_WipeDevice_messages_2dmanagement_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_WipeDevice_messages_2dmanagement_2eproto}, {}};

static void InitDefaultsscc_info_WordAck_messages_2dmanagement_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hw::trezor::messages::management::_WordAck_default_instance_;
    new (ptr) ::hw::trezor::messages::management::WordAck();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hw::trezor::messages::management::WordAck::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_WordAck_messages_2dmanagement_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_WordAck_messages_2dmanagement_2eproto}, {}};

static void InitDefaultsscc_info_WordRequest_messages_2dmanagement_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hw::trezor::messages::management::_WordRequest_default_instance_;
    new (ptr) ::hw::trezor::messages::management::WordRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hw::trezor::messages::management::WordRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_WordRequest_messages_2dmanagement_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_WordRequest_messages_2dmanagement_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_messages_2dmanagement_2eproto[25];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_messages_2dmanagement_2eproto[5];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_messages_2dmanagement_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_messages_2dmanagement_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::management::Initialize, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::management::Initialize, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::management::Initialize, session_id_),
  0,
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::management::GetFeatures, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::management::GetFeatures, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::management::Features, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::management::Features, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::management::Features, vendor_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::management::Features, major_version_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::management::Features, minor_version_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::management::Features, patch_version_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::management::Features, bootloader_mode_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::management::Features, device_id_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::management::Features, pin_protection_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::management::Features, passphrase_protection_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::management::Features, language_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::management::Features, label_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::management::Features, initialized_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::management::Features, revision_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::management::Features, bootloader_hash_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::management::Features, imported_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::management::Features, pin_cached_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::management::Features, firmware_present_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::management::Features, needs_backup_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::management::Features, flags_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::management::Features, model_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::management::Features, fw_major_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::management::Features, fw_minor_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::management::Features, fw_patch_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::management::Features, fw_vendor_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::management::Features, fw_vendor_keys_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::management::Features, unfinished_backup_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::management::Features, no_backup_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::management::Features, recovery_mode_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::management::Features, capabilities_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::management::Features, backup_type_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::management::Features, sd_card_present_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::management::Features, sd_protection_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::management::Features, wipe_code_protection_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::management::Features, session_id_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::management::Features, passphrase_always_on_device_),
  0,
  10,
  11,
  12,
  13,
  1,
  14,
  15,
  2,
  3,
  16,
  4,
  5,
  17,
  18,
  19,
  20,
  21,
  6,
  22,
  23,
  24,
  7,
  8,
  25,
  26,
  27,
  ~0u,
  29,
  28,
  30,
  31,
  9,
  32,
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::management::ClearSession, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::management::ClearSession, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::management::ApplySettings, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::management::ApplySettings, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::management::ApplySettings, language_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::management::ApplySettings, label_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::management::ApplySettings, use_passphrase_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::management::ApplySettings, homescreen_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::management::ApplySettings, auto_lock_delay_ms_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::management::ApplySettings, display_rotation_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::management::ApplySettings, passphrase_always_on_device_),
  0,
  1,
  3,
  2,
  5,
  6,
  4,
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::management::ApplyFlags, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::management::ApplyFlags, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::management::ApplyFlags, flags_),
  0,
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::management::ChangePin, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::management::ChangePin, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::management::ChangePin, remove_),
  0,
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::management::ChangeWipeCode, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::management::ChangeWipeCode, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::management::ChangeWipeCode, remove_),
  0,
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::management::SdProtect, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::management::SdProtect, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::management::SdProtect, operation_),
  0,
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::management::Ping, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::management::Ping, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::management::Ping, message_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::management::Ping, button_protection_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::management::Cancel, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::management::Cancel, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::management::GetEntropy, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::management::GetEntropy, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::management::GetEntropy, size_),
  0,
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::management::Entropy, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::management::Entropy, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::management::Entropy, entropy_),
  0,
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::management::WipeDevice, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::management::WipeDevice, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::management::LoadDevice, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::management::LoadDevice, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::management::LoadDevice, mnemonics_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::management::LoadDevice, pin_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::management::LoadDevice, passphrase_protection_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::management::LoadDevice, language_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::management::LoadDevice, label_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::management::LoadDevice, skip_checksum_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::management::LoadDevice, u2f_counter_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::management::LoadDevice, needs_backup_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::management::LoadDevice, no_backup_),
  ~0u,
  0,
  3,
  1,
  2,
  4,
  7,
  5,
  6,
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::management::ResetDevice, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::management::ResetDevice, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::management::ResetDevice, display_random_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::management::ResetDevice, strength_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::management::ResetDevice, passphrase_protection_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::management::ResetDevice, pin_protection_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::management::ResetDevice, language_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::management::ResetDevice, label_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::management::ResetDevice, u2f_counter_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::management::ResetDevice, skip_backup_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::management::ResetDevice, no_backup_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::management::ResetDevice, backup_type_),
  2,
  9,
  3,
  4,
  0,
  1,
  6,
  5,
  7,
  8,
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::management::BackupDevice, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::management::BackupDevice, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::management::EntropyRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::management::EntropyRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::management::EntropyAck, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::management::EntropyAck, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::management::EntropyAck, entropy_),
  0,
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::management::RecoveryDevice, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::management::RecoveryDevice, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::management::RecoveryDevice, word_count_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::management::RecoveryDevice, passphrase_protection_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::management::RecoveryDevice, pin_protection_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::management::RecoveryDevice, language_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::management::RecoveryDevice, label_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::management::RecoveryDevice, enforce_wordlist_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::management::RecoveryDevice, type_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::management::RecoveryDevice, u2f_counter_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::management::RecoveryDevice, dry_run_),
  2,
  3,
  4,
  0,
  1,
  5,
  7,
  8,
  6,
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::management::WordRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::management::WordRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::management::WordRequest, type_),
  0,
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::management::WordAck, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::management::WordAck, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::management::WordAck, word_),
  0,
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::management::SetU2FCounter, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::management::SetU2FCounter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::management::SetU2FCounter, u2f_counter_),
  0,
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::management::GetNextU2FCounter, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::management::GetNextU2FCounter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::management::NextU2FCounter, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::management::NextU2FCounter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::management::NextU2FCounter, u2f_counter_),
  0,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 6, sizeof(::hw::trezor::messages::management::Initialize)},
  { 7, 12, sizeof(::hw::trezor::messages::management::GetFeatures)},
  { 12, 51, sizeof(::hw::trezor::messages::management::Features)},
  { 85, 90, sizeof(::hw::trezor::messages::management::ClearSession)},
  { 90, 102, sizeof(::hw::trezor::messages::management::ApplySettings)},
  { 109, 115, sizeof(::hw::trezor::messages::management::ApplyFlags)},
  { 116, 122, sizeof(::hw::trezor::messages::management::ChangePin)},
  { 123, 129, sizeof(::hw::trezor::messages::management::ChangeWipeCode)},
  { 130, 136, sizeof(::hw::trezor::messages::management::SdProtect)},
  { 137, 144, sizeof(::hw::trezor::messages::management::Ping)},
  { 146, 151, sizeof(::hw::trezor::messages::management::Cancel)},
  { 151, 157, sizeof(::hw::trezor::messages::management::GetEntropy)},
  { 158, 164, sizeof(::hw::trezor::messages::management::Entropy)},
  { 165, 170, sizeof(::hw::trezor::messages::management::WipeDevice)},
  { 170, 184, sizeof(::hw::trezor::messages::management::LoadDevice)},
  { 193, 208, sizeof(::hw::trezor::messages::management::ResetDevice)},
  { 218, 223, sizeof(::hw::trezor::messages::management::BackupDevice)},
  { 223, 228, sizeof(::hw::trezor::messages::management::EntropyRequest)},
  { 228, 234, sizeof(::hw::trezor::messages::management::EntropyAck)},
  { 235, 249, sizeof(::hw::trezor::messages::management::RecoveryDevice)},
  { 258, 264, sizeof(::hw::trezor::messages::management::WordRequest)},
  { 265, 271, sizeof(::hw::trezor::messages::management::WordAck)},
  { 272, 278, sizeof(::hw::trezor::messages::management::SetU2FCounter)},
  { 279, 284, sizeof(::hw::trezor::messages::management::GetNextU2FCounter)},
  { 284, 290, sizeof(::hw::trezor::messages::management::NextU2FCounter)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hw::trezor::messages::management::_Initialize_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hw::trezor::messages::management::_GetFeatures_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hw::trezor::messages::management::_Features_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hw::trezor::messages::management::_ClearSession_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hw::trezor::messages::management::_ApplySettings_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hw::trezor::messages::management::_ApplyFlags_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hw::trezor::messages::management::_ChangePin_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hw::trezor::messages::management::_ChangeWipeCode_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hw::trezor::messages::management::_SdProtect_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hw::trezor::messages::management::_Ping_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hw::trezor::messages::management::_Cancel_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hw::trezor::messages::management::_GetEntropy_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hw::trezor::messages::management::_Entropy_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hw::trezor::messages::management::_WipeDevice_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hw::trezor::messages::management::_LoadDevice_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hw::trezor::messages::management::_ResetDevice_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hw::trezor::messages::management::_BackupDevice_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hw::trezor::messages::management::_EntropyRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hw::trezor::messages::management::_EntropyAck_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hw::trezor::messages::management::_RecoveryDevice_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hw::trezor::messages::management::_WordRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hw::trezor::messages::management::_WordAck_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hw::trezor::messages::management::_SetU2FCounter_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hw::trezor::messages::management::_GetNextU2FCounter_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hw::trezor::messages::management::_NextU2FCounter_default_instance_),
};

const char descriptor_table_protodef_messages_2dmanagement_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\031messages-management.proto\022\035hw.trezor.m"
  "essages.management\" \n\nInitialize\022\022\n\nsess"
  "ion_id\030\001 \001(\014\"\r\n\013GetFeatures\"\363\t\n\010Features"
  "\022\016\n\006vendor\030\001 \001(\t\022\025\n\rmajor_version\030\002 \001(\r\022"
  "\025\n\rminor_version\030\003 \001(\r\022\025\n\rpatch_version\030"
  "\004 \001(\r\022\027\n\017bootloader_mode\030\005 \001(\010\022\021\n\tdevice"
  "_id\030\006 \001(\t\022\026\n\016pin_protection\030\007 \001(\010\022\035\n\025pas"
  "sphrase_protection\030\010 \001(\010\022\020\n\010language\030\t \001"
  "(\t\022\r\n\005label\030\n \001(\t\022\023\n\013initialized\030\014 \001(\010\022\020"
  "\n\010revision\030\r \001(\014\022\027\n\017bootloader_hash\030\016 \001("
  "\014\022\020\n\010imported\030\017 \001(\010\022\022\n\npin_cached\030\020 \001(\010\022"
  "\030\n\020firmware_present\030\022 \001(\010\022\024\n\014needs_backu"
  "p\030\023 \001(\010\022\r\n\005flags\030\024 \001(\r\022\r\n\005model\030\025 \001(\t\022\020\n"
  "\010fw_major\030\026 \001(\r\022\020\n\010fw_minor\030\027 \001(\r\022\020\n\010fw_"
  "patch\030\030 \001(\r\022\021\n\tfw_vendor\030\031 \001(\t\022\026\n\016fw_ven"
  "dor_keys\030\032 \001(\014\022\031\n\021unfinished_backup\030\033 \001("
  "\010\022\021\n\tno_backup\030\034 \001(\010\022\025\n\rrecovery_mode\030\035 "
  "\001(\010\022H\n\014capabilities\030\036 \003(\01622.hw.trezor.me"
  "ssages.management.Features.Capability\022>\n"
  "\013backup_type\030\037 \001(\0162).hw.trezor.messages."
  "management.BackupType\022\027\n\017sd_card_present"
  "\030  \001(\010\022\025\n\rsd_protection\030! \001(\010\022\034\n\024wipe_co"
  "de_protection\030\" \001(\010\022\022\n\nsession_id\030# \001(\014\022"
  "#\n\033passphrase_always_on_device\030$ \001(\010\"\242\003\n"
  "\nCapability\022\026\n\022Capability_Bitcoin\020\001\022\033\n\027C"
  "apability_Bitcoin_like\020\002\022\026\n\022Capability_B"
  "inance\020\003\022\026\n\022Capability_Cardano\020\004\022\025\n\021Capa"
  "bility_Crypto\020\005\022\022\n\016Capability_EOS\020\006\022\027\n\023C"
  "apability_Ethereum\020\007\022\023\n\017Capability_Lisk\020"
  "\010\022\025\n\021Capability_Monero\020\t\022\022\n\016Capability_N"
  "EM\020\n\022\025\n\021Capability_Ripple\020\013\022\026\n\022Capabilit"
  "y_Stellar\020\014\022\024\n\020Capability_Tezos\020\r\022\022\n\016Cap"
  "ability_U2F\020\016\022\025\n\021Capability_Shamir\020\017\022\033\n\027"
  "Capability_ShamirGroups\020\020\022\036\n\032Capability_"
  "PassphraseEntry\020\021\"\016\n\014ClearSession\"\267\001\n\rAp"
  "plySettings\022\020\n\010language\030\001 \001(\t\022\r\n\005label\030\002"
  " \001(\t\022\026\n\016use_passphrase\030\003 \001(\010\022\022\n\nhomescre"
  "en\030\004 \001(\014\022\032\n\022auto_lock_delay_ms\030\006 \001(\r\022\030\n\020"
  "display_rotation\030\007 \001(\r\022#\n\033passphrase_alw"
  "ays_on_device\030\010 \001(\010\"\033\n\nApplyFlags\022\r\n\005fla"
  "gs\030\001 \001(\r\"\033\n\tChangePin\022\016\n\006remove\030\001 \001(\010\" \n"
  "\016ChangeWipeCode\022\016\n\006remove\030\001 \001(\010\"\237\001\n\tSdPr"
  "otect\022R\n\toperation\030\001 \001(\0162\?.hw.trezor.mes"
  "sages.management.SdProtect.SdProtectOper"
  "ationType\">\n\026SdProtectOperationType\022\013\n\007D"
  "ISABLE\020\000\022\n\n\006ENABLE\020\001\022\013\n\007REFRESH\020\002\"2\n\004Pin"
  "g\022\017\n\007message\030\001 \001(\t\022\031\n\021button_protection\030"
  "\002 \001(\010\"\010\n\006Cancel\"\032\n\nGetEntropy\022\014\n\004size\030\001 "
  "\002(\r\"\032\n\007Entropy\022\017\n\007entropy\030\001 \002(\014\"\014\n\nWipeD"
  "evice\"\310\001\n\nLoadDevice\022\021\n\tmnemonics\030\001 \003(\t\022"
  "\013\n\003pin\030\003 \001(\t\022\035\n\025passphrase_protection\030\004 "
  "\001(\010\022\027\n\010language\030\005 \001(\t:\005en-US\022\r\n\005label\030\006 "
  "\001(\t\022\025\n\rskip_checksum\030\007 \001(\010\022\023\n\013u2f_counte"
  "r\030\010 \001(\r\022\024\n\014needs_backup\030\t \001(\010\022\021\n\tno_back"
  "up\030\n \001(\010\"\237\002\n\013ResetDevice\022\026\n\016display_rand"
  "om\030\001 \001(\010\022\025\n\010strength\030\002 \001(\r:\003256\022\035\n\025passp"
  "hrase_protection\030\003 \001(\010\022\026\n\016pin_protection"
  "\030\004 \001(\010\022\027\n\010language\030\005 \001(\t:\005en-US\022\r\n\005label"
  "\030\006 \001(\t\022\023\n\013u2f_counter\030\007 \001(\r\022\023\n\013skip_back"
  "up\030\010 \001(\010\022\021\n\tno_backup\030\t \001(\010\022E\n\013backup_ty"
  "pe\030\n \001(\0162).hw.trezor.messages.management"
  ".BackupType:\005Bip39\"\016\n\014BackupDevice\"\020\n\016En"
  "tropyRequest\"\035\n\nEntropyAck\022\017\n\007entropy\030\001 "
  "\001(\014\"\357\002\n\016RecoveryDevice\022\022\n\nword_count\030\001 \001"
  "(\r\022\035\n\025passphrase_protection\030\002 \001(\010\022\026\n\016pin"
  "_protection\030\003 \001(\010\022\027\n\010language\030\004 \001(\t:\005en-"
  "US\022\r\n\005label\030\005 \001(\t\022\030\n\020enforce_wordlist\030\006 "
  "\001(\010\022N\n\004type\030\010 \001(\0162@.hw.trezor.messages.m"
  "anagement.RecoveryDevice.RecoveryDeviceT"
  "ype\022\023\n\013u2f_counter\030\t \001(\r\022\017\n\007dry_run\030\n \001("
  "\010\"Z\n\022RecoveryDeviceType\022%\n!RecoveryDevic"
  "eType_ScrambledWords\020\000\022\035\n\031RecoveryDevice"
  "Type_Matrix\020\001\"\277\001\n\013WordRequest\022H\n\004type\030\001 "
  "\001(\0162:.hw.trezor.messages.management.Word"
  "Request.WordRequestType\"f\n\017WordRequestTy"
  "pe\022\031\n\025WordRequestType_Plain\020\000\022\033\n\027WordReq"
  "uestType_Matrix9\020\001\022\033\n\027WordRequestType_Ma"
  "trix6\020\002\"\027\n\007WordAck\022\014\n\004word\030\001 \002(\t\"$\n\rSetU"
  "2FCounter\022\023\n\013u2f_counter\030\001 \001(\r\"\023\n\021GetNex"
  "tU2FCounter\"%\n\016NextU2FCounter\022\023\n\013u2f_cou"
  "nter\030\001 \001(\r*>\n\nBackupType\022\t\n\005Bip39\020\000\022\020\n\014S"
  "lip39_Basic\020\001\022\023\n\017Slip39_Advanced\020\002B>\n#co"
  "m.satoshilabs.trezor.lib.protobufB\027Trezo"
  "rMessageManagement"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_messages_2dmanagement_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_messages_2dmanagement_2eproto_sccs[25] = {
  &scc_info_ApplyFlags_messages_2dmanagement_2eproto.base,
  &scc_info_ApplySettings_messages_2dmanagement_2eproto.base,
  &scc_info_BackupDevice_messages_2dmanagement_2eproto.base,
  &scc_info_Cancel_messages_2dmanagement_2eproto.base,
  &scc_info_ChangePin_messages_2dmanagement_2eproto.base,
  &scc_info_ChangeWipeCode_messages_2dmanagement_2eproto.base,
  &scc_info_ClearSession_messages_2dmanagement_2eproto.base,
  &scc_info_Entropy_messages_2dmanagement_2eproto.base,
  &scc_info_EntropyAck_messages_2dmanagement_2eproto.base,
  &scc_info_EntropyRequest_messages_2dmanagement_2eproto.base,
  &scc_info_Features_messages_2dmanagement_2eproto.base,
  &scc_info_GetEntropy_messages_2dmanagement_2eproto.base,
  &scc_info_GetFeatures_messages_2dmanagement_2eproto.base,
  &scc_info_GetNextU2FCounter_messages_2dmanagement_2eproto.base,
  &scc_info_Initialize_messages_2dmanagement_2eproto.base,
  &scc_info_LoadDevice_messages_2dmanagement_2eproto.base,
  &scc_info_NextU2FCounter_messages_2dmanagement_2eproto.base,
  &scc_info_Ping_messages_2dmanagement_2eproto.base,
  &scc_info_RecoveryDevice_messages_2dmanagement_2eproto.base,
  &scc_info_ResetDevice_messages_2dmanagement_2eproto.base,
  &scc_info_SdProtect_messages_2dmanagement_2eproto.base,
  &scc_info_SetU2FCounter_messages_2dmanagement_2eproto.base,
  &scc_info_WipeDevice_messages_2dmanagement_2eproto.base,
  &scc_info_WordAck_messages_2dmanagement_2eproto.base,
  &scc_info_WordRequest_messages_2dmanagement_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_messages_2dmanagement_2eproto_once;
static bool descriptor_table_messages_2dmanagement_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_messages_2dmanagement_2eproto = {
  &descriptor_table_messages_2dmanagement_2eproto_initialized, descriptor_table_protodef_messages_2dmanagement_2eproto, "messages-management.proto", 3338,
  &descriptor_table_messages_2dmanagement_2eproto_once, descriptor_table_messages_2dmanagement_2eproto_sccs, descriptor_table_messages_2dmanagement_2eproto_deps, 25, 0,
  schemas, file_default_instances, TableStruct_messages_2dmanagement_2eproto::offsets,
  file_level_metadata_messages_2dmanagement_2eproto, 25, file_level_enum_descriptors_messages_2dmanagement_2eproto, file_level_service_descriptors_messages_2dmanagement_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_messages_2dmanagement_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_messages_2dmanagement_2eproto), true);
namespace hw {
namespace trezor {
namespace messages {
namespace management {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Features_Capability_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_messages_2dmanagement_2eproto);
  return file_level_enum_descriptors_messages_2dmanagement_2eproto[0];
}
bool Features_Capability_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Features_Capability Features::Capability_Bitcoin;
constexpr Features_Capability Features::Capability_Bitcoin_like;
constexpr Features_Capability Features::Capability_Binance;
constexpr Features_Capability Features::Capability_Cardano;
constexpr Features_Capability Features::Capability_Crypto;
constexpr Features_Capability Features::Capability_EOS;
constexpr Features_Capability Features::Capability_Ethereum;
constexpr Features_Capability Features::Capability_Lisk;
constexpr Features_Capability Features::Capability_Monero;
constexpr Features_Capability Features::Capability_NEM;
constexpr Features_Capability Features::Capability_Ripple;
constexpr Features_Capability Features::Capability_Stellar;
constexpr Features_Capability Features::Capability_Tezos;
constexpr Features_Capability Features::Capability_U2F;
constexpr Features_Capability Features::Capability_Shamir;
constexpr Features_Capability Features::Capability_ShamirGroups;
constexpr Features_Capability Features::Capability_PassphraseEntry;
constexpr Features_Capability Features::Capability_MIN;
constexpr Features_Capability Features::Capability_MAX;
constexpr int Features::Capability_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SdProtect_SdProtectOperationType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_messages_2dmanagement_2eproto);
  return file_level_enum_descriptors_messages_2dmanagement_2eproto[1];
}
bool SdProtect_SdProtectOperationType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr SdProtect_SdProtectOperationType SdProtect::DISABLE;
constexpr SdProtect_SdProtectOperationType SdProtect::ENABLE;
constexpr SdProtect_SdProtectOperationType SdProtect::REFRESH;
constexpr SdProtect_SdProtectOperationType SdProtect::SdProtectOperationType_MIN;
constexpr SdProtect_SdProtectOperationType SdProtect::SdProtectOperationType_MAX;
constexpr int SdProtect::SdProtectOperationType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RecoveryDevice_RecoveryDeviceType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_messages_2dmanagement_2eproto);
  return file_level_enum_descriptors_messages_2dmanagement_2eproto[2];
}
bool RecoveryDevice_RecoveryDeviceType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr RecoveryDevice_RecoveryDeviceType RecoveryDevice::RecoveryDeviceType_ScrambledWords;
constexpr RecoveryDevice_RecoveryDeviceType RecoveryDevice::RecoveryDeviceType_Matrix;
constexpr RecoveryDevice_RecoveryDeviceType RecoveryDevice::RecoveryDeviceType_MIN;
constexpr RecoveryDevice_RecoveryDeviceType RecoveryDevice::RecoveryDeviceType_MAX;
constexpr int RecoveryDevice::RecoveryDeviceType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* WordRequest_WordRequestType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_messages_2dmanagement_2eproto);
  return file_level_enum_descriptors_messages_2dmanagement_2eproto[3];
}
bool WordRequest_WordRequestType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr WordRequest_WordRequestType WordRequest::WordRequestType_Plain;
constexpr WordRequest_WordRequestType WordRequest::WordRequestType_Matrix9;
constexpr WordRequest_WordRequestType WordRequest::WordRequestType_Matrix6;
constexpr WordRequest_WordRequestType WordRequest::WordRequestType_MIN;
constexpr WordRequest_WordRequestType WordRequest::WordRequestType_MAX;
constexpr int WordRequest::WordRequestType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* BackupType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_messages_2dmanagement_2eproto);
  return file_level_enum_descriptors_messages_2dmanagement_2eproto[4];
}
bool BackupType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void Initialize::InitAsDefaultInstance() {
}
class Initialize::_Internal {
 public:
  using HasBits = decltype(std::declval<Initialize>()._has_bits_);
  static void set_has_session_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

Initialize::Initialize()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hw.trezor.messages.management.Initialize)
}
Initialize::Initialize(const Initialize& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  session_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_session_id()) {
    session_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.session_id_);
  }
  // @@protoc_insertion_point(copy_constructor:hw.trezor.messages.management.Initialize)
}

void Initialize::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Initialize_messages_2dmanagement_2eproto.base);
  session_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

Initialize::~Initialize() {
  // @@protoc_insertion_point(destructor:hw.trezor.messages.management.Initialize)
  SharedDtor();
}

void Initialize::SharedDtor() {
  session_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Initialize::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Initialize& Initialize::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Initialize_messages_2dmanagement_2eproto.base);
  return *internal_default_instance();
}


void Initialize::Clear() {
// @@protoc_insertion_point(message_clear_start:hw.trezor.messages.management.Initialize)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    session_id_.ClearNonDefaultToEmptyNoArena();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* Initialize::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bytes session_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_session_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Initialize::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hw.trezor.messages.management.Initialize)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes session_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_session_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hw.trezor.messages.management.Initialize)
  return target;
}

size_t Initialize::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hw.trezor.messages.management.Initialize)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bytes session_id = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_session_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Initialize::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hw.trezor.messages.management.Initialize)
  GOOGLE_DCHECK_NE(&from, this);
  const Initialize* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Initialize>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hw.trezor.messages.management.Initialize)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hw.trezor.messages.management.Initialize)
    MergeFrom(*source);
  }
}

void Initialize::MergeFrom(const Initialize& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hw.trezor.messages.management.Initialize)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_session_id()) {
    _has_bits_[0] |= 0x00000001u;
    session_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.session_id_);
  }
}

void Initialize::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hw.trezor.messages.management.Initialize)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Initialize::CopyFrom(const Initialize& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hw.trezor.messages.management.Initialize)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Initialize::IsInitialized() const {
  return true;
}

void Initialize::InternalSwap(Initialize* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  session_id_.Swap(&other->session_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata Initialize::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetFeatures::InitAsDefaultInstance() {
}
class GetFeatures::_Internal {
 public:
  using HasBits = decltype(std::declval<GetFeatures>()._has_bits_);
};

GetFeatures::GetFeatures()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hw.trezor.messages.management.GetFeatures)
}
GetFeatures::GetFeatures(const GetFeatures& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:hw.trezor.messages.management.GetFeatures)
}

void GetFeatures::SharedCtor() {
}

GetFeatures::~GetFeatures() {
  // @@protoc_insertion_point(destructor:hw.trezor.messages.management.GetFeatures)
  SharedDtor();
}

void GetFeatures::SharedDtor() {
}

void GetFeatures::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetFeatures& GetFeatures::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetFeatures_messages_2dmanagement_2eproto.base);
  return *internal_default_instance();
}


void GetFeatures::Clear() {
// @@protoc_insertion_point(message_clear_start:hw.trezor.messages.management.GetFeatures)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* GetFeatures::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetFeatures::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hw.trezor.messages.management.GetFeatures)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hw.trezor.messages.management.GetFeatures)
  return target;
}

size_t GetFeatures::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hw.trezor.messages.management.GetFeatures)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetFeatures::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hw.trezor.messages.management.GetFeatures)
  GOOGLE_DCHECK_NE(&from, this);
  const GetFeatures* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetFeatures>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hw.trezor.messages.management.GetFeatures)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hw.trezor.messages.management.GetFeatures)
    MergeFrom(*source);
  }
}

void GetFeatures::MergeFrom(const GetFeatures& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hw.trezor.messages.management.GetFeatures)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void GetFeatures::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hw.trezor.messages.management.GetFeatures)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetFeatures::CopyFrom(const GetFeatures& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hw.trezor.messages.management.GetFeatures)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetFeatures::IsInitialized() const {
  return true;
}

void GetFeatures::InternalSwap(GetFeatures* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetFeatures::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Features::InitAsDefaultInstance() {
}
class Features::_Internal {
 public:
  using HasBits = decltype(std::declval<Features>()._has_bits_);
  static void set_has_vendor(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_major_version(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_minor_version(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_patch_version(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_bootloader_mode(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_device_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_pin_protection(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_passphrase_protection(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_language(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_label(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_initialized(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_revision(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_bootloader_hash(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_imported(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_pin_cached(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_firmware_present(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static void set_has_needs_backup(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static void set_has_flags(HasBits* has_bits) {
    (*has_bits)[0] |= 2097152u;
  }
  static void set_has_model(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_fw_major(HasBits* has_bits) {
    (*has_bits)[0] |= 4194304u;
  }
  static void set_has_fw_minor(HasBits* has_bits) {
    (*has_bits)[0] |= 8388608u;
  }
  static void set_has_fw_patch(HasBits* has_bits) {
    (*has_bits)[0] |= 16777216u;
  }
  static void set_has_fw_vendor(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_fw_vendor_keys(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_unfinished_backup(HasBits* has_bits) {
    (*has_bits)[0] |= 33554432u;
  }
  static void set_has_no_backup(HasBits* has_bits) {
    (*has_bits)[0] |= 67108864u;
  }
  static void set_has_recovery_mode(HasBits* has_bits) {
    (*has_bits)[0] |= 134217728u;
  }
  static void set_has_backup_type(HasBits* has_bits) {
    (*has_bits)[0] |= 536870912u;
  }
  static void set_has_sd_card_present(HasBits* has_bits) {
    (*has_bits)[0] |= 268435456u;
  }
  static void set_has_sd_protection(HasBits* has_bits) {
    (*has_bits)[0] |= 1073741824u;
  }
  static void set_has_wipe_code_protection(HasBits* has_bits) {
    (*has_bits)[0] |= 2147483648u;
  }
  static void set_has_session_id(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_passphrase_always_on_device(HasBits* has_bits) {
    (*has_bits)[1] |= 1u;
  }
};

Features::Features()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hw.trezor.messages.management.Features)
}
Features::Features(const Features& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      capabilities_(from.capabilities_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  vendor_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_vendor()) {
    vendor_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.vendor_);
  }
  device_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_device_id()) {
    device_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.device_id_);
  }
  language_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_language()) {
    language_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.language_);
  }
  label_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_label()) {
    label_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.label_);
  }
  revision_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_revision()) {
    revision_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.revision_);
  }
  bootloader_hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_bootloader_hash()) {
    bootloader_hash_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.bootloader_hash_);
  }
  model_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_model()) {
    model_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.model_);
  }
  fw_vendor_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_fw_vendor()) {
    fw_vendor_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.fw_vendor_);
  }
  fw_vendor_keys_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_fw_vendor_keys()) {
    fw_vendor_keys_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.fw_vendor_keys_);
  }
  session_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_session_id()) {
    session_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.session_id_);
  }
  ::memcpy(&major_version_, &from.major_version_,
    static_cast<size_t>(reinterpret_cast<char*>(&passphrase_always_on_device_) -
    reinterpret_cast<char*>(&major_version_)) + sizeof(passphrase_always_on_device_));
  // @@protoc_insertion_point(copy_constructor:hw.trezor.messages.management.Features)
}

void Features::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Features_messages_2dmanagement_2eproto.base);
  vendor_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  device_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  language_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  label_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  revision_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  bootloader_hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  model_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  fw_vendor_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  fw_vendor_keys_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  session_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&major_version_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&passphrase_always_on_device_) -
      reinterpret_cast<char*>(&major_version_)) + sizeof(passphrase_always_on_device_));
}

Features::~Features() {
  // @@protoc_insertion_point(destructor:hw.trezor.messages.management.Features)
  SharedDtor();
}

void Features::SharedDtor() {
  vendor_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  device_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  language_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  label_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  revision_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  bootloader_hash_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  model_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  fw_vendor_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  fw_vendor_keys_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  session_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Features::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Features& Features::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Features_messages_2dmanagement_2eproto.base);
  return *internal_default_instance();
}


void Features::Clear() {
// @@protoc_insertion_point(message_clear_start:hw.trezor.messages.management.Features)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  capabilities_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      vendor_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      device_id_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      language_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000008u) {
      label_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000010u) {
      revision_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000020u) {
      bootloader_hash_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000040u) {
      model_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000080u) {
      fw_vendor_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 0x00000300u) {
    if (cached_has_bits & 0x00000100u) {
      fw_vendor_keys_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000200u) {
      session_id_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 0x0000fc00u) {
    ::memset(&major_version_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&passphrase_protection_) -
        reinterpret_cast<char*>(&major_version_)) + sizeof(passphrase_protection_));
  }
  if (cached_has_bits & 0x00ff0000u) {
    ::memset(&initialized_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&fw_minor_) -
        reinterpret_cast<char*>(&initialized_)) + sizeof(fw_minor_));
  }
  if (cached_has_bits & 0xff000000u) {
    ::memset(&fw_patch_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&wipe_code_protection_) -
        reinterpret_cast<char*>(&fw_patch_)) + sizeof(wipe_code_protection_));
  }
  passphrase_always_on_device_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* Features::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string vendor = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_vendor();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "hw.trezor.messages.management.Features.vendor");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 major_version = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_major_version(&_has_bits_);
          major_version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 minor_version = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_minor_version(&_has_bits_);
          minor_version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 patch_version = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_patch_version(&_has_bits_);
          patch_version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool bootloader_mode = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_bootloader_mode(&_has_bits_);
          bootloader_mode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string device_id = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_device_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "hw.trezor.messages.management.Features.device_id");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool pin_protection = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_pin_protection(&_has_bits_);
          pin_protection_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool passphrase_protection = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_passphrase_protection(&_has_bits_);
          passphrase_protection_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string language = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          auto str = _internal_mutable_language();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "hw.trezor.messages.management.Features.language");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string label = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          auto str = _internal_mutable_label();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "hw.trezor.messages.management.Features.label");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool initialized = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_initialized(&_has_bits_);
          initialized_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes revision = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          auto str = _internal_mutable_revision();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes bootloader_hash = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          auto str = _internal_mutable_bootloader_hash();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool imported = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          _Internal::set_has_imported(&_has_bits_);
          imported_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool pin_cached = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          _Internal::set_has_pin_cached(&_has_bits_);
          pin_cached_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool firmware_present = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          _Internal::set_has_firmware_present(&_has_bits_);
          firmware_present_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool needs_backup = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          _Internal::set_has_needs_backup(&_has_bits_);
          needs_backup_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 flags = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          _Internal::set_has_flags(&_has_bits_);
          flags_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string model = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 170)) {
          auto str = _internal_mutable_model();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "hw.trezor.messages.management.Features.model");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 fw_major = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 176)) {
          _Internal::set_has_fw_major(&_has_bits_);
          fw_major_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 fw_minor = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 184)) {
          _Internal::set_has_fw_minor(&_has_bits_);
          fw_minor_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 fw_patch = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 192)) {
          _Internal::set_has_fw_patch(&_has_bits_);
          fw_patch_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string fw_vendor = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 202)) {
          auto str = _internal_mutable_fw_vendor();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "hw.trezor.messages.management.Features.fw_vendor");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes fw_vendor_keys = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 210)) {
          auto str = _internal_mutable_fw_vendor_keys();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool unfinished_backup = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 216)) {
          _Internal::set_has_unfinished_backup(&_has_bits_);
          unfinished_backup_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool no_backup = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 224)) {
          _Internal::set_has_no_backup(&_has_bits_);
          no_backup_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool recovery_mode = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 232)) {
          _Internal::set_has_recovery_mode(&_has_bits_);
          recovery_mode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .hw.trezor.messages.management.Features.Capability capabilities = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 240)) {
          ptr -= 2;
          do {
            ptr += 2;
            ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
            CHK_(ptr);
            if (PROTOBUF_PREDICT_TRUE(::hw::trezor::messages::management::Features_Capability_IsValid(val))) {
              _internal_add_capabilities(static_cast<::hw::trezor::messages::management::Features_Capability>(val));
            } else {
              ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(30, val, mutable_unknown_fields());
            }
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<240>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 242) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser(_internal_mutable_capabilities(), ptr, ctx, ::hw::trezor::messages::management::Features_Capability_IsValid, &_internal_metadata_, 30);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .hw.trezor.messages.management.BackupType backup_type = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 248)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::hw::trezor::messages::management::BackupType_IsValid(val))) {
            _internal_set_backup_type(static_cast<::hw::trezor::messages::management::BackupType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(31, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional bool sd_card_present = 32;
      case 32:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 0)) {
          _Internal::set_has_sd_card_present(&_has_bits_);
          sd_card_present_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool sd_protection = 33;
      case 33:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_sd_protection(&_has_bits_);
          sd_protection_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool wipe_code_protection = 34;
      case 34:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_wipe_code_protection(&_has_bits_);
          wipe_code_protection_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes session_id = 35;
      case 35:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_session_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool passphrase_always_on_device = 36;
      case 36:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_passphrase_always_on_device(&_has_bits_);
          passphrase_always_on_device_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Features::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hw.trezor.messages.management.Features)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string vendor = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_vendor().data(), static_cast<int>(this->_internal_vendor().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "hw.trezor.messages.management.Features.vendor");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_vendor(), target);
  }

  // optional uint32 major_version = 2;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_major_version(), target);
  }

  // optional uint32 minor_version = 3;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_minor_version(), target);
  }

  // optional uint32 patch_version = 4;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_patch_version(), target);
  }

  // optional bool bootloader_mode = 5;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_bootloader_mode(), target);
  }

  // optional string device_id = 6;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_device_id().data(), static_cast<int>(this->_internal_device_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "hw.trezor.messages.management.Features.device_id");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_device_id(), target);
  }

  // optional bool pin_protection = 7;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_pin_protection(), target);
  }

  // optional bool passphrase_protection = 8;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(8, this->_internal_passphrase_protection(), target);
  }

  // optional string language = 9;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_language().data(), static_cast<int>(this->_internal_language().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "hw.trezor.messages.management.Features.language");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_language(), target);
  }

  // optional string label = 10;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_label().data(), static_cast<int>(this->_internal_label().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "hw.trezor.messages.management.Features.label");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_label(), target);
  }

  // optional bool initialized = 12;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(12, this->_internal_initialized(), target);
  }

  // optional bytes revision = 13;
  if (cached_has_bits & 0x00000010u) {
    target = stream->WriteBytesMaybeAliased(
        13, this->_internal_revision(), target);
  }

  // optional bytes bootloader_hash = 14;
  if (cached_has_bits & 0x00000020u) {
    target = stream->WriteBytesMaybeAliased(
        14, this->_internal_bootloader_hash(), target);
  }

  // optional bool imported = 15;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(15, this->_internal_imported(), target);
  }

  // optional bool pin_cached = 16;
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(16, this->_internal_pin_cached(), target);
  }

  // optional bool firmware_present = 18;
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(18, this->_internal_firmware_present(), target);
  }

  // optional bool needs_backup = 19;
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(19, this->_internal_needs_backup(), target);
  }

  // optional uint32 flags = 20;
  if (cached_has_bits & 0x00200000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(20, this->_internal_flags(), target);
  }

  // optional string model = 21;
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_model().data(), static_cast<int>(this->_internal_model().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "hw.trezor.messages.management.Features.model");
    target = stream->WriteStringMaybeAliased(
        21, this->_internal_model(), target);
  }

  // optional uint32 fw_major = 22;
  if (cached_has_bits & 0x00400000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(22, this->_internal_fw_major(), target);
  }

  // optional uint32 fw_minor = 23;
  if (cached_has_bits & 0x00800000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(23, this->_internal_fw_minor(), target);
  }

  // optional uint32 fw_patch = 24;
  if (cached_has_bits & 0x01000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(24, this->_internal_fw_patch(), target);
  }

  // optional string fw_vendor = 25;
  if (cached_has_bits & 0x00000080u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_fw_vendor().data(), static_cast<int>(this->_internal_fw_vendor().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "hw.trezor.messages.management.Features.fw_vendor");
    target = stream->WriteStringMaybeAliased(
        25, this->_internal_fw_vendor(), target);
  }

  // optional bytes fw_vendor_keys = 26;
  if (cached_has_bits & 0x00000100u) {
    target = stream->WriteBytesMaybeAliased(
        26, this->_internal_fw_vendor_keys(), target);
  }

  // optional bool unfinished_backup = 27;
  if (cached_has_bits & 0x02000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(27, this->_internal_unfinished_backup(), target);
  }

  // optional bool no_backup = 28;
  if (cached_has_bits & 0x04000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(28, this->_internal_no_backup(), target);
  }

  // optional bool recovery_mode = 29;
  if (cached_has_bits & 0x08000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(29, this->_internal_recovery_mode(), target);
  }

  // repeated .hw.trezor.messages.management.Features.Capability capabilities = 30;
  for (int i = 0, n = this->_internal_capabilities_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
        30, this->_internal_capabilities(i), target);
  }

  // optional .hw.trezor.messages.management.BackupType backup_type = 31;
  if (cached_has_bits & 0x20000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      31, this->_internal_backup_type(), target);
  }

  // optional bool sd_card_present = 32;
  if (cached_has_bits & 0x10000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(32, this->_internal_sd_card_present(), target);
  }

  // optional bool sd_protection = 33;
  if (cached_has_bits & 0x40000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(33, this->_internal_sd_protection(), target);
  }

  // optional bool wipe_code_protection = 34;
  if (cached_has_bits & 0x80000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(34, this->_internal_wipe_code_protection(), target);
  }

  // optional bytes session_id = 35;
  if (cached_has_bits & 0x00000200u) {
    target = stream->WriteBytesMaybeAliased(
        35, this->_internal_session_id(), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional bool passphrase_always_on_device = 36;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(36, this->_internal_passphrase_always_on_device(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hw.trezor.messages.management.Features)
  return target;
}

size_t Features::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hw.trezor.messages.management.Features)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .hw.trezor.messages.management.Features.Capability capabilities = 30;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->_internal_capabilities_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(
        this->_internal_capabilities(static_cast<int>(i)));
    }
    total_size += (2UL * count) + data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string vendor = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_vendor());
    }

    // optional string device_id = 6;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_device_id());
    }

    // optional string language = 9;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_language());
    }

    // optional string label = 10;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_label());
    }

    // optional bytes revision = 13;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_revision());
    }

    // optional bytes bootloader_hash = 14;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_bootloader_hash());
    }

    // optional string model = 21;
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_model());
    }

    // optional string fw_vendor = 25;
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_fw_vendor());
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional bytes fw_vendor_keys = 26;
    if (cached_has_bits & 0x00000100u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_fw_vendor_keys());
    }

    // optional bytes session_id = 35;
    if (cached_has_bits & 0x00000200u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_session_id());
    }

    // optional uint32 major_version = 2;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_major_version());
    }

    // optional uint32 minor_version = 3;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_minor_version());
    }

    // optional uint32 patch_version = 4;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_patch_version());
    }

    // optional bool bootloader_mode = 5;
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 + 1;
    }

    // optional bool pin_protection = 7;
    if (cached_has_bits & 0x00004000u) {
      total_size += 1 + 1;
    }

    // optional bool passphrase_protection = 8;
    if (cached_has_bits & 0x00008000u) {
      total_size += 1 + 1;
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional bool initialized = 12;
    if (cached_has_bits & 0x00010000u) {
      total_size += 1 + 1;
    }

    // optional bool imported = 15;
    if (cached_has_bits & 0x00020000u) {
      total_size += 1 + 1;
    }

    // optional bool pin_cached = 16;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 + 1;
    }

    // optional bool firmware_present = 18;
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 + 1;
    }

    // optional bool needs_backup = 19;
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 + 1;
    }

    // optional uint32 flags = 20;
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_flags());
    }

    // optional uint32 fw_major = 22;
    if (cached_has_bits & 0x00400000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_fw_major());
    }

    // optional uint32 fw_minor = 23;
    if (cached_has_bits & 0x00800000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_fw_minor());
    }

  }
  if (cached_has_bits & 0xff000000u) {
    // optional uint32 fw_patch = 24;
    if (cached_has_bits & 0x01000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_fw_patch());
    }

    // optional bool unfinished_backup = 27;
    if (cached_has_bits & 0x02000000u) {
      total_size += 2 + 1;
    }

    // optional bool no_backup = 28;
    if (cached_has_bits & 0x04000000u) {
      total_size += 2 + 1;
    }

    // optional bool recovery_mode = 29;
    if (cached_has_bits & 0x08000000u) {
      total_size += 2 + 1;
    }

    // optional bool sd_card_present = 32;
    if (cached_has_bits & 0x10000000u) {
      total_size += 2 + 1;
    }

    // optional .hw.trezor.messages.management.BackupType backup_type = 31;
    if (cached_has_bits & 0x20000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_backup_type());
    }

    // optional bool sd_protection = 33;
    if (cached_has_bits & 0x40000000u) {
      total_size += 2 + 1;
    }

    // optional bool wipe_code_protection = 34;
    if (cached_has_bits & 0x80000000u) {
      total_size += 2 + 1;
    }

  }
  // optional bool passphrase_always_on_device = 36;
  cached_has_bits = _has_bits_[1];
  if (cached_has_bits & 0x00000001u) {
    total_size += 2 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Features::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hw.trezor.messages.management.Features)
  GOOGLE_DCHECK_NE(&from, this);
  const Features* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Features>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hw.trezor.messages.management.Features)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hw.trezor.messages.management.Features)
    MergeFrom(*source);
  }
}

void Features::MergeFrom(const Features& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hw.trezor.messages.management.Features)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  capabilities_.MergeFrom(from.capabilities_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      vendor_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.vendor_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      device_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.device_id_);
    }
    if (cached_has_bits & 0x00000004u) {
      _has_bits_[0] |= 0x00000004u;
      language_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.language_);
    }
    if (cached_has_bits & 0x00000008u) {
      _has_bits_[0] |= 0x00000008u;
      label_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.label_);
    }
    if (cached_has_bits & 0x00000010u) {
      _has_bits_[0] |= 0x00000010u;
      revision_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.revision_);
    }
    if (cached_has_bits & 0x00000020u) {
      _has_bits_[0] |= 0x00000020u;
      bootloader_hash_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.bootloader_hash_);
    }
    if (cached_has_bits & 0x00000040u) {
      _has_bits_[0] |= 0x00000040u;
      model_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.model_);
    }
    if (cached_has_bits & 0x00000080u) {
      _has_bits_[0] |= 0x00000080u;
      fw_vendor_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.fw_vendor_);
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _has_bits_[0] |= 0x00000100u;
      fw_vendor_keys_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.fw_vendor_keys_);
    }
    if (cached_has_bits & 0x00000200u) {
      _has_bits_[0] |= 0x00000200u;
      session_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.session_id_);
    }
    if (cached_has_bits & 0x00000400u) {
      major_version_ = from.major_version_;
    }
    if (cached_has_bits & 0x00000800u) {
      minor_version_ = from.minor_version_;
    }
    if (cached_has_bits & 0x00001000u) {
      patch_version_ = from.patch_version_;
    }
    if (cached_has_bits & 0x00002000u) {
      bootloader_mode_ = from.bootloader_mode_;
    }
    if (cached_has_bits & 0x00004000u) {
      pin_protection_ = from.pin_protection_;
    }
    if (cached_has_bits & 0x00008000u) {
      passphrase_protection_ = from.passphrase_protection_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      initialized_ = from.initialized_;
    }
    if (cached_has_bits & 0x00020000u) {
      imported_ = from.imported_;
    }
    if (cached_has_bits & 0x00040000u) {
      pin_cached_ = from.pin_cached_;
    }
    if (cached_has_bits & 0x00080000u) {
      firmware_present_ = from.firmware_present_;
    }
    if (cached_has_bits & 0x00100000u) {
      needs_backup_ = from.needs_backup_;
    }
    if (cached_has_bits & 0x00200000u) {
      flags_ = from.flags_;
    }
    if (cached_has_bits & 0x00400000u) {
      fw_major_ = from.fw_major_;
    }
    if (cached_has_bits & 0x00800000u) {
      fw_minor_ = from.fw_minor_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0xff000000u) {
    if (cached_has_bits & 0x01000000u) {
      fw_patch_ = from.fw_patch_;
    }
    if (cached_has_bits & 0x02000000u) {
      unfinished_backup_ = from.unfinished_backup_;
    }
    if (cached_has_bits & 0x04000000u) {
      no_backup_ = from.no_backup_;
    }
    if (cached_has_bits & 0x08000000u) {
      recovery_mode_ = from.recovery_mode_;
    }
    if (cached_has_bits & 0x10000000u) {
      sd_card_present_ = from.sd_card_present_;
    }
    if (cached_has_bits & 0x20000000u) {
      backup_type_ = from.backup_type_;
    }
    if (cached_has_bits & 0x40000000u) {
      sd_protection_ = from.sd_protection_;
    }
    if (cached_has_bits & 0x80000000u) {
      wipe_code_protection_ = from.wipe_code_protection_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (from._internal_has_passphrase_always_on_device()) {
    _internal_set_passphrase_always_on_device(from._internal_passphrase_always_on_device());
  }
}

void Features::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hw.trezor.messages.management.Features)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Features::CopyFrom(const Features& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hw.trezor.messages.management.Features)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Features::IsInitialized() const {
  return true;
}

void Features::InternalSwap(Features* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(_has_bits_[1], other->_has_bits_[1]);
  capabilities_.InternalSwap(&other->capabilities_);
  vendor_.Swap(&other->vendor_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  device_id_.Swap(&other->device_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  language_.Swap(&other->language_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  label_.Swap(&other->label_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  revision_.Swap(&other->revision_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  bootloader_hash_.Swap(&other->bootloader_hash_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  model_.Swap(&other->model_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  fw_vendor_.Swap(&other->fw_vendor_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  fw_vendor_keys_.Swap(&other->fw_vendor_keys_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  session_id_.Swap(&other->session_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(major_version_, other->major_version_);
  swap(minor_version_, other->minor_version_);
  swap(patch_version_, other->patch_version_);
  swap(bootloader_mode_, other->bootloader_mode_);
  swap(pin_protection_, other->pin_protection_);
  swap(passphrase_protection_, other->passphrase_protection_);
  swap(initialized_, other->initialized_);
  swap(imported_, other->imported_);
  swap(pin_cached_, other->pin_cached_);
  swap(firmware_present_, other->firmware_present_);
  swap(needs_backup_, other->needs_backup_);
  swap(flags_, other->flags_);
  swap(fw_major_, other->fw_major_);
  swap(fw_minor_, other->fw_minor_);
  swap(fw_patch_, other->fw_patch_);
  swap(unfinished_backup_, other->unfinished_backup_);
  swap(no_backup_, other->no_backup_);
  swap(recovery_mode_, other->recovery_mode_);
  swap(sd_card_present_, other->sd_card_present_);
  swap(backup_type_, other->backup_type_);
  swap(sd_protection_, other->sd_protection_);
  swap(wipe_code_protection_, other->wipe_code_protection_);
  swap(passphrase_always_on_device_, other->passphrase_always_on_device_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Features::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ClearSession::InitAsDefaultInstance() {
}
class ClearSession::_Internal {
 public:
  using HasBits = decltype(std::declval<ClearSession>()._has_bits_);
};

ClearSession::ClearSession()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hw.trezor.messages.management.ClearSession)
}
ClearSession::ClearSession(const ClearSession& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:hw.trezor.messages.management.ClearSession)
}

void ClearSession::SharedCtor() {
}

ClearSession::~ClearSession() {
  // @@protoc_insertion_point(destructor:hw.trezor.messages.management.ClearSession)
  SharedDtor();
}

void ClearSession::SharedDtor() {
}

void ClearSession::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ClearSession& ClearSession::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ClearSession_messages_2dmanagement_2eproto.base);
  return *internal_default_instance();
}


void ClearSession::Clear() {
// @@protoc_insertion_point(message_clear_start:hw.trezor.messages.management.ClearSession)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* ClearSession::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ClearSession::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hw.trezor.messages.management.ClearSession)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hw.trezor.messages.management.ClearSession)
  return target;
}

size_t ClearSession::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hw.trezor.messages.management.ClearSession)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ClearSession::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hw.trezor.messages.management.ClearSession)
  GOOGLE_DCHECK_NE(&from, this);
  const ClearSession* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ClearSession>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hw.trezor.messages.management.ClearSession)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hw.trezor.messages.management.ClearSession)
    MergeFrom(*source);
  }
}

void ClearSession::MergeFrom(const ClearSession& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hw.trezor.messages.management.ClearSession)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void ClearSession::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hw.trezor.messages.management.ClearSession)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClearSession::CopyFrom(const ClearSession& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hw.trezor.messages.management.ClearSession)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClearSession::IsInitialized() const {
  return true;
}

void ClearSession::InternalSwap(ClearSession* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata ClearSession::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ApplySettings::InitAsDefaultInstance() {
}
class ApplySettings::_Internal {
 public:
  using HasBits = decltype(std::declval<ApplySettings>()._has_bits_);
  static void set_has_language(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_label(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_use_passphrase(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_homescreen(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_auto_lock_delay_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_display_rotation(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_passphrase_always_on_device(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

ApplySettings::ApplySettings()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hw.trezor.messages.management.ApplySettings)
}
ApplySettings::ApplySettings(const ApplySettings& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  language_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_language()) {
    language_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.language_);
  }
  label_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_label()) {
    label_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.label_);
  }
  homescreen_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_homescreen()) {
    homescreen_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.homescreen_);
  }
  ::memcpy(&use_passphrase_, &from.use_passphrase_,
    static_cast<size_t>(reinterpret_cast<char*>(&display_rotation_) -
    reinterpret_cast<char*>(&use_passphrase_)) + sizeof(display_rotation_));
  // @@protoc_insertion_point(copy_constructor:hw.trezor.messages.management.ApplySettings)
}

void ApplySettings::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ApplySettings_messages_2dmanagement_2eproto.base);
  language_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  label_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  homescreen_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&use_passphrase_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&display_rotation_) -
      reinterpret_cast<char*>(&use_passphrase_)) + sizeof(display_rotation_));
}

ApplySettings::~ApplySettings() {
  // @@protoc_insertion_point(destructor:hw.trezor.messages.management.ApplySettings)
  SharedDtor();
}

void ApplySettings::SharedDtor() {
  language_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  label_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  homescreen_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ApplySettings::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ApplySettings& ApplySettings::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ApplySettings_messages_2dmanagement_2eproto.base);
  return *internal_default_instance();
}


void ApplySettings::Clear() {
// @@protoc_insertion_point(message_clear_start:hw.trezor.messages.management.ApplySettings)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      language_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      label_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      homescreen_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 0x00000078u) {
    ::memset(&use_passphrase_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&display_rotation_) -
        reinterpret_cast<char*>(&use_passphrase_)) + sizeof(display_rotation_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* ApplySettings::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string language = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_language();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "hw.trezor.messages.management.ApplySettings.language");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string label = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_label();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "hw.trezor.messages.management.ApplySettings.label");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool use_passphrase = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_use_passphrase(&has_bits);
          use_passphrase_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes homescreen = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_homescreen();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 auto_lock_delay_ms = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_auto_lock_delay_ms(&has_bits);
          auto_lock_delay_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 display_rotation = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_display_rotation(&has_bits);
          display_rotation_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool passphrase_always_on_device = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_passphrase_always_on_device(&has_bits);
          passphrase_always_on_device_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ApplySettings::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hw.trezor.messages.management.ApplySettings)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string language = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_language().data(), static_cast<int>(this->_internal_language().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "hw.trezor.messages.management.ApplySettings.language");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_language(), target);
  }

  // optional string label = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_label().data(), static_cast<int>(this->_internal_label().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "hw.trezor.messages.management.ApplySettings.label");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_label(), target);
  }

  // optional bool use_passphrase = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_use_passphrase(), target);
  }

  // optional bytes homescreen = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_homescreen(), target);
  }

  // optional uint32 auto_lock_delay_ms = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_auto_lock_delay_ms(), target);
  }

  // optional uint32 display_rotation = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_display_rotation(), target);
  }

  // optional bool passphrase_always_on_device = 8;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(8, this->_internal_passphrase_always_on_device(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hw.trezor.messages.management.ApplySettings)
  return target;
}

size_t ApplySettings::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hw.trezor.messages.management.ApplySettings)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional string language = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_language());
    }

    // optional string label = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_label());
    }

    // optional bytes homescreen = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_homescreen());
    }

    // optional bool use_passphrase = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional bool passphrase_always_on_device = 8;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional uint32 auto_lock_delay_ms = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_auto_lock_delay_ms());
    }

    // optional uint32 display_rotation = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_display_rotation());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ApplySettings::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hw.trezor.messages.management.ApplySettings)
  GOOGLE_DCHECK_NE(&from, this);
  const ApplySettings* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ApplySettings>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hw.trezor.messages.management.ApplySettings)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hw.trezor.messages.management.ApplySettings)
    MergeFrom(*source);
  }
}

void ApplySettings::MergeFrom(const ApplySettings& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hw.trezor.messages.management.ApplySettings)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      language_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.language_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      label_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.label_);
    }
    if (cached_has_bits & 0x00000004u) {
      _has_bits_[0] |= 0x00000004u;
      homescreen_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.homescreen_);
    }
    if (cached_has_bits & 0x00000008u) {
      use_passphrase_ = from.use_passphrase_;
    }
    if (cached_has_bits & 0x00000010u) {
      passphrase_always_on_device_ = from.passphrase_always_on_device_;
    }
    if (cached_has_bits & 0x00000020u) {
      auto_lock_delay_ms_ = from.auto_lock_delay_ms_;
    }
    if (cached_has_bits & 0x00000040u) {
      display_rotation_ = from.display_rotation_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ApplySettings::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hw.trezor.messages.management.ApplySettings)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ApplySettings::CopyFrom(const ApplySettings& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hw.trezor.messages.management.ApplySettings)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ApplySettings::IsInitialized() const {
  return true;
}

void ApplySettings::InternalSwap(ApplySettings* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  language_.Swap(&other->language_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  label_.Swap(&other->label_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  homescreen_.Swap(&other->homescreen_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(use_passphrase_, other->use_passphrase_);
  swap(passphrase_always_on_device_, other->passphrase_always_on_device_);
  swap(auto_lock_delay_ms_, other->auto_lock_delay_ms_);
  swap(display_rotation_, other->display_rotation_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ApplySettings::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ApplyFlags::InitAsDefaultInstance() {
}
class ApplyFlags::_Internal {
 public:
  using HasBits = decltype(std::declval<ApplyFlags>()._has_bits_);
  static void set_has_flags(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

ApplyFlags::ApplyFlags()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hw.trezor.messages.management.ApplyFlags)
}
ApplyFlags::ApplyFlags(const ApplyFlags& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  flags_ = from.flags_;
  // @@protoc_insertion_point(copy_constructor:hw.trezor.messages.management.ApplyFlags)
}

void ApplyFlags::SharedCtor() {
  flags_ = 0u;
}

ApplyFlags::~ApplyFlags() {
  // @@protoc_insertion_point(destructor:hw.trezor.messages.management.ApplyFlags)
  SharedDtor();
}

void ApplyFlags::SharedDtor() {
}

void ApplyFlags::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ApplyFlags& ApplyFlags::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ApplyFlags_messages_2dmanagement_2eproto.base);
  return *internal_default_instance();
}


void ApplyFlags::Clear() {
// @@protoc_insertion_point(message_clear_start:hw.trezor.messages.management.ApplyFlags)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  flags_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* ApplyFlags::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 flags = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_flags(&has_bits);
          flags_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ApplyFlags::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hw.trezor.messages.management.ApplyFlags)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 flags = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_flags(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hw.trezor.messages.management.ApplyFlags)
  return target;
}

size_t ApplyFlags::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hw.trezor.messages.management.ApplyFlags)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 flags = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_flags());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ApplyFlags::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hw.trezor.messages.management.ApplyFlags)
  GOOGLE_DCHECK_NE(&from, this);
  const ApplyFlags* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ApplyFlags>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hw.trezor.messages.management.ApplyFlags)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hw.trezor.messages.management.ApplyFlags)
    MergeFrom(*source);
  }
}

void ApplyFlags::MergeFrom(const ApplyFlags& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hw.trezor.messages.management.ApplyFlags)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_flags()) {
    _internal_set_flags(from._internal_flags());
  }
}

void ApplyFlags::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hw.trezor.messages.management.ApplyFlags)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ApplyFlags::CopyFrom(const ApplyFlags& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hw.trezor.messages.management.ApplyFlags)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ApplyFlags::IsInitialized() const {
  return true;
}

void ApplyFlags::InternalSwap(ApplyFlags* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(flags_, other->flags_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ApplyFlags::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ChangePin::InitAsDefaultInstance() {
}
class ChangePin::_Internal {
 public:
  using HasBits = decltype(std::declval<ChangePin>()._has_bits_);
  static void set_has_remove(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

ChangePin::ChangePin()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hw.trezor.messages.management.ChangePin)
}
ChangePin::ChangePin(const ChangePin& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  remove_ = from.remove_;
  // @@protoc_insertion_point(copy_constructor:hw.trezor.messages.management.ChangePin)
}

void ChangePin::SharedCtor() {
  remove_ = false;
}

ChangePin::~ChangePin() {
  // @@protoc_insertion_point(destructor:hw.trezor.messages.management.ChangePin)
  SharedDtor();
}

void ChangePin::SharedDtor() {
}

void ChangePin::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ChangePin& ChangePin::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ChangePin_messages_2dmanagement_2eproto.base);
  return *internal_default_instance();
}


void ChangePin::Clear() {
// @@protoc_insertion_point(message_clear_start:hw.trezor.messages.management.ChangePin)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  remove_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* ChangePin::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool remove = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_remove(&has_bits);
          remove_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ChangePin::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hw.trezor.messages.management.ChangePin)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool remove = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_remove(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hw.trezor.messages.management.ChangePin)
  return target;
}

size_t ChangePin::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hw.trezor.messages.management.ChangePin)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool remove = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ChangePin::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hw.trezor.messages.management.ChangePin)
  GOOGLE_DCHECK_NE(&from, this);
  const ChangePin* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ChangePin>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hw.trezor.messages.management.ChangePin)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hw.trezor.messages.management.ChangePin)
    MergeFrom(*source);
  }
}

void ChangePin::MergeFrom(const ChangePin& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hw.trezor.messages.management.ChangePin)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_remove()) {
    _internal_set_remove(from._internal_remove());
  }
}

void ChangePin::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hw.trezor.messages.management.ChangePin)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChangePin::CopyFrom(const ChangePin& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hw.trezor.messages.management.ChangePin)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChangePin::IsInitialized() const {
  return true;
}

void ChangePin::InternalSwap(ChangePin* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(remove_, other->remove_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ChangePin::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ChangeWipeCode::InitAsDefaultInstance() {
}
class ChangeWipeCode::_Internal {
 public:
  using HasBits = decltype(std::declval<ChangeWipeCode>()._has_bits_);
  static void set_has_remove(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

ChangeWipeCode::ChangeWipeCode()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hw.trezor.messages.management.ChangeWipeCode)
}
ChangeWipeCode::ChangeWipeCode(const ChangeWipeCode& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  remove_ = from.remove_;
  // @@protoc_insertion_point(copy_constructor:hw.trezor.messages.management.ChangeWipeCode)
}

void ChangeWipeCode::SharedCtor() {
  remove_ = false;
}

ChangeWipeCode::~ChangeWipeCode() {
  // @@protoc_insertion_point(destructor:hw.trezor.messages.management.ChangeWipeCode)
  SharedDtor();
}

void ChangeWipeCode::SharedDtor() {
}

void ChangeWipeCode::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ChangeWipeCode& ChangeWipeCode::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ChangeWipeCode_messages_2dmanagement_2eproto.base);
  return *internal_default_instance();
}


void ChangeWipeCode::Clear() {
// @@protoc_insertion_point(message_clear_start:hw.trezor.messages.management.ChangeWipeCode)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  remove_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* ChangeWipeCode::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool remove = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_remove(&has_bits);
          remove_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ChangeWipeCode::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hw.trezor.messages.management.ChangeWipeCode)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool remove = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_remove(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hw.trezor.messages.management.ChangeWipeCode)
  return target;
}

size_t ChangeWipeCode::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hw.trezor.messages.management.ChangeWipeCode)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool remove = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ChangeWipeCode::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hw.trezor.messages.management.ChangeWipeCode)
  GOOGLE_DCHECK_NE(&from, this);
  const ChangeWipeCode* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ChangeWipeCode>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hw.trezor.messages.management.ChangeWipeCode)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hw.trezor.messages.management.ChangeWipeCode)
    MergeFrom(*source);
  }
}

void ChangeWipeCode::MergeFrom(const ChangeWipeCode& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hw.trezor.messages.management.ChangeWipeCode)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_remove()) {
    _internal_set_remove(from._internal_remove());
  }
}

void ChangeWipeCode::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hw.trezor.messages.management.ChangeWipeCode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChangeWipeCode::CopyFrom(const ChangeWipeCode& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hw.trezor.messages.management.ChangeWipeCode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChangeWipeCode::IsInitialized() const {
  return true;
}

void ChangeWipeCode::InternalSwap(ChangeWipeCode* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(remove_, other->remove_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ChangeWipeCode::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SdProtect::InitAsDefaultInstance() {
}
class SdProtect::_Internal {
 public:
  using HasBits = decltype(std::declval<SdProtect>()._has_bits_);
  static void set_has_operation(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

SdProtect::SdProtect()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hw.trezor.messages.management.SdProtect)
}
SdProtect::SdProtect(const SdProtect& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  operation_ = from.operation_;
  // @@protoc_insertion_point(copy_constructor:hw.trezor.messages.management.SdProtect)
}

void SdProtect::SharedCtor() {
  operation_ = 0;
}

SdProtect::~SdProtect() {
  // @@protoc_insertion_point(destructor:hw.trezor.messages.management.SdProtect)
  SharedDtor();
}

void SdProtect::SharedDtor() {
}

void SdProtect::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SdProtect& SdProtect::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SdProtect_messages_2dmanagement_2eproto.base);
  return *internal_default_instance();
}


void SdProtect::Clear() {
// @@protoc_insertion_point(message_clear_start:hw.trezor.messages.management.SdProtect)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  operation_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* SdProtect::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .hw.trezor.messages.management.SdProtect.SdProtectOperationType operation = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::hw::trezor::messages::management::SdProtect_SdProtectOperationType_IsValid(val))) {
            _internal_set_operation(static_cast<::hw::trezor::messages::management::SdProtect_SdProtectOperationType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SdProtect::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hw.trezor.messages.management.SdProtect)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .hw.trezor.messages.management.SdProtect.SdProtectOperationType operation = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_operation(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hw.trezor.messages.management.SdProtect)
  return target;
}

size_t SdProtect::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hw.trezor.messages.management.SdProtect)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .hw.trezor.messages.management.SdProtect.SdProtectOperationType operation = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_operation());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SdProtect::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hw.trezor.messages.management.SdProtect)
  GOOGLE_DCHECK_NE(&from, this);
  const SdProtect* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SdProtect>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hw.trezor.messages.management.SdProtect)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hw.trezor.messages.management.SdProtect)
    MergeFrom(*source);
  }
}

void SdProtect::MergeFrom(const SdProtect& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hw.trezor.messages.management.SdProtect)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_operation()) {
    _internal_set_operation(from._internal_operation());
  }
}

void SdProtect::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hw.trezor.messages.management.SdProtect)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SdProtect::CopyFrom(const SdProtect& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hw.trezor.messages.management.SdProtect)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SdProtect::IsInitialized() const {
  return true;
}

void SdProtect::InternalSwap(SdProtect* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(operation_, other->operation_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SdProtect::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Ping::InitAsDefaultInstance() {
}
class Ping::_Internal {
 public:
  using HasBits = decltype(std::declval<Ping>()._has_bits_);
  static void set_has_message(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_button_protection(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

Ping::Ping()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hw.trezor.messages.management.Ping)
}
Ping::Ping(const Ping& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_message()) {
    message_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.message_);
  }
  button_protection_ = from.button_protection_;
  // @@protoc_insertion_point(copy_constructor:hw.trezor.messages.management.Ping)
}

void Ping::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Ping_messages_2dmanagement_2eproto.base);
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  button_protection_ = false;
}

Ping::~Ping() {
  // @@protoc_insertion_point(destructor:hw.trezor.messages.management.Ping)
  SharedDtor();
}

void Ping::SharedDtor() {
  message_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Ping::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Ping& Ping::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Ping_messages_2dmanagement_2eproto.base);
  return *internal_default_instance();
}


void Ping::Clear() {
// @@protoc_insertion_point(message_clear_start:hw.trezor.messages.management.Ping)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    message_.ClearNonDefaultToEmptyNoArena();
  }
  button_protection_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* Ping::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string message = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_message();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "hw.trezor.messages.management.Ping.message");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool button_protection = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_button_protection(&has_bits);
          button_protection_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Ping::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hw.trezor.messages.management.Ping)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string message = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_message().data(), static_cast<int>(this->_internal_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "hw.trezor.messages.management.Ping.message");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_message(), target);
  }

  // optional bool button_protection = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_button_protection(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hw.trezor.messages.management.Ping)
  return target;
}

size_t Ping::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hw.trezor.messages.management.Ping)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string message = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_message());
    }

    // optional bool button_protection = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Ping::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hw.trezor.messages.management.Ping)
  GOOGLE_DCHECK_NE(&from, this);
  const Ping* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Ping>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hw.trezor.messages.management.Ping)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hw.trezor.messages.management.Ping)
    MergeFrom(*source);
  }
}

void Ping::MergeFrom(const Ping& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hw.trezor.messages.management.Ping)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      message_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.message_);
    }
    if (cached_has_bits & 0x00000002u) {
      button_protection_ = from.button_protection_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Ping::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hw.trezor.messages.management.Ping)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Ping::CopyFrom(const Ping& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hw.trezor.messages.management.Ping)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Ping::IsInitialized() const {
  return true;
}

void Ping::InternalSwap(Ping* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  message_.Swap(&other->message_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(button_protection_, other->button_protection_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Ping::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Cancel::InitAsDefaultInstance() {
}
class Cancel::_Internal {
 public:
  using HasBits = decltype(std::declval<Cancel>()._has_bits_);
};

Cancel::Cancel()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hw.trezor.messages.management.Cancel)
}
Cancel::Cancel(const Cancel& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:hw.trezor.messages.management.Cancel)
}

void Cancel::SharedCtor() {
}

Cancel::~Cancel() {
  // @@protoc_insertion_point(destructor:hw.trezor.messages.management.Cancel)
  SharedDtor();
}

void Cancel::SharedDtor() {
}

void Cancel::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Cancel& Cancel::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Cancel_messages_2dmanagement_2eproto.base);
  return *internal_default_instance();
}


void Cancel::Clear() {
// @@protoc_insertion_point(message_clear_start:hw.trezor.messages.management.Cancel)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* Cancel::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Cancel::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hw.trezor.messages.management.Cancel)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hw.trezor.messages.management.Cancel)
  return target;
}

size_t Cancel::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hw.trezor.messages.management.Cancel)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Cancel::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hw.trezor.messages.management.Cancel)
  GOOGLE_DCHECK_NE(&from, this);
  const Cancel* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Cancel>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hw.trezor.messages.management.Cancel)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hw.trezor.messages.management.Cancel)
    MergeFrom(*source);
  }
}

void Cancel::MergeFrom(const Cancel& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hw.trezor.messages.management.Cancel)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void Cancel::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hw.trezor.messages.management.Cancel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Cancel::CopyFrom(const Cancel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hw.trezor.messages.management.Cancel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Cancel::IsInitialized() const {
  return true;
}

void Cancel::InternalSwap(Cancel* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata Cancel::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetEntropy::InitAsDefaultInstance() {
}
class GetEntropy::_Internal {
 public:
  using HasBits = decltype(std::declval<GetEntropy>()._has_bits_);
  static void set_has_size(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

GetEntropy::GetEntropy()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hw.trezor.messages.management.GetEntropy)
}
GetEntropy::GetEntropy(const GetEntropy& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  size_ = from.size_;
  // @@protoc_insertion_point(copy_constructor:hw.trezor.messages.management.GetEntropy)
}

void GetEntropy::SharedCtor() {
  size_ = 0u;
}

GetEntropy::~GetEntropy() {
  // @@protoc_insertion_point(destructor:hw.trezor.messages.management.GetEntropy)
  SharedDtor();
}

void GetEntropy::SharedDtor() {
}

void GetEntropy::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetEntropy& GetEntropy::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetEntropy_messages_2dmanagement_2eproto.base);
  return *internal_default_instance();
}


void GetEntropy::Clear() {
// @@protoc_insertion_point(message_clear_start:hw.trezor.messages.management.GetEntropy)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  size_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* GetEntropy::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required uint32 size = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_size(&has_bits);
          size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetEntropy::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hw.trezor.messages.management.GetEntropy)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 size = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_size(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hw.trezor.messages.management.GetEntropy)
  return target;
}

size_t GetEntropy::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hw.trezor.messages.management.GetEntropy)
  size_t total_size = 0;

  // required uint32 size = 1;
  if (_internal_has_size()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_size());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetEntropy::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hw.trezor.messages.management.GetEntropy)
  GOOGLE_DCHECK_NE(&from, this);
  const GetEntropy* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetEntropy>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hw.trezor.messages.management.GetEntropy)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hw.trezor.messages.management.GetEntropy)
    MergeFrom(*source);
  }
}

void GetEntropy::MergeFrom(const GetEntropy& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hw.trezor.messages.management.GetEntropy)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_size()) {
    _internal_set_size(from._internal_size());
  }
}

void GetEntropy::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hw.trezor.messages.management.GetEntropy)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetEntropy::CopyFrom(const GetEntropy& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hw.trezor.messages.management.GetEntropy)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetEntropy::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void GetEntropy::InternalSwap(GetEntropy* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(size_, other->size_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetEntropy::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Entropy::InitAsDefaultInstance() {
}
class Entropy::_Internal {
 public:
  using HasBits = decltype(std::declval<Entropy>()._has_bits_);
  static void set_has_entropy(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

Entropy::Entropy()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hw.trezor.messages.management.Entropy)
}
Entropy::Entropy(const Entropy& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  entropy_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_entropy()) {
    entropy_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.entropy_);
  }
  // @@protoc_insertion_point(copy_constructor:hw.trezor.messages.management.Entropy)
}

void Entropy::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Entropy_messages_2dmanagement_2eproto.base);
  entropy_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

Entropy::~Entropy() {
  // @@protoc_insertion_point(destructor:hw.trezor.messages.management.Entropy)
  SharedDtor();
}

void Entropy::SharedDtor() {
  entropy_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Entropy::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Entropy& Entropy::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Entropy_messages_2dmanagement_2eproto.base);
  return *internal_default_instance();
}


void Entropy::Clear() {
// @@protoc_insertion_point(message_clear_start:hw.trezor.messages.management.Entropy)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    entropy_.ClearNonDefaultToEmptyNoArena();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* Entropy::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required bytes entropy = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_entropy();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Entropy::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hw.trezor.messages.management.Entropy)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bytes entropy = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_entropy(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hw.trezor.messages.management.Entropy)
  return target;
}

size_t Entropy::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hw.trezor.messages.management.Entropy)
  size_t total_size = 0;

  // required bytes entropy = 1;
  if (_internal_has_entropy()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_entropy());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Entropy::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hw.trezor.messages.management.Entropy)
  GOOGLE_DCHECK_NE(&from, this);
  const Entropy* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Entropy>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hw.trezor.messages.management.Entropy)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hw.trezor.messages.management.Entropy)
    MergeFrom(*source);
  }
}

void Entropy::MergeFrom(const Entropy& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hw.trezor.messages.management.Entropy)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_entropy()) {
    _has_bits_[0] |= 0x00000001u;
    entropy_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.entropy_);
  }
}

void Entropy::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hw.trezor.messages.management.Entropy)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Entropy::CopyFrom(const Entropy& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hw.trezor.messages.management.Entropy)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Entropy::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void Entropy::InternalSwap(Entropy* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  entropy_.Swap(&other->entropy_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata Entropy::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void WipeDevice::InitAsDefaultInstance() {
}
class WipeDevice::_Internal {
 public:
  using HasBits = decltype(std::declval<WipeDevice>()._has_bits_);
};

WipeDevice::WipeDevice()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hw.trezor.messages.management.WipeDevice)
}
WipeDevice::WipeDevice(const WipeDevice& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:hw.trezor.messages.management.WipeDevice)
}

void WipeDevice::SharedCtor() {
}

WipeDevice::~WipeDevice() {
  // @@protoc_insertion_point(destructor:hw.trezor.messages.management.WipeDevice)
  SharedDtor();
}

void WipeDevice::SharedDtor() {
}

void WipeDevice::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const WipeDevice& WipeDevice::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_WipeDevice_messages_2dmanagement_2eproto.base);
  return *internal_default_instance();
}


void WipeDevice::Clear() {
// @@protoc_insertion_point(message_clear_start:hw.trezor.messages.management.WipeDevice)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* WipeDevice::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* WipeDevice::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hw.trezor.messages.management.WipeDevice)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hw.trezor.messages.management.WipeDevice)
  return target;
}

size_t WipeDevice::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hw.trezor.messages.management.WipeDevice)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WipeDevice::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hw.trezor.messages.management.WipeDevice)
  GOOGLE_DCHECK_NE(&from, this);
  const WipeDevice* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<WipeDevice>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hw.trezor.messages.management.WipeDevice)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hw.trezor.messages.management.WipeDevice)
    MergeFrom(*source);
  }
}

void WipeDevice::MergeFrom(const WipeDevice& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hw.trezor.messages.management.WipeDevice)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void WipeDevice::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hw.trezor.messages.management.WipeDevice)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WipeDevice::CopyFrom(const WipeDevice& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hw.trezor.messages.management.WipeDevice)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WipeDevice::IsInitialized() const {
  return true;
}

void WipeDevice::InternalSwap(WipeDevice* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata WipeDevice::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LoadDevice::InitAsDefaultInstance() {
}
class LoadDevice::_Internal {
 public:
  using HasBits = decltype(std::declval<LoadDevice>()._has_bits_);
  static void set_has_pin(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_passphrase_protection(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_language(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_label(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_skip_checksum(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_u2f_counter(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_needs_backup(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_no_backup(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
};

::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> LoadDevice::_i_give_permission_to_break_this_code_default_language_;
LoadDevice::LoadDevice()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hw.trezor.messages.management.LoadDevice)
}
LoadDevice::LoadDevice(const LoadDevice& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      mnemonics_(from.mnemonics_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  pin_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_pin()) {
    pin_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.pin_);
  }
  language_.UnsafeSetDefault(&::hw::trezor::messages::management::LoadDevice::_i_give_permission_to_break_this_code_default_language_.get());
  if (from._internal_has_language()) {
    language_.AssignWithDefault(&::hw::trezor::messages::management::LoadDevice::_i_give_permission_to_break_this_code_default_language_.get(), from.language_);
  }
  label_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_label()) {
    label_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.label_);
  }
  ::memcpy(&passphrase_protection_, &from.passphrase_protection_,
    static_cast<size_t>(reinterpret_cast<char*>(&u2f_counter_) -
    reinterpret_cast<char*>(&passphrase_protection_)) + sizeof(u2f_counter_));
  // @@protoc_insertion_point(copy_constructor:hw.trezor.messages.management.LoadDevice)
}

void LoadDevice::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LoadDevice_messages_2dmanagement_2eproto.base);
  pin_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  language_.UnsafeSetDefault(&::hw::trezor::messages::management::LoadDevice::_i_give_permission_to_break_this_code_default_language_.get());
  label_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&passphrase_protection_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&u2f_counter_) -
      reinterpret_cast<char*>(&passphrase_protection_)) + sizeof(u2f_counter_));
}

LoadDevice::~LoadDevice() {
  // @@protoc_insertion_point(destructor:hw.trezor.messages.management.LoadDevice)
  SharedDtor();
}

void LoadDevice::SharedDtor() {
  pin_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  language_.DestroyNoArena(&::hw::trezor::messages::management::LoadDevice::_i_give_permission_to_break_this_code_default_language_.get());
  label_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void LoadDevice::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LoadDevice& LoadDevice::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LoadDevice_messages_2dmanagement_2eproto.base);
  return *internal_default_instance();
}


void LoadDevice::Clear() {
// @@protoc_insertion_point(message_clear_start:hw.trezor.messages.management.LoadDevice)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  mnemonics_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      pin_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      language_.UnsafeMutablePointer()->assign(*&::hw::trezor::messages::management::LoadDevice::_i_give_permission_to_break_this_code_default_language_.get());
    }
    if (cached_has_bits & 0x00000004u) {
      label_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 0x000000f8u) {
    ::memset(&passphrase_protection_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&u2f_counter_) -
        reinterpret_cast<char*>(&passphrase_protection_)) + sizeof(u2f_counter_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* LoadDevice::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated string mnemonics = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_mnemonics();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "hw.trezor.messages.management.LoadDevice.mnemonics");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // optional string pin = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_pin();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "hw.trezor.messages.management.LoadDevice.pin");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool passphrase_protection = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_passphrase_protection(&has_bits);
          passphrase_protection_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string language = 5 [default = "en-US"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_language();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "hw.trezor.messages.management.LoadDevice.language");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string label = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_label();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "hw.trezor.messages.management.LoadDevice.label");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool skip_checksum = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_skip_checksum(&has_bits);
          skip_checksum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 u2f_counter = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_u2f_counter(&has_bits);
          u2f_counter_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool needs_backup = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_needs_backup(&has_bits);
          needs_backup_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool no_backup = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_no_backup(&has_bits);
          no_backup_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LoadDevice::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hw.trezor.messages.management.LoadDevice)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string mnemonics = 1;
  for (int i = 0, n = this->_internal_mnemonics_size(); i < n; i++) {
    const auto& s = this->_internal_mnemonics(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "hw.trezor.messages.management.LoadDevice.mnemonics");
    target = stream->WriteString(1, s, target);
  }

  cached_has_bits = _has_bits_[0];
  // optional string pin = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_pin().data(), static_cast<int>(this->_internal_pin().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "hw.trezor.messages.management.LoadDevice.pin");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_pin(), target);
  }

  // optional bool passphrase_protection = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_passphrase_protection(), target);
  }

  // optional string language = 5 [default = "en-US"];
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_language().data(), static_cast<int>(this->_internal_language().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "hw.trezor.messages.management.LoadDevice.language");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_language(), target);
  }

  // optional string label = 6;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_label().data(), static_cast<int>(this->_internal_label().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "hw.trezor.messages.management.LoadDevice.label");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_label(), target);
  }

  // optional bool skip_checksum = 7;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_skip_checksum(), target);
  }

  // optional uint32 u2f_counter = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(8, this->_internal_u2f_counter(), target);
  }

  // optional bool needs_backup = 9;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(9, this->_internal_needs_backup(), target);
  }

  // optional bool no_backup = 10;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(10, this->_internal_no_backup(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hw.trezor.messages.management.LoadDevice)
  return target;
}

size_t LoadDevice::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hw.trezor.messages.management.LoadDevice)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string mnemonics = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(mnemonics_.size());
  for (int i = 0, n = mnemonics_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      mnemonics_.Get(i));
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string pin = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_pin());
    }

    // optional string language = 5 [default = "en-US"];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_language());
    }

    // optional string label = 6;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_label());
    }

    // optional bool passphrase_protection = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional bool skip_checksum = 7;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional bool needs_backup = 9;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

    // optional bool no_backup = 10;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

    // optional uint32 u2f_counter = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_u2f_counter());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LoadDevice::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hw.trezor.messages.management.LoadDevice)
  GOOGLE_DCHECK_NE(&from, this);
  const LoadDevice* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LoadDevice>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hw.trezor.messages.management.LoadDevice)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hw.trezor.messages.management.LoadDevice)
    MergeFrom(*source);
  }
}

void LoadDevice::MergeFrom(const LoadDevice& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hw.trezor.messages.management.LoadDevice)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  mnemonics_.MergeFrom(from.mnemonics_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      pin_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.pin_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      language_.AssignWithDefault(&::hw::trezor::messages::management::LoadDevice::_i_give_permission_to_break_this_code_default_language_.get(), from.language_);
    }
    if (cached_has_bits & 0x00000004u) {
      _has_bits_[0] |= 0x00000004u;
      label_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.label_);
    }
    if (cached_has_bits & 0x00000008u) {
      passphrase_protection_ = from.passphrase_protection_;
    }
    if (cached_has_bits & 0x00000010u) {
      skip_checksum_ = from.skip_checksum_;
    }
    if (cached_has_bits & 0x00000020u) {
      needs_backup_ = from.needs_backup_;
    }
    if (cached_has_bits & 0x00000040u) {
      no_backup_ = from.no_backup_;
    }
    if (cached_has_bits & 0x00000080u) {
      u2f_counter_ = from.u2f_counter_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void LoadDevice::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hw.trezor.messages.management.LoadDevice)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoadDevice::CopyFrom(const LoadDevice& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hw.trezor.messages.management.LoadDevice)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoadDevice::IsInitialized() const {
  return true;
}

void LoadDevice::InternalSwap(LoadDevice* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  mnemonics_.InternalSwap(&other->mnemonics_);
  pin_.Swap(&other->pin_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  language_.Swap(&other->language_, &::hw::trezor::messages::management::LoadDevice::_i_give_permission_to_break_this_code_default_language_.get(),
    GetArenaNoVirtual());
  label_.Swap(&other->label_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(passphrase_protection_, other->passphrase_protection_);
  swap(skip_checksum_, other->skip_checksum_);
  swap(needs_backup_, other->needs_backup_);
  swap(no_backup_, other->no_backup_);
  swap(u2f_counter_, other->u2f_counter_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LoadDevice::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ResetDevice::InitAsDefaultInstance() {
}
class ResetDevice::_Internal {
 public:
  using HasBits = decltype(std::declval<ResetDevice>()._has_bits_);
  static void set_has_display_random(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_strength(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_passphrase_protection(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_pin_protection(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_language(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_label(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_u2f_counter(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_skip_backup(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_no_backup(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_backup_type(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
};

::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> ResetDevice::_i_give_permission_to_break_this_code_default_language_;
ResetDevice::ResetDevice()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hw.trezor.messages.management.ResetDevice)
}
ResetDevice::ResetDevice(const ResetDevice& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  language_.UnsafeSetDefault(&::hw::trezor::messages::management::ResetDevice::_i_give_permission_to_break_this_code_default_language_.get());
  if (from._internal_has_language()) {
    language_.AssignWithDefault(&::hw::trezor::messages::management::ResetDevice::_i_give_permission_to_break_this_code_default_language_.get(), from.language_);
  }
  label_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_label()) {
    label_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.label_);
  }
  ::memcpy(&display_random_, &from.display_random_,
    static_cast<size_t>(reinterpret_cast<char*>(&strength_) -
    reinterpret_cast<char*>(&display_random_)) + sizeof(strength_));
  // @@protoc_insertion_point(copy_constructor:hw.trezor.messages.management.ResetDevice)
}

void ResetDevice::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ResetDevice_messages_2dmanagement_2eproto.base);
  language_.UnsafeSetDefault(&::hw::trezor::messages::management::ResetDevice::_i_give_permission_to_break_this_code_default_language_.get());
  label_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&display_random_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&backup_type_) -
      reinterpret_cast<char*>(&display_random_)) + sizeof(backup_type_));
  strength_ = 256u;
}

ResetDevice::~ResetDevice() {
  // @@protoc_insertion_point(destructor:hw.trezor.messages.management.ResetDevice)
  SharedDtor();
}

void ResetDevice::SharedDtor() {
  language_.DestroyNoArena(&::hw::trezor::messages::management::ResetDevice::_i_give_permission_to_break_this_code_default_language_.get());
  label_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ResetDevice::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ResetDevice& ResetDevice::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ResetDevice_messages_2dmanagement_2eproto.base);
  return *internal_default_instance();
}


void ResetDevice::Clear() {
// @@protoc_insertion_point(message_clear_start:hw.trezor.messages.management.ResetDevice)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      language_.UnsafeMutablePointer()->assign(*&::hw::trezor::messages::management::ResetDevice::_i_give_permission_to_break_this_code_default_language_.get());
    }
    if (cached_has_bits & 0x00000002u) {
      label_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 0x000000fcu) {
    ::memset(&display_random_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&no_backup_) -
        reinterpret_cast<char*>(&display_random_)) + sizeof(no_backup_));
  }
  if (cached_has_bits & 0x00000300u) {
    backup_type_ = 0;
    strength_ = 256u;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* ResetDevice::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool display_random = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_display_random(&has_bits);
          display_random_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 strength = 2 [default = 256];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_strength(&has_bits);
          strength_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool passphrase_protection = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_passphrase_protection(&has_bits);
          passphrase_protection_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool pin_protection = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_pin_protection(&has_bits);
          pin_protection_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string language = 5 [default = "en-US"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_language();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "hw.trezor.messages.management.ResetDevice.language");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string label = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_label();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "hw.trezor.messages.management.ResetDevice.label");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 u2f_counter = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_u2f_counter(&has_bits);
          u2f_counter_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool skip_backup = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_skip_backup(&has_bits);
          skip_backup_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool no_backup = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_no_backup(&has_bits);
          no_backup_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .hw.trezor.messages.management.BackupType backup_type = 10 [default = Bip39];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::hw::trezor::messages::management::BackupType_IsValid(val))) {
            _internal_set_backup_type(static_cast<::hw::trezor::messages::management::BackupType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(10, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ResetDevice::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hw.trezor.messages.management.ResetDevice)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool display_random = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_display_random(), target);
  }

  // optional uint32 strength = 2 [default = 256];
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_strength(), target);
  }

  // optional bool passphrase_protection = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_passphrase_protection(), target);
  }

  // optional bool pin_protection = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_pin_protection(), target);
  }

  // optional string language = 5 [default = "en-US"];
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_language().data(), static_cast<int>(this->_internal_language().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "hw.trezor.messages.management.ResetDevice.language");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_language(), target);
  }

  // optional string label = 6;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_label().data(), static_cast<int>(this->_internal_label().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "hw.trezor.messages.management.ResetDevice.label");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_label(), target);
  }

  // optional uint32 u2f_counter = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_u2f_counter(), target);
  }

  // optional bool skip_backup = 8;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(8, this->_internal_skip_backup(), target);
  }

  // optional bool no_backup = 9;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(9, this->_internal_no_backup(), target);
  }

  // optional .hw.trezor.messages.management.BackupType backup_type = 10 [default = Bip39];
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      10, this->_internal_backup_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hw.trezor.messages.management.ResetDevice)
  return target;
}

size_t ResetDevice::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hw.trezor.messages.management.ResetDevice)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string language = 5 [default = "en-US"];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_language());
    }

    // optional string label = 6;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_label());
    }

    // optional bool display_random = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional bool passphrase_protection = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional bool pin_protection = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional bool skip_backup = 8;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

    // optional uint32 u2f_counter = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_u2f_counter());
    }

    // optional bool no_backup = 9;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 1;
    }

  }
  if (cached_has_bits & 0x00000300u) {
    // optional .hw.trezor.messages.management.BackupType backup_type = 10 [default = Bip39];
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_backup_type());
    }

    // optional uint32 strength = 2 [default = 256];
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_strength());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ResetDevice::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hw.trezor.messages.management.ResetDevice)
  GOOGLE_DCHECK_NE(&from, this);
  const ResetDevice* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ResetDevice>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hw.trezor.messages.management.ResetDevice)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hw.trezor.messages.management.ResetDevice)
    MergeFrom(*source);
  }
}

void ResetDevice::MergeFrom(const ResetDevice& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hw.trezor.messages.management.ResetDevice)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      language_.AssignWithDefault(&::hw::trezor::messages::management::ResetDevice::_i_give_permission_to_break_this_code_default_language_.get(), from.language_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      label_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.label_);
    }
    if (cached_has_bits & 0x00000004u) {
      display_random_ = from.display_random_;
    }
    if (cached_has_bits & 0x00000008u) {
      passphrase_protection_ = from.passphrase_protection_;
    }
    if (cached_has_bits & 0x00000010u) {
      pin_protection_ = from.pin_protection_;
    }
    if (cached_has_bits & 0x00000020u) {
      skip_backup_ = from.skip_backup_;
    }
    if (cached_has_bits & 0x00000040u) {
      u2f_counter_ = from.u2f_counter_;
    }
    if (cached_has_bits & 0x00000080u) {
      no_backup_ = from.no_backup_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000300u) {
    if (cached_has_bits & 0x00000100u) {
      backup_type_ = from.backup_type_;
    }
    if (cached_has_bits & 0x00000200u) {
      strength_ = from.strength_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ResetDevice::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hw.trezor.messages.management.ResetDevice)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResetDevice::CopyFrom(const ResetDevice& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hw.trezor.messages.management.ResetDevice)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResetDevice::IsInitialized() const {
  return true;
}

void ResetDevice::InternalSwap(ResetDevice* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  language_.Swap(&other->language_, &::hw::trezor::messages::management::ResetDevice::_i_give_permission_to_break_this_code_default_language_.get(),
    GetArenaNoVirtual());
  label_.Swap(&other->label_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(display_random_, other->display_random_);
  swap(passphrase_protection_, other->passphrase_protection_);
  swap(pin_protection_, other->pin_protection_);
  swap(skip_backup_, other->skip_backup_);
  swap(u2f_counter_, other->u2f_counter_);
  swap(no_backup_, other->no_backup_);
  swap(backup_type_, other->backup_type_);
  swap(strength_, other->strength_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ResetDevice::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void BackupDevice::InitAsDefaultInstance() {
}
class BackupDevice::_Internal {
 public:
  using HasBits = decltype(std::declval<BackupDevice>()._has_bits_);
};

BackupDevice::BackupDevice()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hw.trezor.messages.management.BackupDevice)
}
BackupDevice::BackupDevice(const BackupDevice& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:hw.trezor.messages.management.BackupDevice)
}

void BackupDevice::SharedCtor() {
}

BackupDevice::~BackupDevice() {
  // @@protoc_insertion_point(destructor:hw.trezor.messages.management.BackupDevice)
  SharedDtor();
}

void BackupDevice::SharedDtor() {
}

void BackupDevice::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BackupDevice& BackupDevice::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BackupDevice_messages_2dmanagement_2eproto.base);
  return *internal_default_instance();
}


void BackupDevice::Clear() {
// @@protoc_insertion_point(message_clear_start:hw.trezor.messages.management.BackupDevice)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* BackupDevice::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BackupDevice::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hw.trezor.messages.management.BackupDevice)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hw.trezor.messages.management.BackupDevice)
  return target;
}

size_t BackupDevice::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hw.trezor.messages.management.BackupDevice)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BackupDevice::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hw.trezor.messages.management.BackupDevice)
  GOOGLE_DCHECK_NE(&from, this);
  const BackupDevice* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BackupDevice>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hw.trezor.messages.management.BackupDevice)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hw.trezor.messages.management.BackupDevice)
    MergeFrom(*source);
  }
}

void BackupDevice::MergeFrom(const BackupDevice& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hw.trezor.messages.management.BackupDevice)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void BackupDevice::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hw.trezor.messages.management.BackupDevice)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BackupDevice::CopyFrom(const BackupDevice& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hw.trezor.messages.management.BackupDevice)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BackupDevice::IsInitialized() const {
  return true;
}

void BackupDevice::InternalSwap(BackupDevice* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata BackupDevice::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void EntropyRequest::InitAsDefaultInstance() {
}
class EntropyRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<EntropyRequest>()._has_bits_);
};

EntropyRequest::EntropyRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hw.trezor.messages.management.EntropyRequest)
}
EntropyRequest::EntropyRequest(const EntropyRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:hw.trezor.messages.management.EntropyRequest)
}

void EntropyRequest::SharedCtor() {
}

EntropyRequest::~EntropyRequest() {
  // @@protoc_insertion_point(destructor:hw.trezor.messages.management.EntropyRequest)
  SharedDtor();
}

void EntropyRequest::SharedDtor() {
}

void EntropyRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EntropyRequest& EntropyRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_EntropyRequest_messages_2dmanagement_2eproto.base);
  return *internal_default_instance();
}


void EntropyRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:hw.trezor.messages.management.EntropyRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* EntropyRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* EntropyRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hw.trezor.messages.management.EntropyRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hw.trezor.messages.management.EntropyRequest)
  return target;
}

size_t EntropyRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hw.trezor.messages.management.EntropyRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EntropyRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hw.trezor.messages.management.EntropyRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const EntropyRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<EntropyRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hw.trezor.messages.management.EntropyRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hw.trezor.messages.management.EntropyRequest)
    MergeFrom(*source);
  }
}

void EntropyRequest::MergeFrom(const EntropyRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hw.trezor.messages.management.EntropyRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void EntropyRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hw.trezor.messages.management.EntropyRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EntropyRequest::CopyFrom(const EntropyRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hw.trezor.messages.management.EntropyRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EntropyRequest::IsInitialized() const {
  return true;
}

void EntropyRequest::InternalSwap(EntropyRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata EntropyRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void EntropyAck::InitAsDefaultInstance() {
}
class EntropyAck::_Internal {
 public:
  using HasBits = decltype(std::declval<EntropyAck>()._has_bits_);
  static void set_has_entropy(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

EntropyAck::EntropyAck()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hw.trezor.messages.management.EntropyAck)
}
EntropyAck::EntropyAck(const EntropyAck& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  entropy_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_entropy()) {
    entropy_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.entropy_);
  }
  // @@protoc_insertion_point(copy_constructor:hw.trezor.messages.management.EntropyAck)
}

void EntropyAck::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_EntropyAck_messages_2dmanagement_2eproto.base);
  entropy_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

EntropyAck::~EntropyAck() {
  // @@protoc_insertion_point(destructor:hw.trezor.messages.management.EntropyAck)
  SharedDtor();
}

void EntropyAck::SharedDtor() {
  entropy_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void EntropyAck::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EntropyAck& EntropyAck::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_EntropyAck_messages_2dmanagement_2eproto.base);
  return *internal_default_instance();
}


void EntropyAck::Clear() {
// @@protoc_insertion_point(message_clear_start:hw.trezor.messages.management.EntropyAck)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    entropy_.ClearNonDefaultToEmptyNoArena();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* EntropyAck::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bytes entropy = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_entropy();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* EntropyAck::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hw.trezor.messages.management.EntropyAck)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes entropy = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_entropy(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hw.trezor.messages.management.EntropyAck)
  return target;
}

size_t EntropyAck::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hw.trezor.messages.management.EntropyAck)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bytes entropy = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_entropy());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EntropyAck::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hw.trezor.messages.management.EntropyAck)
  GOOGLE_DCHECK_NE(&from, this);
  const EntropyAck* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<EntropyAck>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hw.trezor.messages.management.EntropyAck)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hw.trezor.messages.management.EntropyAck)
    MergeFrom(*source);
  }
}

void EntropyAck::MergeFrom(const EntropyAck& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hw.trezor.messages.management.EntropyAck)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_entropy()) {
    _has_bits_[0] |= 0x00000001u;
    entropy_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.entropy_);
  }
}

void EntropyAck::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hw.trezor.messages.management.EntropyAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EntropyAck::CopyFrom(const EntropyAck& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hw.trezor.messages.management.EntropyAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EntropyAck::IsInitialized() const {
  return true;
}

void EntropyAck::InternalSwap(EntropyAck* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  entropy_.Swap(&other->entropy_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata EntropyAck::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RecoveryDevice::InitAsDefaultInstance() {
}
class RecoveryDevice::_Internal {
 public:
  using HasBits = decltype(std::declval<RecoveryDevice>()._has_bits_);
  static void set_has_word_count(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_passphrase_protection(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_pin_protection(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_language(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_label(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_enforce_wordlist(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_u2f_counter(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_dry_run(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
};

::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> RecoveryDevice::_i_give_permission_to_break_this_code_default_language_;
RecoveryDevice::RecoveryDevice()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hw.trezor.messages.management.RecoveryDevice)
}
RecoveryDevice::RecoveryDevice(const RecoveryDevice& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  language_.UnsafeSetDefault(&::hw::trezor::messages::management::RecoveryDevice::_i_give_permission_to_break_this_code_default_language_.get());
  if (from._internal_has_language()) {
    language_.AssignWithDefault(&::hw::trezor::messages::management::RecoveryDevice::_i_give_permission_to_break_this_code_default_language_.get(), from.language_);
  }
  label_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_label()) {
    label_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.label_);
  }
  ::memcpy(&word_count_, &from.word_count_,
    static_cast<size_t>(reinterpret_cast<char*>(&u2f_counter_) -
    reinterpret_cast<char*>(&word_count_)) + sizeof(u2f_counter_));
  // @@protoc_insertion_point(copy_constructor:hw.trezor.messages.management.RecoveryDevice)
}

void RecoveryDevice::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RecoveryDevice_messages_2dmanagement_2eproto.base);
  language_.UnsafeSetDefault(&::hw::trezor::messages::management::RecoveryDevice::_i_give_permission_to_break_this_code_default_language_.get());
  label_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&word_count_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&u2f_counter_) -
      reinterpret_cast<char*>(&word_count_)) + sizeof(u2f_counter_));
}

RecoveryDevice::~RecoveryDevice() {
  // @@protoc_insertion_point(destructor:hw.trezor.messages.management.RecoveryDevice)
  SharedDtor();
}

void RecoveryDevice::SharedDtor() {
  language_.DestroyNoArena(&::hw::trezor::messages::management::RecoveryDevice::_i_give_permission_to_break_this_code_default_language_.get());
  label_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void RecoveryDevice::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RecoveryDevice& RecoveryDevice::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RecoveryDevice_messages_2dmanagement_2eproto.base);
  return *internal_default_instance();
}


void RecoveryDevice::Clear() {
// @@protoc_insertion_point(message_clear_start:hw.trezor.messages.management.RecoveryDevice)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      language_.UnsafeMutablePointer()->assign(*&::hw::trezor::messages::management::RecoveryDevice::_i_give_permission_to_break_this_code_default_language_.get());
    }
    if (cached_has_bits & 0x00000002u) {
      label_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 0x000000fcu) {
    ::memset(&word_count_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&type_) -
        reinterpret_cast<char*>(&word_count_)) + sizeof(type_));
  }
  u2f_counter_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* RecoveryDevice::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 word_count = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_word_count(&has_bits);
          word_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool passphrase_protection = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_passphrase_protection(&has_bits);
          passphrase_protection_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool pin_protection = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_pin_protection(&has_bits);
          pin_protection_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string language = 4 [default = "en-US"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_language();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "hw.trezor.messages.management.RecoveryDevice.language");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string label = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_label();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "hw.trezor.messages.management.RecoveryDevice.label");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool enforce_wordlist = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_enforce_wordlist(&has_bits);
          enforce_wordlist_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .hw.trezor.messages.management.RecoveryDevice.RecoveryDeviceType type = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::hw::trezor::messages::management::RecoveryDevice_RecoveryDeviceType_IsValid(val))) {
            _internal_set_type(static_cast<::hw::trezor::messages::management::RecoveryDevice_RecoveryDeviceType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(8, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional uint32 u2f_counter = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_u2f_counter(&has_bits);
          u2f_counter_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool dry_run = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_dry_run(&has_bits);
          dry_run_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RecoveryDevice::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hw.trezor.messages.management.RecoveryDevice)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 word_count = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_word_count(), target);
  }

  // optional bool passphrase_protection = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_passphrase_protection(), target);
  }

  // optional bool pin_protection = 3;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_pin_protection(), target);
  }

  // optional string language = 4 [default = "en-US"];
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_language().data(), static_cast<int>(this->_internal_language().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "hw.trezor.messages.management.RecoveryDevice.language");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_language(), target);
  }

  // optional string label = 5;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_label().data(), static_cast<int>(this->_internal_label().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "hw.trezor.messages.management.RecoveryDevice.label");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_label(), target);
  }

  // optional bool enforce_wordlist = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_enforce_wordlist(), target);
  }

  // optional .hw.trezor.messages.management.RecoveryDevice.RecoveryDeviceType type = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      8, this->_internal_type(), target);
  }

  // optional uint32 u2f_counter = 9;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(9, this->_internal_u2f_counter(), target);
  }

  // optional bool dry_run = 10;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(10, this->_internal_dry_run(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hw.trezor.messages.management.RecoveryDevice)
  return target;
}

size_t RecoveryDevice::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hw.trezor.messages.management.RecoveryDevice)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string language = 4 [default = "en-US"];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_language());
    }

    // optional string label = 5;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_label());
    }

    // optional uint32 word_count = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_word_count());
    }

    // optional bool passphrase_protection = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional bool pin_protection = 3;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional bool enforce_wordlist = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

    // optional bool dry_run = 10;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

    // optional .hw.trezor.messages.management.RecoveryDevice.RecoveryDeviceType type = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
    }

  }
  // optional uint32 u2f_counter = 9;
  if (cached_has_bits & 0x00000100u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_u2f_counter());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RecoveryDevice::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hw.trezor.messages.management.RecoveryDevice)
  GOOGLE_DCHECK_NE(&from, this);
  const RecoveryDevice* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RecoveryDevice>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hw.trezor.messages.management.RecoveryDevice)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hw.trezor.messages.management.RecoveryDevice)
    MergeFrom(*source);
  }
}

void RecoveryDevice::MergeFrom(const RecoveryDevice& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hw.trezor.messages.management.RecoveryDevice)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      language_.AssignWithDefault(&::hw::trezor::messages::management::RecoveryDevice::_i_give_permission_to_break_this_code_default_language_.get(), from.language_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      label_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.label_);
    }
    if (cached_has_bits & 0x00000004u) {
      word_count_ = from.word_count_;
    }
    if (cached_has_bits & 0x00000008u) {
      passphrase_protection_ = from.passphrase_protection_;
    }
    if (cached_has_bits & 0x00000010u) {
      pin_protection_ = from.pin_protection_;
    }
    if (cached_has_bits & 0x00000020u) {
      enforce_wordlist_ = from.enforce_wordlist_;
    }
    if (cached_has_bits & 0x00000040u) {
      dry_run_ = from.dry_run_;
    }
    if (cached_has_bits & 0x00000080u) {
      type_ = from.type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    _internal_set_u2f_counter(from._internal_u2f_counter());
  }
}

void RecoveryDevice::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hw.trezor.messages.management.RecoveryDevice)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RecoveryDevice::CopyFrom(const RecoveryDevice& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hw.trezor.messages.management.RecoveryDevice)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RecoveryDevice::IsInitialized() const {
  return true;
}

void RecoveryDevice::InternalSwap(RecoveryDevice* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  language_.Swap(&other->language_, &::hw::trezor::messages::management::RecoveryDevice::_i_give_permission_to_break_this_code_default_language_.get(),
    GetArenaNoVirtual());
  label_.Swap(&other->label_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(word_count_, other->word_count_);
  swap(passphrase_protection_, other->passphrase_protection_);
  swap(pin_protection_, other->pin_protection_);
  swap(enforce_wordlist_, other->enforce_wordlist_);
  swap(dry_run_, other->dry_run_);
  swap(type_, other->type_);
  swap(u2f_counter_, other->u2f_counter_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RecoveryDevice::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void WordRequest::InitAsDefaultInstance() {
}
class WordRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<WordRequest>()._has_bits_);
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

WordRequest::WordRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hw.trezor.messages.management.WordRequest)
}
WordRequest::WordRequest(const WordRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:hw.trezor.messages.management.WordRequest)
}

void WordRequest::SharedCtor() {
  type_ = 0;
}

WordRequest::~WordRequest() {
  // @@protoc_insertion_point(destructor:hw.trezor.messages.management.WordRequest)
  SharedDtor();
}

void WordRequest::SharedDtor() {
}

void WordRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const WordRequest& WordRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_WordRequest_messages_2dmanagement_2eproto.base);
  return *internal_default_instance();
}


void WordRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:hw.trezor.messages.management.WordRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  type_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* WordRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .hw.trezor.messages.management.WordRequest.WordRequestType type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::hw::trezor::messages::management::WordRequest_WordRequestType_IsValid(val))) {
            _internal_set_type(static_cast<::hw::trezor::messages::management::WordRequest_WordRequestType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* WordRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hw.trezor.messages.management.WordRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .hw.trezor.messages.management.WordRequest.WordRequestType type = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hw.trezor.messages.management.WordRequest)
  return target;
}

size_t WordRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hw.trezor.messages.management.WordRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .hw.trezor.messages.management.WordRequest.WordRequestType type = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WordRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hw.trezor.messages.management.WordRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const WordRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<WordRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hw.trezor.messages.management.WordRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hw.trezor.messages.management.WordRequest)
    MergeFrom(*source);
  }
}

void WordRequest::MergeFrom(const WordRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hw.trezor.messages.management.WordRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_type()) {
    _internal_set_type(from._internal_type());
  }
}

void WordRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hw.trezor.messages.management.WordRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WordRequest::CopyFrom(const WordRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hw.trezor.messages.management.WordRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WordRequest::IsInitialized() const {
  return true;
}

void WordRequest::InternalSwap(WordRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(type_, other->type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata WordRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void WordAck::InitAsDefaultInstance() {
}
class WordAck::_Internal {
 public:
  using HasBits = decltype(std::declval<WordAck>()._has_bits_);
  static void set_has_word(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

WordAck::WordAck()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hw.trezor.messages.management.WordAck)
}
WordAck::WordAck(const WordAck& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  word_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_word()) {
    word_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.word_);
  }
  // @@protoc_insertion_point(copy_constructor:hw.trezor.messages.management.WordAck)
}

void WordAck::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_WordAck_messages_2dmanagement_2eproto.base);
  word_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

WordAck::~WordAck() {
  // @@protoc_insertion_point(destructor:hw.trezor.messages.management.WordAck)
  SharedDtor();
}

void WordAck::SharedDtor() {
  word_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void WordAck::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const WordAck& WordAck::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_WordAck_messages_2dmanagement_2eproto.base);
  return *internal_default_instance();
}


void WordAck::Clear() {
// @@protoc_insertion_point(message_clear_start:hw.trezor.messages.management.WordAck)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    word_.ClearNonDefaultToEmptyNoArena();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* WordAck::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required string word = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_word();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "hw.trezor.messages.management.WordAck.word");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* WordAck::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hw.trezor.messages.management.WordAck)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string word = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_word().data(), static_cast<int>(this->_internal_word().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "hw.trezor.messages.management.WordAck.word");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_word(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hw.trezor.messages.management.WordAck)
  return target;
}

size_t WordAck::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hw.trezor.messages.management.WordAck)
  size_t total_size = 0;

  // required string word = 1;
  if (_internal_has_word()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_word());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WordAck::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hw.trezor.messages.management.WordAck)
  GOOGLE_DCHECK_NE(&from, this);
  const WordAck* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<WordAck>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hw.trezor.messages.management.WordAck)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hw.trezor.messages.management.WordAck)
    MergeFrom(*source);
  }
}

void WordAck::MergeFrom(const WordAck& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hw.trezor.messages.management.WordAck)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_word()) {
    _has_bits_[0] |= 0x00000001u;
    word_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.word_);
  }
}

void WordAck::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hw.trezor.messages.management.WordAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WordAck::CopyFrom(const WordAck& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hw.trezor.messages.management.WordAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WordAck::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void WordAck::InternalSwap(WordAck* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  word_.Swap(&other->word_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata WordAck::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SetU2FCounter::InitAsDefaultInstance() {
}
class SetU2FCounter::_Internal {
 public:
  using HasBits = decltype(std::declval<SetU2FCounter>()._has_bits_);
  static void set_has_u2f_counter(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

SetU2FCounter::SetU2FCounter()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hw.trezor.messages.management.SetU2FCounter)
}
SetU2FCounter::SetU2FCounter(const SetU2FCounter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  u2f_counter_ = from.u2f_counter_;
  // @@protoc_insertion_point(copy_constructor:hw.trezor.messages.management.SetU2FCounter)
}

void SetU2FCounter::SharedCtor() {
  u2f_counter_ = 0u;
}

SetU2FCounter::~SetU2FCounter() {
  // @@protoc_insertion_point(destructor:hw.trezor.messages.management.SetU2FCounter)
  SharedDtor();
}

void SetU2FCounter::SharedDtor() {
}

void SetU2FCounter::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SetU2FCounter& SetU2FCounter::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SetU2FCounter_messages_2dmanagement_2eproto.base);
  return *internal_default_instance();
}


void SetU2FCounter::Clear() {
// @@protoc_insertion_point(message_clear_start:hw.trezor.messages.management.SetU2FCounter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  u2f_counter_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* SetU2FCounter::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 u2f_counter = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_u2f_counter(&has_bits);
          u2f_counter_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SetU2FCounter::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hw.trezor.messages.management.SetU2FCounter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 u2f_counter = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_u2f_counter(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hw.trezor.messages.management.SetU2FCounter)
  return target;
}

size_t SetU2FCounter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hw.trezor.messages.management.SetU2FCounter)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 u2f_counter = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_u2f_counter());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SetU2FCounter::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hw.trezor.messages.management.SetU2FCounter)
  GOOGLE_DCHECK_NE(&from, this);
  const SetU2FCounter* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SetU2FCounter>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hw.trezor.messages.management.SetU2FCounter)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hw.trezor.messages.management.SetU2FCounter)
    MergeFrom(*source);
  }
}

void SetU2FCounter::MergeFrom(const SetU2FCounter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hw.trezor.messages.management.SetU2FCounter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_u2f_counter()) {
    _internal_set_u2f_counter(from._internal_u2f_counter());
  }
}

void SetU2FCounter::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hw.trezor.messages.management.SetU2FCounter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetU2FCounter::CopyFrom(const SetU2FCounter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hw.trezor.messages.management.SetU2FCounter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetU2FCounter::IsInitialized() const {
  return true;
}

void SetU2FCounter::InternalSwap(SetU2FCounter* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(u2f_counter_, other->u2f_counter_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SetU2FCounter::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetNextU2FCounter::InitAsDefaultInstance() {
}
class GetNextU2FCounter::_Internal {
 public:
  using HasBits = decltype(std::declval<GetNextU2FCounter>()._has_bits_);
};

GetNextU2FCounter::GetNextU2FCounter()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hw.trezor.messages.management.GetNextU2FCounter)
}
GetNextU2FCounter::GetNextU2FCounter(const GetNextU2FCounter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:hw.trezor.messages.management.GetNextU2FCounter)
}

void GetNextU2FCounter::SharedCtor() {
}

GetNextU2FCounter::~GetNextU2FCounter() {
  // @@protoc_insertion_point(destructor:hw.trezor.messages.management.GetNextU2FCounter)
  SharedDtor();
}

void GetNextU2FCounter::SharedDtor() {
}

void GetNextU2FCounter::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetNextU2FCounter& GetNextU2FCounter::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetNextU2FCounter_messages_2dmanagement_2eproto.base);
  return *internal_default_instance();
}


void GetNextU2FCounter::Clear() {
// @@protoc_insertion_point(message_clear_start:hw.trezor.messages.management.GetNextU2FCounter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* GetNextU2FCounter::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetNextU2FCounter::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hw.trezor.messages.management.GetNextU2FCounter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hw.trezor.messages.management.GetNextU2FCounter)
  return target;
}

size_t GetNextU2FCounter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hw.trezor.messages.management.GetNextU2FCounter)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetNextU2FCounter::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hw.trezor.messages.management.GetNextU2FCounter)
  GOOGLE_DCHECK_NE(&from, this);
  const GetNextU2FCounter* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetNextU2FCounter>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hw.trezor.messages.management.GetNextU2FCounter)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hw.trezor.messages.management.GetNextU2FCounter)
    MergeFrom(*source);
  }
}

void GetNextU2FCounter::MergeFrom(const GetNextU2FCounter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hw.trezor.messages.management.GetNextU2FCounter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void GetNextU2FCounter::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hw.trezor.messages.management.GetNextU2FCounter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetNextU2FCounter::CopyFrom(const GetNextU2FCounter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hw.trezor.messages.management.GetNextU2FCounter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetNextU2FCounter::IsInitialized() const {
  return true;
}

void GetNextU2FCounter::InternalSwap(GetNextU2FCounter* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetNextU2FCounter::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void NextU2FCounter::InitAsDefaultInstance() {
}
class NextU2FCounter::_Internal {
 public:
  using HasBits = decltype(std::declval<NextU2FCounter>()._has_bits_);
  static void set_has_u2f_counter(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

NextU2FCounter::NextU2FCounter()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hw.trezor.messages.management.NextU2FCounter)
}
NextU2FCounter::NextU2FCounter(const NextU2FCounter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  u2f_counter_ = from.u2f_counter_;
  // @@protoc_insertion_point(copy_constructor:hw.trezor.messages.management.NextU2FCounter)
}

void NextU2FCounter::SharedCtor() {
  u2f_counter_ = 0u;
}

NextU2FCounter::~NextU2FCounter() {
  // @@protoc_insertion_point(destructor:hw.trezor.messages.management.NextU2FCounter)
  SharedDtor();
}

void NextU2FCounter::SharedDtor() {
}

void NextU2FCounter::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const NextU2FCounter& NextU2FCounter::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_NextU2FCounter_messages_2dmanagement_2eproto.base);
  return *internal_default_instance();
}


void NextU2FCounter::Clear() {
// @@protoc_insertion_point(message_clear_start:hw.trezor.messages.management.NextU2FCounter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  u2f_counter_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* NextU2FCounter::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 u2f_counter = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_u2f_counter(&has_bits);
          u2f_counter_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* NextU2FCounter::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hw.trezor.messages.management.NextU2FCounter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 u2f_counter = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_u2f_counter(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hw.trezor.messages.management.NextU2FCounter)
  return target;
}

size_t NextU2FCounter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hw.trezor.messages.management.NextU2FCounter)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 u2f_counter = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_u2f_counter());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NextU2FCounter::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hw.trezor.messages.management.NextU2FCounter)
  GOOGLE_DCHECK_NE(&from, this);
  const NextU2FCounter* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<NextU2FCounter>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hw.trezor.messages.management.NextU2FCounter)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hw.trezor.messages.management.NextU2FCounter)
    MergeFrom(*source);
  }
}

void NextU2FCounter::MergeFrom(const NextU2FCounter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hw.trezor.messages.management.NextU2FCounter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_u2f_counter()) {
    _internal_set_u2f_counter(from._internal_u2f_counter());
  }
}

void NextU2FCounter::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hw.trezor.messages.management.NextU2FCounter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NextU2FCounter::CopyFrom(const NextU2FCounter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hw.trezor.messages.management.NextU2FCounter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NextU2FCounter::IsInitialized() const {
  return true;
}

void NextU2FCounter::InternalSwap(NextU2FCounter* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(u2f_counter_, other->u2f_counter_);
}

::PROTOBUF_NAMESPACE_ID::Metadata NextU2FCounter::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace management
}  // namespace messages
}  // namespace trezor
}  // namespace hw
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::hw::trezor::messages::management::Initialize* Arena::CreateMaybeMessage< ::hw::trezor::messages::management::Initialize >(Arena* arena) {
  return Arena::CreateInternal< ::hw::trezor::messages::management::Initialize >(arena);
}
template<> PROTOBUF_NOINLINE ::hw::trezor::messages::management::GetFeatures* Arena::CreateMaybeMessage< ::hw::trezor::messages::management::GetFeatures >(Arena* arena) {
  return Arena::CreateInternal< ::hw::trezor::messages::management::GetFeatures >(arena);
}
template<> PROTOBUF_NOINLINE ::hw::trezor::messages::management::Features* Arena::CreateMaybeMessage< ::hw::trezor::messages::management::Features >(Arena* arena) {
  return Arena::CreateInternal< ::hw::trezor::messages::management::Features >(arena);
}
template<> PROTOBUF_NOINLINE ::hw::trezor::messages::management::ClearSession* Arena::CreateMaybeMessage< ::hw::trezor::messages::management::ClearSession >(Arena* arena) {
  return Arena::CreateInternal< ::hw::trezor::messages::management::ClearSession >(arena);
}
template<> PROTOBUF_NOINLINE ::hw::trezor::messages::management::ApplySettings* Arena::CreateMaybeMessage< ::hw::trezor::messages::management::ApplySettings >(Arena* arena) {
  return Arena::CreateInternal< ::hw::trezor::messages::management::ApplySettings >(arena);
}
template<> PROTOBUF_NOINLINE ::hw::trezor::messages::management::ApplyFlags* Arena::CreateMaybeMessage< ::hw::trezor::messages::management::ApplyFlags >(Arena* arena) {
  return Arena::CreateInternal< ::hw::trezor::messages::management::ApplyFlags >(arena);
}
template<> PROTOBUF_NOINLINE ::hw::trezor::messages::management::ChangePin* Arena::CreateMaybeMessage< ::hw::trezor::messages::management::ChangePin >(Arena* arena) {
  return Arena::CreateInternal< ::hw::trezor::messages::management::ChangePin >(arena);
}
template<> PROTOBUF_NOINLINE ::hw::trezor::messages::management::ChangeWipeCode* Arena::CreateMaybeMessage< ::hw::trezor::messages::management::ChangeWipeCode >(Arena* arena) {
  return Arena::CreateInternal< ::hw::trezor::messages::management::ChangeWipeCode >(arena);
}
template<> PROTOBUF_NOINLINE ::hw::trezor::messages::management::SdProtect* Arena::CreateMaybeMessage< ::hw::trezor::messages::management::SdProtect >(Arena* arena) {
  return Arena::CreateInternal< ::hw::trezor::messages::management::SdProtect >(arena);
}
template<> PROTOBUF_NOINLINE ::hw::trezor::messages::management::Ping* Arena::CreateMaybeMessage< ::hw::trezor::messages::management::Ping >(Arena* arena) {
  return Arena::CreateInternal< ::hw::trezor::messages::management::Ping >(arena);
}
template<> PROTOBUF_NOINLINE ::hw::trezor::messages::management::Cancel* Arena::CreateMaybeMessage< ::hw::trezor::messages::management::Cancel >(Arena* arena) {
  return Arena::CreateInternal< ::hw::trezor::messages::management::Cancel >(arena);
}
template<> PROTOBUF_NOINLINE ::hw::trezor::messages::management::GetEntropy* Arena::CreateMaybeMessage< ::hw::trezor::messages::management::GetEntropy >(Arena* arena) {
  return Arena::CreateInternal< ::hw::trezor::messages::management::GetEntropy >(arena);
}
template<> PROTOBUF_NOINLINE ::hw::trezor::messages::management::Entropy* Arena::CreateMaybeMessage< ::hw::trezor::messages::management::Entropy >(Arena* arena) {
  return Arena::CreateInternal< ::hw::trezor::messages::management::Entropy >(arena);
}
template<> PROTOBUF_NOINLINE ::hw::trezor::messages::management::WipeDevice* Arena::CreateMaybeMessage< ::hw::trezor::messages::management::WipeDevice >(Arena* arena) {
  return Arena::CreateInternal< ::hw::trezor::messages::management::WipeDevice >(arena);
}
template<> PROTOBUF_NOINLINE ::hw::trezor::messages::management::LoadDevice* Arena::CreateMaybeMessage< ::hw::trezor::messages::management::LoadDevice >(Arena* arena) {
  return Arena::CreateInternal< ::hw::trezor::messages::management::LoadDevice >(arena);
}
template<> PROTOBUF_NOINLINE ::hw::trezor::messages::management::ResetDevice* Arena::CreateMaybeMessage< ::hw::trezor::messages::management::ResetDevice >(Arena* arena) {
  return Arena::CreateInternal< ::hw::trezor::messages::management::ResetDevice >(arena);
}
template<> PROTOBUF_NOINLINE ::hw::trezor::messages::management::BackupDevice* Arena::CreateMaybeMessage< ::hw::trezor::messages::management::BackupDevice >(Arena* arena) {
  return Arena::CreateInternal< ::hw::trezor::messages::management::BackupDevice >(arena);
}
template<> PROTOBUF_NOINLINE ::hw::trezor::messages::management::EntropyRequest* Arena::CreateMaybeMessage< ::hw::trezor::messages::management::EntropyRequest >(Arena* arena) {
  return Arena::CreateInternal< ::hw::trezor::messages::management::EntropyRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::hw::trezor::messages::management::EntropyAck* Arena::CreateMaybeMessage< ::hw::trezor::messages::management::EntropyAck >(Arena* arena) {
  return Arena::CreateInternal< ::hw::trezor::messages::management::EntropyAck >(arena);
}
template<> PROTOBUF_NOINLINE ::hw::trezor::messages::management::RecoveryDevice* Arena::CreateMaybeMessage< ::hw::trezor::messages::management::RecoveryDevice >(Arena* arena) {
  return Arena::CreateInternal< ::hw::trezor::messages::management::RecoveryDevice >(arena);
}
template<> PROTOBUF_NOINLINE ::hw::trezor::messages::management::WordRequest* Arena::CreateMaybeMessage< ::hw::trezor::messages::management::WordRequest >(Arena* arena) {
  return Arena::CreateInternal< ::hw::trezor::messages::management::WordRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::hw::trezor::messages::management::WordAck* Arena::CreateMaybeMessage< ::hw::trezor::messages::management::WordAck >(Arena* arena) {
  return Arena::CreateInternal< ::hw::trezor::messages::management::WordAck >(arena);
}
template<> PROTOBUF_NOINLINE ::hw::trezor::messages::management::SetU2FCounter* Arena::CreateMaybeMessage< ::hw::trezor::messages::management::SetU2FCounter >(Arena* arena) {
  return Arena::CreateInternal< ::hw::trezor::messages::management::SetU2FCounter >(arena);
}
template<> PROTOBUF_NOINLINE ::hw::trezor::messages::management::GetNextU2FCounter* Arena::CreateMaybeMessage< ::hw::trezor::messages::management::GetNextU2FCounter >(Arena* arena) {
  return Arena::CreateInternal< ::hw::trezor::messages::management::GetNextU2FCounter >(arena);
}
template<> PROTOBUF_NOINLINE ::hw::trezor::messages::management::NextU2FCounter* Arena::CreateMaybeMessage< ::hw::trezor::messages::management::NextU2FCounter >(Arena* arena) {
  return Arena::CreateInternal< ::hw::trezor::messages::management::NextU2FCounter >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
