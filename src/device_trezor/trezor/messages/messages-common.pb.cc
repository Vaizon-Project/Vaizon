// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: messages-common.proto

#include "messages-common.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

#ifdef minor
#undef minor
#endif
#include <google/protobuf/port_def.inc>
namespace hw {
namespace trezor {
namespace messages {
namespace common {
class SuccessDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Success> _instance;
} _Success_default_instance_;
class FailureDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Failure> _instance;
} _Failure_default_instance_;
class ButtonRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ButtonRequest> _instance;
} _ButtonRequest_default_instance_;
class ButtonAckDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ButtonAck> _instance;
} _ButtonAck_default_instance_;
class PinMatrixRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PinMatrixRequest> _instance;
} _PinMatrixRequest_default_instance_;
class PinMatrixAckDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PinMatrixAck> _instance;
} _PinMatrixAck_default_instance_;
class PassphraseRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PassphraseRequest> _instance;
} _PassphraseRequest_default_instance_;
class PassphraseAckDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PassphraseAck> _instance;
} _PassphraseAck_default_instance_;
class Deprecated_PassphraseStateRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Deprecated_PassphraseStateRequest> _instance;
} _Deprecated_PassphraseStateRequest_default_instance_;
class Deprecated_PassphraseStateAckDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Deprecated_PassphraseStateAck> _instance;
} _Deprecated_PassphraseStateAck_default_instance_;
class HDNodeTypeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<HDNodeType> _instance;
} _HDNodeType_default_instance_;
}  // namespace common
}  // namespace messages
}  // namespace trezor
}  // namespace hw
static void InitDefaultsscc_info_ButtonAck_messages_2dcommon_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hw::trezor::messages::common::_ButtonAck_default_instance_;
    new (ptr) ::hw::trezor::messages::common::ButtonAck();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hw::trezor::messages::common::ButtonAck::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ButtonAck_messages_2dcommon_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ButtonAck_messages_2dcommon_2eproto}, {}};

static void InitDefaultsscc_info_ButtonRequest_messages_2dcommon_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hw::trezor::messages::common::_ButtonRequest_default_instance_;
    new (ptr) ::hw::trezor::messages::common::ButtonRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hw::trezor::messages::common::ButtonRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ButtonRequest_messages_2dcommon_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ButtonRequest_messages_2dcommon_2eproto}, {}};

static void InitDefaultsscc_info_Deprecated_PassphraseStateAck_messages_2dcommon_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hw::trezor::messages::common::_Deprecated_PassphraseStateAck_default_instance_;
    new (ptr) ::hw::trezor::messages::common::Deprecated_PassphraseStateAck();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hw::trezor::messages::common::Deprecated_PassphraseStateAck::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Deprecated_PassphraseStateAck_messages_2dcommon_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Deprecated_PassphraseStateAck_messages_2dcommon_2eproto}, {}};

static void InitDefaultsscc_info_Deprecated_PassphraseStateRequest_messages_2dcommon_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hw::trezor::messages::common::_Deprecated_PassphraseStateRequest_default_instance_;
    new (ptr) ::hw::trezor::messages::common::Deprecated_PassphraseStateRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hw::trezor::messages::common::Deprecated_PassphraseStateRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Deprecated_PassphraseStateRequest_messages_2dcommon_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Deprecated_PassphraseStateRequest_messages_2dcommon_2eproto}, {}};

static void InitDefaultsscc_info_Failure_messages_2dcommon_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hw::trezor::messages::common::_Failure_default_instance_;
    new (ptr) ::hw::trezor::messages::common::Failure();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hw::trezor::messages::common::Failure::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Failure_messages_2dcommon_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Failure_messages_2dcommon_2eproto}, {}};

static void InitDefaultsscc_info_HDNodeType_messages_2dcommon_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hw::trezor::messages::common::_HDNodeType_default_instance_;
    new (ptr) ::hw::trezor::messages::common::HDNodeType();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hw::trezor::messages::common::HDNodeType::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_HDNodeType_messages_2dcommon_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_HDNodeType_messages_2dcommon_2eproto}, {}};

static void InitDefaultsscc_info_PassphraseAck_messages_2dcommon_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hw::trezor::messages::common::_PassphraseAck_default_instance_;
    new (ptr) ::hw::trezor::messages::common::PassphraseAck();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hw::trezor::messages::common::PassphraseAck::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PassphraseAck_messages_2dcommon_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PassphraseAck_messages_2dcommon_2eproto}, {}};

static void InitDefaultsscc_info_PassphraseRequest_messages_2dcommon_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hw::trezor::messages::common::_PassphraseRequest_default_instance_;
    new (ptr) ::hw::trezor::messages::common::PassphraseRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hw::trezor::messages::common::PassphraseRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PassphraseRequest_messages_2dcommon_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PassphraseRequest_messages_2dcommon_2eproto}, {}};

static void InitDefaultsscc_info_PinMatrixAck_messages_2dcommon_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hw::trezor::messages::common::_PinMatrixAck_default_instance_;
    new (ptr) ::hw::trezor::messages::common::PinMatrixAck();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hw::trezor::messages::common::PinMatrixAck::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PinMatrixAck_messages_2dcommon_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PinMatrixAck_messages_2dcommon_2eproto}, {}};

static void InitDefaultsscc_info_PinMatrixRequest_messages_2dcommon_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hw::trezor::messages::common::_PinMatrixRequest_default_instance_;
    new (ptr) ::hw::trezor::messages::common::PinMatrixRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hw::trezor::messages::common::PinMatrixRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PinMatrixRequest_messages_2dcommon_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PinMatrixRequest_messages_2dcommon_2eproto}, {}};

static void InitDefaultsscc_info_Success_messages_2dcommon_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hw::trezor::messages::common::_Success_default_instance_;
    new (ptr) ::hw::trezor::messages::common::Success();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hw::trezor::messages::common::Success::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Success_messages_2dcommon_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Success_messages_2dcommon_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_messages_2dcommon_2eproto[11];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_messages_2dcommon_2eproto[3];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_messages_2dcommon_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_messages_2dcommon_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::common::Success, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::common::Success, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::common::Success, message_),
  0,
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::common::Failure, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::common::Failure, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::common::Failure, code_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::common::Failure, message_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::common::ButtonRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::common::ButtonRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::common::ButtonRequest, code_),
  0,
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::common::ButtonAck, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::common::ButtonAck, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::common::PinMatrixRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::common::PinMatrixRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::common::PinMatrixRequest, type_),
  0,
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::common::PinMatrixAck, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::common::PinMatrixAck, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::common::PinMatrixAck, pin_),
  0,
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::common::PassphraseRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::common::PassphraseRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::common::PassphraseRequest, _on_device_),
  0,
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::common::PassphraseAck, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::common::PassphraseAck, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::common::PassphraseAck, passphrase_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::common::PassphraseAck, _state_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::common::PassphraseAck, on_device_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::common::Deprecated_PassphraseStateRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::common::Deprecated_PassphraseStateRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::common::Deprecated_PassphraseStateRequest, state_),
  0,
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::common::Deprecated_PassphraseStateAck, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::common::Deprecated_PassphraseStateAck, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::common::HDNodeType, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::common::HDNodeType, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::common::HDNodeType, depth_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::common::HDNodeType, fingerprint_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::common::HDNodeType, child_num_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::common::HDNodeType, chain_code_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::common::HDNodeType, private_key_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::common::HDNodeType, public_key_),
  3,
  4,
  5,
  0,
  1,
  2,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 6, sizeof(::hw::trezor::messages::common::Success)},
  { 7, 14, sizeof(::hw::trezor::messages::common::Failure)},
  { 16, 22, sizeof(::hw::trezor::messages::common::ButtonRequest)},
  { 23, 28, sizeof(::hw::trezor::messages::common::ButtonAck)},
  { 28, 34, sizeof(::hw::trezor::messages::common::PinMatrixRequest)},
  { 35, 41, sizeof(::hw::trezor::messages::common::PinMatrixAck)},
  { 42, 48, sizeof(::hw::trezor::messages::common::PassphraseRequest)},
  { 49, 57, sizeof(::hw::trezor::messages::common::PassphraseAck)},
  { 60, 66, sizeof(::hw::trezor::messages::common::Deprecated_PassphraseStateRequest)},
  { 67, 72, sizeof(::hw::trezor::messages::common::Deprecated_PassphraseStateAck)},
  { 72, 83, sizeof(::hw::trezor::messages::common::HDNodeType)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hw::trezor::messages::common::_Success_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hw::trezor::messages::common::_Failure_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hw::trezor::messages::common::_ButtonRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hw::trezor::messages::common::_ButtonAck_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hw::trezor::messages::common::_PinMatrixRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hw::trezor::messages::common::_PinMatrixAck_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hw::trezor::messages::common::_PassphraseRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hw::trezor::messages::common::_PassphraseAck_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hw::trezor::messages::common::_Deprecated_PassphraseStateRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hw::trezor::messages::common::_Deprecated_PassphraseStateAck_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hw::trezor::messages::common::_HDNodeType_default_instance_),
};

const char descriptor_table_protodef_messages_2dcommon_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\025messages-common.proto\022\031hw.trezor.messa"
  "ges.common\"\032\n\007Success\022\017\n\007message\030\001 \001(\t\"\344"
  "\003\n\007Failure\022<\n\004code\030\001 \001(\0162..hw.trezor.mes"
  "sages.common.Failure.FailureType\022\017\n\007mess"
  "age\030\002 \001(\t\"\211\003\n\013FailureType\022\035\n\031Failure_Une"
  "xpectedMessage\020\001\022\032\n\026Failure_ButtonExpect"
  "ed\020\002\022\025\n\021Failure_DataError\020\003\022\033\n\027Failure_A"
  "ctionCancelled\020\004\022\027\n\023Failure_PinExpected\020"
  "\005\022\030\n\024Failure_PinCancelled\020\006\022\026\n\022Failure_P"
  "inInvalid\020\007\022\034\n\030Failure_InvalidSignature\020"
  "\010\022\030\n\024Failure_ProcessError\020\t\022\032\n\026Failure_N"
  "otEnoughFunds\020\n\022\032\n\026Failure_NotInitialize"
  "d\020\013\022\027\n\023Failure_PinMismatch\020\014\022\034\n\030Failure_"
  "WipeCodeMismatch\020\r\022\031\n\025Failure_FirmwareEr"
  "ror\020c\"\331\005\n\rButtonRequest\022H\n\004code\030\001 \001(\0162:."
  "hw.trezor.messages.common.ButtonRequest."
  "ButtonRequestType\"\375\004\n\021ButtonRequestType\022"
  "\027\n\023ButtonRequest_Other\020\001\022\"\n\036ButtonReques"
  "t_FeeOverThreshold\020\002\022\037\n\033ButtonRequest_Co"
  "nfirmOutput\020\003\022\035\n\031ButtonRequest_ResetDevi"
  "ce\020\004\022\035\n\031ButtonRequest_ConfirmWord\020\005\022\034\n\030B"
  "uttonRequest_WipeDevice\020\006\022\035\n\031ButtonReque"
  "st_ProtectCall\020\007\022\030\n\024ButtonRequest_SignTx"
  "\020\010\022\037\n\033ButtonRequest_FirmwareCheck\020\t\022\031\n\025B"
  "uttonRequest_Address\020\n\022\033\n\027ButtonRequest_"
  "PublicKey\020\013\022#\n\037ButtonRequest_MnemonicWor"
  "dCount\020\014\022\037\n\033ButtonRequest_MnemonicInput\020"
  "\r\0220\n(_Deprecated_ButtonRequest_Passphras"
  "eType\020\016\032\002\010\001\022\'\n#ButtonRequest_UnknownDeri"
  "vationPath\020\017\022\"\n\036ButtonRequest_RecoveryHo"
  "mepage\020\020\022\031\n\025ButtonRequest_Success\020\021\022\031\n\025B"
  "uttonRequest_Warning\020\022\022!\n\035ButtonRequest_"
  "PassphraseEntry\020\023\"\013\n\tButtonAck\"\265\002\n\020PinMa"
  "trixRequest\022N\n\004type\030\001 \001(\0162@.hw.trezor.me"
  "ssages.common.PinMatrixRequest.PinMatrix"
  "RequestType\"\320\001\n\024PinMatrixRequestType\022 \n\034"
  "PinMatrixRequestType_Current\020\001\022!\n\035PinMat"
  "rixRequestType_NewFirst\020\002\022\"\n\036PinMatrixRe"
  "questType_NewSecond\020\003\022&\n\"PinMatrixReques"
  "tType_WipeCodeFirst\020\004\022\'\n#PinMatrixReques"
  "tType_WipeCodeSecond\020\005\"\033\n\014PinMatrixAck\022\013"
  "\n\003pin\030\001 \002(\t\"+\n\021PassphraseRequest\022\026\n\n_on_"
  "device\030\001 \001(\010B\002\030\001\"J\n\rPassphraseAck\022\022\n\npas"
  "sphrase\030\001 \001(\t\022\022\n\006_state\030\002 \001(\014B\002\030\001\022\021\n\ton_"
  "device\030\003 \001(\010\"6\n!Deprecated_PassphraseSta"
  "teRequest\022\r\n\005state\030\001 \001(\014:\002\030\001\"#\n\035Deprecat"
  "ed_PassphraseStateAck:\002\030\001\"\200\001\n\nHDNodeType"
  "\022\r\n\005depth\030\001 \002(\r\022\023\n\013fingerprint\030\002 \002(\r\022\021\n\t"
  "child_num\030\003 \002(\r\022\022\n\nchain_code\030\004 \002(\014\022\023\n\013p"
  "rivate_key\030\005 \001(\014\022\022\n\npublic_key\030\006 \001(\014B:\n#"
  "com.satoshilabs.trezor.lib.protobufB\023Tre"
  "zorMessageCommon"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_messages_2dcommon_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_messages_2dcommon_2eproto_sccs[11] = {
  &scc_info_ButtonAck_messages_2dcommon_2eproto.base,
  &scc_info_ButtonRequest_messages_2dcommon_2eproto.base,
  &scc_info_Deprecated_PassphraseStateAck_messages_2dcommon_2eproto.base,
  &scc_info_Deprecated_PassphraseStateRequest_messages_2dcommon_2eproto.base,
  &scc_info_Failure_messages_2dcommon_2eproto.base,
  &scc_info_HDNodeType_messages_2dcommon_2eproto.base,
  &scc_info_PassphraseAck_messages_2dcommon_2eproto.base,
  &scc_info_PassphraseRequest_messages_2dcommon_2eproto.base,
  &scc_info_PinMatrixAck_messages_2dcommon_2eproto.base,
  &scc_info_PinMatrixRequest_messages_2dcommon_2eproto.base,
  &scc_info_Success_messages_2dcommon_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_messages_2dcommon_2eproto_once;
static bool descriptor_table_messages_2dcommon_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_messages_2dcommon_2eproto = {
  &descriptor_table_messages_2dcommon_2eproto_initialized, descriptor_table_protodef_messages_2dcommon_2eproto, "messages-common.proto", 2056,
  &descriptor_table_messages_2dcommon_2eproto_once, descriptor_table_messages_2dcommon_2eproto_sccs, descriptor_table_messages_2dcommon_2eproto_deps, 11, 0,
  schemas, file_default_instances, TableStruct_messages_2dcommon_2eproto::offsets,
  file_level_metadata_messages_2dcommon_2eproto, 11, file_level_enum_descriptors_messages_2dcommon_2eproto, file_level_service_descriptors_messages_2dcommon_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_messages_2dcommon_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_messages_2dcommon_2eproto), true);
namespace hw {
namespace trezor {
namespace messages {
namespace common {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Failure_FailureType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_messages_2dcommon_2eproto);
  return file_level_enum_descriptors_messages_2dcommon_2eproto[0];
}
bool Failure_FailureType_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 99:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Failure_FailureType Failure::Failure_UnexpectedMessage;
constexpr Failure_FailureType Failure::Failure_ButtonExpected;
constexpr Failure_FailureType Failure::Failure_DataError;
constexpr Failure_FailureType Failure::Failure_ActionCancelled;
constexpr Failure_FailureType Failure::Failure_PinExpected;
constexpr Failure_FailureType Failure::Failure_PinCancelled;
constexpr Failure_FailureType Failure::Failure_PinInvalid;
constexpr Failure_FailureType Failure::Failure_InvalidSignature;
constexpr Failure_FailureType Failure::Failure_ProcessError;
constexpr Failure_FailureType Failure::Failure_NotEnoughFunds;
constexpr Failure_FailureType Failure::Failure_NotInitialized;
constexpr Failure_FailureType Failure::Failure_PinMismatch;
constexpr Failure_FailureType Failure::Failure_WipeCodeMismatch;
constexpr Failure_FailureType Failure::Failure_FirmwareError;
constexpr Failure_FailureType Failure::FailureType_MIN;
constexpr Failure_FailureType Failure::FailureType_MAX;
constexpr int Failure::FailureType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ButtonRequest_ButtonRequestType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_messages_2dcommon_2eproto);
  return file_level_enum_descriptors_messages_2dcommon_2eproto[1];
}
bool ButtonRequest_ButtonRequestType_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr ButtonRequest_ButtonRequestType ButtonRequest::ButtonRequest_Other;
constexpr ButtonRequest_ButtonRequestType ButtonRequest::ButtonRequest_FeeOverThreshold;
constexpr ButtonRequest_ButtonRequestType ButtonRequest::ButtonRequest_ConfirmOutput;
constexpr ButtonRequest_ButtonRequestType ButtonRequest::ButtonRequest_ResetDevice;
constexpr ButtonRequest_ButtonRequestType ButtonRequest::ButtonRequest_ConfirmWord;
constexpr ButtonRequest_ButtonRequestType ButtonRequest::ButtonRequest_WipeDevice;
constexpr ButtonRequest_ButtonRequestType ButtonRequest::ButtonRequest_ProtectCall;
constexpr ButtonRequest_ButtonRequestType ButtonRequest::ButtonRequest_SignTx;
constexpr ButtonRequest_ButtonRequestType ButtonRequest::ButtonRequest_FirmwareCheck;
constexpr ButtonRequest_ButtonRequestType ButtonRequest::ButtonRequest_Address;
constexpr ButtonRequest_ButtonRequestType ButtonRequest::ButtonRequest_PublicKey;
constexpr ButtonRequest_ButtonRequestType ButtonRequest::ButtonRequest_MnemonicWordCount;
constexpr ButtonRequest_ButtonRequestType ButtonRequest::ButtonRequest_MnemonicInput;
constexpr ButtonRequest_ButtonRequestType ButtonRequest::_Deprecated_ButtonRequest_PassphraseType;
constexpr ButtonRequest_ButtonRequestType ButtonRequest::ButtonRequest_UnknownDerivationPath;
constexpr ButtonRequest_ButtonRequestType ButtonRequest::ButtonRequest_RecoveryHomepage;
constexpr ButtonRequest_ButtonRequestType ButtonRequest::ButtonRequest_Success;
constexpr ButtonRequest_ButtonRequestType ButtonRequest::ButtonRequest_Warning;
constexpr ButtonRequest_ButtonRequestType ButtonRequest::ButtonRequest_PassphraseEntry;
constexpr ButtonRequest_ButtonRequestType ButtonRequest::ButtonRequestType_MIN;
constexpr ButtonRequest_ButtonRequestType ButtonRequest::ButtonRequestType_MAX;
constexpr int ButtonRequest::ButtonRequestType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PinMatrixRequest_PinMatrixRequestType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_messages_2dcommon_2eproto);
  return file_level_enum_descriptors_messages_2dcommon_2eproto[2];
}
bool PinMatrixRequest_PinMatrixRequestType_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr PinMatrixRequest_PinMatrixRequestType PinMatrixRequest::PinMatrixRequestType_Current;
constexpr PinMatrixRequest_PinMatrixRequestType PinMatrixRequest::PinMatrixRequestType_NewFirst;
constexpr PinMatrixRequest_PinMatrixRequestType PinMatrixRequest::PinMatrixRequestType_NewSecond;
constexpr PinMatrixRequest_PinMatrixRequestType PinMatrixRequest::PinMatrixRequestType_WipeCodeFirst;
constexpr PinMatrixRequest_PinMatrixRequestType PinMatrixRequest::PinMatrixRequestType_WipeCodeSecond;
constexpr PinMatrixRequest_PinMatrixRequestType PinMatrixRequest::PinMatrixRequestType_MIN;
constexpr PinMatrixRequest_PinMatrixRequestType PinMatrixRequest::PinMatrixRequestType_MAX;
constexpr int PinMatrixRequest::PinMatrixRequestType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

void Success::InitAsDefaultInstance() {
}
class Success::_Internal {
 public:
  using HasBits = decltype(std::declval<Success>()._has_bits_);
  static void set_has_message(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

Success::Success()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hw.trezor.messages.common.Success)
}
Success::Success(const Success& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_message()) {
    message_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.message_);
  }
  // @@protoc_insertion_point(copy_constructor:hw.trezor.messages.common.Success)
}

void Success::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Success_messages_2dcommon_2eproto.base);
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

Success::~Success() {
  // @@protoc_insertion_point(destructor:hw.trezor.messages.common.Success)
  SharedDtor();
}

void Success::SharedDtor() {
  message_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Success::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Success& Success::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Success_messages_2dcommon_2eproto.base);
  return *internal_default_instance();
}


void Success::Clear() {
// @@protoc_insertion_point(message_clear_start:hw.trezor.messages.common.Success)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    message_.ClearNonDefaultToEmptyNoArena();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* Success::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string message = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_message();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "hw.trezor.messages.common.Success.message");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Success::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hw.trezor.messages.common.Success)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string message = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_message().data(), static_cast<int>(this->_internal_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "hw.trezor.messages.common.Success.message");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_message(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hw.trezor.messages.common.Success)
  return target;
}

size_t Success::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hw.trezor.messages.common.Success)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string message = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Success::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hw.trezor.messages.common.Success)
  GOOGLE_DCHECK_NE(&from, this);
  const Success* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Success>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hw.trezor.messages.common.Success)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hw.trezor.messages.common.Success)
    MergeFrom(*source);
  }
}

void Success::MergeFrom(const Success& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hw.trezor.messages.common.Success)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_message()) {
    _has_bits_[0] |= 0x00000001u;
    message_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.message_);
  }
}

void Success::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hw.trezor.messages.common.Success)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Success::CopyFrom(const Success& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hw.trezor.messages.common.Success)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Success::IsInitialized() const {
  return true;
}

void Success::InternalSwap(Success* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  message_.Swap(&other->message_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata Success::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Failure::InitAsDefaultInstance() {
}
class Failure::_Internal {
 public:
  using HasBits = decltype(std::declval<Failure>()._has_bits_);
  static void set_has_code(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_message(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

Failure::Failure()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hw.trezor.messages.common.Failure)
}
Failure::Failure(const Failure& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_message()) {
    message_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.message_);
  }
  code_ = from.code_;
  // @@protoc_insertion_point(copy_constructor:hw.trezor.messages.common.Failure)
}

void Failure::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Failure_messages_2dcommon_2eproto.base);
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  code_ = 1;
}

Failure::~Failure() {
  // @@protoc_insertion_point(destructor:hw.trezor.messages.common.Failure)
  SharedDtor();
}

void Failure::SharedDtor() {
  message_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Failure::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Failure& Failure::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Failure_messages_2dcommon_2eproto.base);
  return *internal_default_instance();
}


void Failure::Clear() {
// @@protoc_insertion_point(message_clear_start:hw.trezor.messages.common.Failure)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      message_.ClearNonDefaultToEmptyNoArena();
    }
    code_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* Failure::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .hw.trezor.messages.common.Failure.FailureType code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::hw::trezor::messages::common::Failure_FailureType_IsValid(val))) {
            _internal_set_code(static_cast<::hw::trezor::messages::common::Failure_FailureType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional string message = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_message();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "hw.trezor.messages.common.Failure.message");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Failure::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hw.trezor.messages.common.Failure)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .hw.trezor.messages.common.Failure.FailureType code = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_code(), target);
  }

  // optional string message = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_message().data(), static_cast<int>(this->_internal_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "hw.trezor.messages.common.Failure.message");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_message(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hw.trezor.messages.common.Failure)
  return target;
}

size_t Failure::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hw.trezor.messages.common.Failure)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string message = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_message());
    }

    // optional .hw.trezor.messages.common.Failure.FailureType code = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_code());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Failure::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hw.trezor.messages.common.Failure)
  GOOGLE_DCHECK_NE(&from, this);
  const Failure* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Failure>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hw.trezor.messages.common.Failure)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hw.trezor.messages.common.Failure)
    MergeFrom(*source);
  }
}

void Failure::MergeFrom(const Failure& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hw.trezor.messages.common.Failure)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      message_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.message_);
    }
    if (cached_has_bits & 0x00000002u) {
      code_ = from.code_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Failure::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hw.trezor.messages.common.Failure)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Failure::CopyFrom(const Failure& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hw.trezor.messages.common.Failure)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Failure::IsInitialized() const {
  return true;
}

void Failure::InternalSwap(Failure* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  message_.Swap(&other->message_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(code_, other->code_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Failure::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ButtonRequest::InitAsDefaultInstance() {
}
class ButtonRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<ButtonRequest>()._has_bits_);
  static void set_has_code(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

ButtonRequest::ButtonRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hw.trezor.messages.common.ButtonRequest)
}
ButtonRequest::ButtonRequest(const ButtonRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  code_ = from.code_;
  // @@protoc_insertion_point(copy_constructor:hw.trezor.messages.common.ButtonRequest)
}

void ButtonRequest::SharedCtor() {
  code_ = 1;
}

ButtonRequest::~ButtonRequest() {
  // @@protoc_insertion_point(destructor:hw.trezor.messages.common.ButtonRequest)
  SharedDtor();
}

void ButtonRequest::SharedDtor() {
}

void ButtonRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ButtonRequest& ButtonRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ButtonRequest_messages_2dcommon_2eproto.base);
  return *internal_default_instance();
}


void ButtonRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:hw.trezor.messages.common.ButtonRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  code_ = 1;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* ButtonRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .hw.trezor.messages.common.ButtonRequest.ButtonRequestType code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::hw::trezor::messages::common::ButtonRequest_ButtonRequestType_IsValid(val))) {
            _internal_set_code(static_cast<::hw::trezor::messages::common::ButtonRequest_ButtonRequestType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ButtonRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hw.trezor.messages.common.ButtonRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .hw.trezor.messages.common.ButtonRequest.ButtonRequestType code = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_code(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hw.trezor.messages.common.ButtonRequest)
  return target;
}

size_t ButtonRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hw.trezor.messages.common.ButtonRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .hw.trezor.messages.common.ButtonRequest.ButtonRequestType code = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_code());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ButtonRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hw.trezor.messages.common.ButtonRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ButtonRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ButtonRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hw.trezor.messages.common.ButtonRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hw.trezor.messages.common.ButtonRequest)
    MergeFrom(*source);
  }
}

void ButtonRequest::MergeFrom(const ButtonRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hw.trezor.messages.common.ButtonRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_code()) {
    _internal_set_code(from._internal_code());
  }
}

void ButtonRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hw.trezor.messages.common.ButtonRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ButtonRequest::CopyFrom(const ButtonRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hw.trezor.messages.common.ButtonRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ButtonRequest::IsInitialized() const {
  return true;
}

void ButtonRequest::InternalSwap(ButtonRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(code_, other->code_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ButtonRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ButtonAck::InitAsDefaultInstance() {
}
class ButtonAck::_Internal {
 public:
  using HasBits = decltype(std::declval<ButtonAck>()._has_bits_);
};

ButtonAck::ButtonAck()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hw.trezor.messages.common.ButtonAck)
}
ButtonAck::ButtonAck(const ButtonAck& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:hw.trezor.messages.common.ButtonAck)
}

void ButtonAck::SharedCtor() {
}

ButtonAck::~ButtonAck() {
  // @@protoc_insertion_point(destructor:hw.trezor.messages.common.ButtonAck)
  SharedDtor();
}

void ButtonAck::SharedDtor() {
}

void ButtonAck::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ButtonAck& ButtonAck::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ButtonAck_messages_2dcommon_2eproto.base);
  return *internal_default_instance();
}


void ButtonAck::Clear() {
// @@protoc_insertion_point(message_clear_start:hw.trezor.messages.common.ButtonAck)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* ButtonAck::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ButtonAck::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hw.trezor.messages.common.ButtonAck)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hw.trezor.messages.common.ButtonAck)
  return target;
}

size_t ButtonAck::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hw.trezor.messages.common.ButtonAck)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ButtonAck::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hw.trezor.messages.common.ButtonAck)
  GOOGLE_DCHECK_NE(&from, this);
  const ButtonAck* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ButtonAck>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hw.trezor.messages.common.ButtonAck)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hw.trezor.messages.common.ButtonAck)
    MergeFrom(*source);
  }
}

void ButtonAck::MergeFrom(const ButtonAck& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hw.trezor.messages.common.ButtonAck)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void ButtonAck::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hw.trezor.messages.common.ButtonAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ButtonAck::CopyFrom(const ButtonAck& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hw.trezor.messages.common.ButtonAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ButtonAck::IsInitialized() const {
  return true;
}

void ButtonAck::InternalSwap(ButtonAck* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata ButtonAck::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PinMatrixRequest::InitAsDefaultInstance() {
}
class PinMatrixRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<PinMatrixRequest>()._has_bits_);
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

PinMatrixRequest::PinMatrixRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hw.trezor.messages.common.PinMatrixRequest)
}
PinMatrixRequest::PinMatrixRequest(const PinMatrixRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:hw.trezor.messages.common.PinMatrixRequest)
}

void PinMatrixRequest::SharedCtor() {
  type_ = 1;
}

PinMatrixRequest::~PinMatrixRequest() {
  // @@protoc_insertion_point(destructor:hw.trezor.messages.common.PinMatrixRequest)
  SharedDtor();
}

void PinMatrixRequest::SharedDtor() {
}

void PinMatrixRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PinMatrixRequest& PinMatrixRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PinMatrixRequest_messages_2dcommon_2eproto.base);
  return *internal_default_instance();
}


void PinMatrixRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:hw.trezor.messages.common.PinMatrixRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  type_ = 1;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* PinMatrixRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .hw.trezor.messages.common.PinMatrixRequest.PinMatrixRequestType type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::hw::trezor::messages::common::PinMatrixRequest_PinMatrixRequestType_IsValid(val))) {
            _internal_set_type(static_cast<::hw::trezor::messages::common::PinMatrixRequest_PinMatrixRequestType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PinMatrixRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hw.trezor.messages.common.PinMatrixRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .hw.trezor.messages.common.PinMatrixRequest.PinMatrixRequestType type = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hw.trezor.messages.common.PinMatrixRequest)
  return target;
}

size_t PinMatrixRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hw.trezor.messages.common.PinMatrixRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .hw.trezor.messages.common.PinMatrixRequest.PinMatrixRequestType type = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PinMatrixRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hw.trezor.messages.common.PinMatrixRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const PinMatrixRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PinMatrixRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hw.trezor.messages.common.PinMatrixRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hw.trezor.messages.common.PinMatrixRequest)
    MergeFrom(*source);
  }
}

void PinMatrixRequest::MergeFrom(const PinMatrixRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hw.trezor.messages.common.PinMatrixRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_type()) {
    _internal_set_type(from._internal_type());
  }
}

void PinMatrixRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hw.trezor.messages.common.PinMatrixRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PinMatrixRequest::CopyFrom(const PinMatrixRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hw.trezor.messages.common.PinMatrixRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PinMatrixRequest::IsInitialized() const {
  return true;
}

void PinMatrixRequest::InternalSwap(PinMatrixRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(type_, other->type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PinMatrixRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PinMatrixAck::InitAsDefaultInstance() {
}
class PinMatrixAck::_Internal {
 public:
  using HasBits = decltype(std::declval<PinMatrixAck>()._has_bits_);
  static void set_has_pin(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

PinMatrixAck::PinMatrixAck()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hw.trezor.messages.common.PinMatrixAck)
}
PinMatrixAck::PinMatrixAck(const PinMatrixAck& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  pin_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_pin()) {
    pin_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.pin_);
  }
  // @@protoc_insertion_point(copy_constructor:hw.trezor.messages.common.PinMatrixAck)
}

void PinMatrixAck::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PinMatrixAck_messages_2dcommon_2eproto.base);
  pin_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

PinMatrixAck::~PinMatrixAck() {
  // @@protoc_insertion_point(destructor:hw.trezor.messages.common.PinMatrixAck)
  SharedDtor();
}

void PinMatrixAck::SharedDtor() {
  pin_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PinMatrixAck::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PinMatrixAck& PinMatrixAck::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PinMatrixAck_messages_2dcommon_2eproto.base);
  return *internal_default_instance();
}


void PinMatrixAck::Clear() {
// @@protoc_insertion_point(message_clear_start:hw.trezor.messages.common.PinMatrixAck)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    pin_.ClearNonDefaultToEmptyNoArena();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* PinMatrixAck::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required string pin = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_pin();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "hw.trezor.messages.common.PinMatrixAck.pin");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PinMatrixAck::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hw.trezor.messages.common.PinMatrixAck)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string pin = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_pin().data(), static_cast<int>(this->_internal_pin().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "hw.trezor.messages.common.PinMatrixAck.pin");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_pin(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hw.trezor.messages.common.PinMatrixAck)
  return target;
}

size_t PinMatrixAck::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hw.trezor.messages.common.PinMatrixAck)
  size_t total_size = 0;

  // required string pin = 1;
  if (_internal_has_pin()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_pin());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PinMatrixAck::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hw.trezor.messages.common.PinMatrixAck)
  GOOGLE_DCHECK_NE(&from, this);
  const PinMatrixAck* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PinMatrixAck>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hw.trezor.messages.common.PinMatrixAck)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hw.trezor.messages.common.PinMatrixAck)
    MergeFrom(*source);
  }
}

void PinMatrixAck::MergeFrom(const PinMatrixAck& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hw.trezor.messages.common.PinMatrixAck)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_pin()) {
    _has_bits_[0] |= 0x00000001u;
    pin_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.pin_);
  }
}

void PinMatrixAck::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hw.trezor.messages.common.PinMatrixAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PinMatrixAck::CopyFrom(const PinMatrixAck& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hw.trezor.messages.common.PinMatrixAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PinMatrixAck::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void PinMatrixAck::InternalSwap(PinMatrixAck* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  pin_.Swap(&other->pin_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata PinMatrixAck::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PassphraseRequest::InitAsDefaultInstance() {
}
class PassphraseRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<PassphraseRequest>()._has_bits_);
  static void set_has__on_device(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

PassphraseRequest::PassphraseRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hw.trezor.messages.common.PassphraseRequest)
}
PassphraseRequest::PassphraseRequest(const PassphraseRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  _on_device_ = from._on_device_;
  // @@protoc_insertion_point(copy_constructor:hw.trezor.messages.common.PassphraseRequest)
}

void PassphraseRequest::SharedCtor() {
  _on_device_ = false;
}

PassphraseRequest::~PassphraseRequest() {
  // @@protoc_insertion_point(destructor:hw.trezor.messages.common.PassphraseRequest)
  SharedDtor();
}

void PassphraseRequest::SharedDtor() {
}

void PassphraseRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PassphraseRequest& PassphraseRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PassphraseRequest_messages_2dcommon_2eproto.base);
  return *internal_default_instance();
}


void PassphraseRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:hw.trezor.messages.common.PassphraseRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _on_device_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* PassphraseRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool _on_device = 1 [deprecated = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has__on_device(&has_bits);
          _on_device_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PassphraseRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hw.trezor.messages.common.PassphraseRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool _on_device = 1 [deprecated = true];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal__on_device(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hw.trezor.messages.common.PassphraseRequest)
  return target;
}

size_t PassphraseRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hw.trezor.messages.common.PassphraseRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool _on_device = 1 [deprecated = true];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PassphraseRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hw.trezor.messages.common.PassphraseRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const PassphraseRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PassphraseRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hw.trezor.messages.common.PassphraseRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hw.trezor.messages.common.PassphraseRequest)
    MergeFrom(*source);
  }
}

void PassphraseRequest::MergeFrom(const PassphraseRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hw.trezor.messages.common.PassphraseRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has__on_device()) {
    _internal_set__on_device(from._internal__on_device());
  }
}

void PassphraseRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hw.trezor.messages.common.PassphraseRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PassphraseRequest::CopyFrom(const PassphraseRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hw.trezor.messages.common.PassphraseRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PassphraseRequest::IsInitialized() const {
  return true;
}

void PassphraseRequest::InternalSwap(PassphraseRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(_on_device_, other->_on_device_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PassphraseRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PassphraseAck::InitAsDefaultInstance() {
}
class PassphraseAck::_Internal {
 public:
  using HasBits = decltype(std::declval<PassphraseAck>()._has_bits_);
  static void set_has_passphrase(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has__state(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_on_device(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

PassphraseAck::PassphraseAck()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hw.trezor.messages.common.PassphraseAck)
}
PassphraseAck::PassphraseAck(const PassphraseAck& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  passphrase_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_passphrase()) {
    passphrase_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.passphrase_);
  }
  _state_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has__state()) {
    _state_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._state_);
  }
  on_device_ = from.on_device_;
  // @@protoc_insertion_point(copy_constructor:hw.trezor.messages.common.PassphraseAck)
}

void PassphraseAck::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PassphraseAck_messages_2dcommon_2eproto.base);
  passphrase_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _state_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  on_device_ = false;
}

PassphraseAck::~PassphraseAck() {
  // @@protoc_insertion_point(destructor:hw.trezor.messages.common.PassphraseAck)
  SharedDtor();
}

void PassphraseAck::SharedDtor() {
  passphrase_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _state_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PassphraseAck::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PassphraseAck& PassphraseAck::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PassphraseAck_messages_2dcommon_2eproto.base);
  return *internal_default_instance();
}


void PassphraseAck::Clear() {
// @@protoc_insertion_point(message_clear_start:hw.trezor.messages.common.PassphraseAck)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      passphrase_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      _state_.ClearNonDefaultToEmptyNoArena();
    }
  }
  on_device_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* PassphraseAck::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string passphrase = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_passphrase();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "hw.trezor.messages.common.PassphraseAck.passphrase");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes _state = 2 [deprecated = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable__state();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool on_device = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_on_device(&has_bits);
          on_device_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PassphraseAck::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hw.trezor.messages.common.PassphraseAck)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string passphrase = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_passphrase().data(), static_cast<int>(this->_internal_passphrase().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "hw.trezor.messages.common.PassphraseAck.passphrase");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_passphrase(), target);
  }

  // optional bytes _state = 2 [deprecated = true];
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal__state(), target);
  }

  // optional bool on_device = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_on_device(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hw.trezor.messages.common.PassphraseAck)
  return target;
}

size_t PassphraseAck::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hw.trezor.messages.common.PassphraseAck)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string passphrase = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_passphrase());
    }

    // optional bytes _state = 2 [deprecated = true];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal__state());
    }

    // optional bool on_device = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PassphraseAck::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hw.trezor.messages.common.PassphraseAck)
  GOOGLE_DCHECK_NE(&from, this);
  const PassphraseAck* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PassphraseAck>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hw.trezor.messages.common.PassphraseAck)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hw.trezor.messages.common.PassphraseAck)
    MergeFrom(*source);
  }
}

void PassphraseAck::MergeFrom(const PassphraseAck& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hw.trezor.messages.common.PassphraseAck)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      passphrase_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.passphrase_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      _state_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._state_);
    }
    if (cached_has_bits & 0x00000004u) {
      on_device_ = from.on_device_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PassphraseAck::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hw.trezor.messages.common.PassphraseAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PassphraseAck::CopyFrom(const PassphraseAck& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hw.trezor.messages.common.PassphraseAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PassphraseAck::IsInitialized() const {
  return true;
}

void PassphraseAck::InternalSwap(PassphraseAck* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  passphrase_.Swap(&other->passphrase_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  _state_.Swap(&other->_state_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(on_device_, other->on_device_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PassphraseAck::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Deprecated_PassphraseStateRequest::InitAsDefaultInstance() {
}
class Deprecated_PassphraseStateRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<Deprecated_PassphraseStateRequest>()._has_bits_);
  static void set_has_state(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

Deprecated_PassphraseStateRequest::Deprecated_PassphraseStateRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hw.trezor.messages.common.Deprecated_PassphraseStateRequest)
}
Deprecated_PassphraseStateRequest::Deprecated_PassphraseStateRequest(const Deprecated_PassphraseStateRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  state_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_state()) {
    state_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.state_);
  }
  // @@protoc_insertion_point(copy_constructor:hw.trezor.messages.common.Deprecated_PassphraseStateRequest)
}

void Deprecated_PassphraseStateRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Deprecated_PassphraseStateRequest_messages_2dcommon_2eproto.base);
  state_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

Deprecated_PassphraseStateRequest::~Deprecated_PassphraseStateRequest() {
  // @@protoc_insertion_point(destructor:hw.trezor.messages.common.Deprecated_PassphraseStateRequest)
  SharedDtor();
}

void Deprecated_PassphraseStateRequest::SharedDtor() {
  state_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Deprecated_PassphraseStateRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Deprecated_PassphraseStateRequest& Deprecated_PassphraseStateRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Deprecated_PassphraseStateRequest_messages_2dcommon_2eproto.base);
  return *internal_default_instance();
}


void Deprecated_PassphraseStateRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:hw.trezor.messages.common.Deprecated_PassphraseStateRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    state_.ClearNonDefaultToEmptyNoArena();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* Deprecated_PassphraseStateRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bytes state = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_state();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Deprecated_PassphraseStateRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hw.trezor.messages.common.Deprecated_PassphraseStateRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes state = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_state(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hw.trezor.messages.common.Deprecated_PassphraseStateRequest)
  return target;
}

size_t Deprecated_PassphraseStateRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hw.trezor.messages.common.Deprecated_PassphraseStateRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bytes state = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_state());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Deprecated_PassphraseStateRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hw.trezor.messages.common.Deprecated_PassphraseStateRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const Deprecated_PassphraseStateRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Deprecated_PassphraseStateRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hw.trezor.messages.common.Deprecated_PassphraseStateRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hw.trezor.messages.common.Deprecated_PassphraseStateRequest)
    MergeFrom(*source);
  }
}

void Deprecated_PassphraseStateRequest::MergeFrom(const Deprecated_PassphraseStateRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hw.trezor.messages.common.Deprecated_PassphraseStateRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_state()) {
    _has_bits_[0] |= 0x00000001u;
    state_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.state_);
  }
}

void Deprecated_PassphraseStateRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hw.trezor.messages.common.Deprecated_PassphraseStateRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Deprecated_PassphraseStateRequest::CopyFrom(const Deprecated_PassphraseStateRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hw.trezor.messages.common.Deprecated_PassphraseStateRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Deprecated_PassphraseStateRequest::IsInitialized() const {
  return true;
}

void Deprecated_PassphraseStateRequest::InternalSwap(Deprecated_PassphraseStateRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  state_.Swap(&other->state_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata Deprecated_PassphraseStateRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Deprecated_PassphraseStateAck::InitAsDefaultInstance() {
}
class Deprecated_PassphraseStateAck::_Internal {
 public:
  using HasBits = decltype(std::declval<Deprecated_PassphraseStateAck>()._has_bits_);
};

Deprecated_PassphraseStateAck::Deprecated_PassphraseStateAck()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hw.trezor.messages.common.Deprecated_PassphraseStateAck)
}
Deprecated_PassphraseStateAck::Deprecated_PassphraseStateAck(const Deprecated_PassphraseStateAck& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:hw.trezor.messages.common.Deprecated_PassphraseStateAck)
}

void Deprecated_PassphraseStateAck::SharedCtor() {
}

Deprecated_PassphraseStateAck::~Deprecated_PassphraseStateAck() {
  // @@protoc_insertion_point(destructor:hw.trezor.messages.common.Deprecated_PassphraseStateAck)
  SharedDtor();
}

void Deprecated_PassphraseStateAck::SharedDtor() {
}

void Deprecated_PassphraseStateAck::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Deprecated_PassphraseStateAck& Deprecated_PassphraseStateAck::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Deprecated_PassphraseStateAck_messages_2dcommon_2eproto.base);
  return *internal_default_instance();
}


void Deprecated_PassphraseStateAck::Clear() {
// @@protoc_insertion_point(message_clear_start:hw.trezor.messages.common.Deprecated_PassphraseStateAck)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* Deprecated_PassphraseStateAck::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Deprecated_PassphraseStateAck::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hw.trezor.messages.common.Deprecated_PassphraseStateAck)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hw.trezor.messages.common.Deprecated_PassphraseStateAck)
  return target;
}

size_t Deprecated_PassphraseStateAck::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hw.trezor.messages.common.Deprecated_PassphraseStateAck)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Deprecated_PassphraseStateAck::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hw.trezor.messages.common.Deprecated_PassphraseStateAck)
  GOOGLE_DCHECK_NE(&from, this);
  const Deprecated_PassphraseStateAck* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Deprecated_PassphraseStateAck>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hw.trezor.messages.common.Deprecated_PassphraseStateAck)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hw.trezor.messages.common.Deprecated_PassphraseStateAck)
    MergeFrom(*source);
  }
}

void Deprecated_PassphraseStateAck::MergeFrom(const Deprecated_PassphraseStateAck& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hw.trezor.messages.common.Deprecated_PassphraseStateAck)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void Deprecated_PassphraseStateAck::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hw.trezor.messages.common.Deprecated_PassphraseStateAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Deprecated_PassphraseStateAck::CopyFrom(const Deprecated_PassphraseStateAck& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hw.trezor.messages.common.Deprecated_PassphraseStateAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Deprecated_PassphraseStateAck::IsInitialized() const {
  return true;
}

void Deprecated_PassphraseStateAck::InternalSwap(Deprecated_PassphraseStateAck* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata Deprecated_PassphraseStateAck::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void HDNodeType::InitAsDefaultInstance() {
}
class HDNodeType::_Internal {
 public:
  using HasBits = decltype(std::declval<HDNodeType>()._has_bits_);
  static void set_has_depth(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_fingerprint(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_child_num(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_chain_code(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_private_key(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_public_key(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

HDNodeType::HDNodeType()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hw.trezor.messages.common.HDNodeType)
}
HDNodeType::HDNodeType(const HDNodeType& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  chain_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_chain_code()) {
    chain_code_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.chain_code_);
  }
  private_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_private_key()) {
    private_key_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.private_key_);
  }
  public_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_public_key()) {
    public_key_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.public_key_);
  }
  ::memcpy(&depth_, &from.depth_,
    static_cast<size_t>(reinterpret_cast<char*>(&child_num_) -
    reinterpret_cast<char*>(&depth_)) + sizeof(child_num_));
  // @@protoc_insertion_point(copy_constructor:hw.trezor.messages.common.HDNodeType)
}

void HDNodeType::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_HDNodeType_messages_2dcommon_2eproto.base);
  chain_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  private_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  public_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&depth_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&child_num_) -
      reinterpret_cast<char*>(&depth_)) + sizeof(child_num_));
}

HDNodeType::~HDNodeType() {
  // @@protoc_insertion_point(destructor:hw.trezor.messages.common.HDNodeType)
  SharedDtor();
}

void HDNodeType::SharedDtor() {
  chain_code_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  private_key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  public_key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void HDNodeType::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const HDNodeType& HDNodeType::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_HDNodeType_messages_2dcommon_2eproto.base);
  return *internal_default_instance();
}


void HDNodeType::Clear() {
// @@protoc_insertion_point(message_clear_start:hw.trezor.messages.common.HDNodeType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      chain_code_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      private_key_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      public_key_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 0x00000038u) {
    ::memset(&depth_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&child_num_) -
        reinterpret_cast<char*>(&depth_)) + sizeof(child_num_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* HDNodeType::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required uint32 depth = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_depth(&has_bits);
          depth_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 fingerprint = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_fingerprint(&has_bits);
          fingerprint_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 child_num = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_child_num(&has_bits);
          child_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required bytes chain_code = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_chain_code();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes private_key = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_private_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes public_key = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_public_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* HDNodeType::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hw.trezor.messages.common.HDNodeType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 depth = 1;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_depth(), target);
  }

  // required uint32 fingerprint = 2;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_fingerprint(), target);
  }

  // required uint32 child_num = 3;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_child_num(), target);
  }

  // required bytes chain_code = 4;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_chain_code(), target);
  }

  // optional bytes private_key = 5;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteBytesMaybeAliased(
        5, this->_internal_private_key(), target);
  }

  // optional bytes public_key = 6;
  if (cached_has_bits & 0x00000004u) {
    target = stream->WriteBytesMaybeAliased(
        6, this->_internal_public_key(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hw.trezor.messages.common.HDNodeType)
  return target;
}

size_t HDNodeType::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:hw.trezor.messages.common.HDNodeType)
  size_t total_size = 0;

  if (_internal_has_chain_code()) {
    // required bytes chain_code = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_chain_code());
  }

  if (_internal_has_depth()) {
    // required uint32 depth = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_depth());
  }

  if (_internal_has_fingerprint()) {
    // required uint32 fingerprint = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_fingerprint());
  }

  if (_internal_has_child_num()) {
    // required uint32 child_num = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_child_num());
  }

  return total_size;
}
size_t HDNodeType::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hw.trezor.messages.common.HDNodeType)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000039) ^ 0x00000039) == 0) {  // All required fields are present.
    // required bytes chain_code = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_chain_code());

    // required uint32 depth = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_depth());

    // required uint32 fingerprint = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_fingerprint());

    // required uint32 child_num = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_child_num());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000006u) {
    // optional bytes private_key = 5;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_private_key());
    }

    // optional bytes public_key = 6;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_public_key());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HDNodeType::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hw.trezor.messages.common.HDNodeType)
  GOOGLE_DCHECK_NE(&from, this);
  const HDNodeType* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<HDNodeType>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hw.trezor.messages.common.HDNodeType)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hw.trezor.messages.common.HDNodeType)
    MergeFrom(*source);
  }
}

void HDNodeType::MergeFrom(const HDNodeType& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hw.trezor.messages.common.HDNodeType)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      chain_code_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.chain_code_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      private_key_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.private_key_);
    }
    if (cached_has_bits & 0x00000004u) {
      _has_bits_[0] |= 0x00000004u;
      public_key_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.public_key_);
    }
    if (cached_has_bits & 0x00000008u) {
      depth_ = from.depth_;
    }
    if (cached_has_bits & 0x00000010u) {
      fingerprint_ = from.fingerprint_;
    }
    if (cached_has_bits & 0x00000020u) {
      child_num_ = from.child_num_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void HDNodeType::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hw.trezor.messages.common.HDNodeType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HDNodeType::CopyFrom(const HDNodeType& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hw.trezor.messages.common.HDNodeType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HDNodeType::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000039) != 0x00000039) return false;
  return true;
}

void HDNodeType::InternalSwap(HDNodeType* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  chain_code_.Swap(&other->chain_code_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  private_key_.Swap(&other->private_key_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  public_key_.Swap(&other->public_key_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(depth_, other->depth_);
  swap(fingerprint_, other->fingerprint_);
  swap(child_num_, other->child_num_);
}

::PROTOBUF_NAMESPACE_ID::Metadata HDNodeType::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace common
}  // namespace messages
}  // namespace trezor
}  // namespace hw
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::hw::trezor::messages::common::Success* Arena::CreateMaybeMessage< ::hw::trezor::messages::common::Success >(Arena* arena) {
  return Arena::CreateInternal< ::hw::trezor::messages::common::Success >(arena);
}
template<> PROTOBUF_NOINLINE ::hw::trezor::messages::common::Failure* Arena::CreateMaybeMessage< ::hw::trezor::messages::common::Failure >(Arena* arena) {
  return Arena::CreateInternal< ::hw::trezor::messages::common::Failure >(arena);
}
template<> PROTOBUF_NOINLINE ::hw::trezor::messages::common::ButtonRequest* Arena::CreateMaybeMessage< ::hw::trezor::messages::common::ButtonRequest >(Arena* arena) {
  return Arena::CreateInternal< ::hw::trezor::messages::common::ButtonRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::hw::trezor::messages::common::ButtonAck* Arena::CreateMaybeMessage< ::hw::trezor::messages::common::ButtonAck >(Arena* arena) {
  return Arena::CreateInternal< ::hw::trezor::messages::common::ButtonAck >(arena);
}
template<> PROTOBUF_NOINLINE ::hw::trezor::messages::common::PinMatrixRequest* Arena::CreateMaybeMessage< ::hw::trezor::messages::common::PinMatrixRequest >(Arena* arena) {
  return Arena::CreateInternal< ::hw::trezor::messages::common::PinMatrixRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::hw::trezor::messages::common::PinMatrixAck* Arena::CreateMaybeMessage< ::hw::trezor::messages::common::PinMatrixAck >(Arena* arena) {
  return Arena::CreateInternal< ::hw::trezor::messages::common::PinMatrixAck >(arena);
}
template<> PROTOBUF_NOINLINE ::hw::trezor::messages::common::PassphraseRequest* Arena::CreateMaybeMessage< ::hw::trezor::messages::common::PassphraseRequest >(Arena* arena) {
  return Arena::CreateInternal< ::hw::trezor::messages::common::PassphraseRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::hw::trezor::messages::common::PassphraseAck* Arena::CreateMaybeMessage< ::hw::trezor::messages::common::PassphraseAck >(Arena* arena) {
  return Arena::CreateInternal< ::hw::trezor::messages::common::PassphraseAck >(arena);
}
template<> PROTOBUF_NOINLINE ::hw::trezor::messages::common::Deprecated_PassphraseStateRequest* Arena::CreateMaybeMessage< ::hw::trezor::messages::common::Deprecated_PassphraseStateRequest >(Arena* arena) {
  return Arena::CreateInternal< ::hw::trezor::messages::common::Deprecated_PassphraseStateRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::hw::trezor::messages::common::Deprecated_PassphraseStateAck* Arena::CreateMaybeMessage< ::hw::trezor::messages::common::Deprecated_PassphraseStateAck >(Arena* arena) {
  return Arena::CreateInternal< ::hw::trezor::messages::common::Deprecated_PassphraseStateAck >(arena);
}
template<> PROTOBUF_NOINLINE ::hw::trezor::messages::common::HDNodeType* Arena::CreateMaybeMessage< ::hw::trezor::messages::common::HDNodeType >(Arena* arena) {
  return Arena::CreateInternal< ::hw::trezor::messages::common::HDNodeType >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
